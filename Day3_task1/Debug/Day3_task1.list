
Day3_task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c44  08002c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002c58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002c58  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d734  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a82  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f20  00000000  00000000  00030950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da52  00000000  00000000  00051870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca57  00000000  00000000  0005f2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bd19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  0012bd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c0c 	.word	0x08002c0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002c0c 	.word	0x08002c0c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc3e 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f9ce 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa9a 	bl	8000a4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fa6e 	bl	80009f8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800051c:	f000 fa36 	bl	800098c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000520:	4801      	ldr	r0, [pc, #4]	; (8000528 <main+0x20>)
 8000522:	f001 fdb5 	bl	8002090 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x1e>
 8000528:	2000002c 	.word	0x2000002c

0800052c <HAL_TIM_PeriodElapsedCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (htim6->Instance == TIM6) {  // Replace TIMx with your specific timer
//        display_number(current_number);
//        current_number = (current_number + 1) % 10;  // Increment and wrap around
    }
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000550:	d117      	bne.n	8000582 <HAL_GPIO_EXTI_Callback+0x42>
        current_number = (current_number + 1) % 10;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <HAL_GPIO_EXTI_Callback+0x50>)
 800055c:	fb83 1302 	smull	r1, r3, r3, r2
 8000560:	1099      	asrs	r1, r3, #2
 8000562:	17d3      	asrs	r3, r2, #31
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	1ad1      	subs	r1, r2, r3
 8000570:	b2ca      	uxtb	r2, r1
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000574:	701a      	strb	r2, [r3, #0]
        display_number(current_number);
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f809 	bl	8000594 <display_number>
    }
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028
 8000590:	66666667 	.word	0x66666667

08000594 <display_number>:

void display_number(uint8_t number) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (number) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b09      	cmp	r3, #9
 80005a2:	f200 817f 	bhi.w	80008a4 <display_number+0x310>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <display_number+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005d5 	.word	0x080005d5
 80005b0:	0800061d 	.word	0x0800061d
 80005b4:	08000665 	.word	0x08000665
 80005b8:	080006ad 	.word	0x080006ad
 80005bc:	080006f5 	.word	0x080006f5
 80005c0:	0800073d 	.word	0x0800073d
 80005c4:	08000785 	.word	0x08000785
 80005c8:	080007cd 	.word	0x080007cd
 80005cc:	08000815 	.word	0x08000815
 80005d0:	0800085d 	.word	0x0800085d
        case 0:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	48b4      	ldr	r0, [pc, #720]	; (80008ac <display_number+0x318>)
 80005da:	f000 feef 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2102      	movs	r1, #2
 80005e2:	48b2      	ldr	r0, [pc, #712]	; (80008ac <display_number+0x318>)
 80005e4:	f000 feea 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2104      	movs	r1, #4
 80005ec:	48af      	ldr	r0, [pc, #700]	; (80008ac <display_number+0x318>)
 80005ee:	f000 fee5 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	48ad      	ldr	r0, [pc, #692]	; (80008ac <display_number+0x318>)
 80005f8:	f000 fee0 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	48aa      	ldr	r0, [pc, #680]	; (80008ac <display_number+0x318>)
 8000602:	f000 fedb 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	48a8      	ldr	r0, [pc, #672]	; (80008ac <display_number+0x318>)
 800060c:	f000 fed6 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2140      	movs	r1, #64	; 0x40
 8000614:	48a5      	ldr	r0, [pc, #660]	; (80008ac <display_number+0x318>)
 8000616:	f000 fed1 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 800061a:	e143      	b.n	80008a4 <display_number+0x310>
        case 1:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2101      	movs	r1, #1
 8000620:	48a2      	ldr	r0, [pc, #648]	; (80008ac <display_number+0x318>)
 8000622:	f000 fecb 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	48a0      	ldr	r0, [pc, #640]	; (80008ac <display_number+0x318>)
 800062c:	f000 fec6 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	489d      	ldr	r0, [pc, #628]	; (80008ac <display_number+0x318>)
 8000636:	f000 fec1 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	489b      	ldr	r0, [pc, #620]	; (80008ac <display_number+0x318>)
 8000640:	f000 febc 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2110      	movs	r1, #16
 8000648:	4898      	ldr	r0, [pc, #608]	; (80008ac <display_number+0x318>)
 800064a:	f000 feb7 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2120      	movs	r1, #32
 8000652:	4896      	ldr	r0, [pc, #600]	; (80008ac <display_number+0x318>)
 8000654:	f000 feb2 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	4893      	ldr	r0, [pc, #588]	; (80008ac <display_number+0x318>)
 800065e:	f000 fead 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 8000662:	e11f      	b.n	80008a4 <display_number+0x310>
        case 2:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4890      	ldr	r0, [pc, #576]	; (80008ac <display_number+0x318>)
 800066a:	f000 fea7 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2102      	movs	r1, #2
 8000672:	488e      	ldr	r0, [pc, #568]	; (80008ac <display_number+0x318>)
 8000674:	f000 fea2 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	488b      	ldr	r0, [pc, #556]	; (80008ac <display_number+0x318>)
 800067e:	f000 fe9d 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2108      	movs	r1, #8
 8000686:	4889      	ldr	r0, [pc, #548]	; (80008ac <display_number+0x318>)
 8000688:	f000 fe98 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	4886      	ldr	r0, [pc, #536]	; (80008ac <display_number+0x318>)
 8000692:	f000 fe93 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	4884      	ldr	r0, [pc, #528]	; (80008ac <display_number+0x318>)
 800069c:	f000 fe8e 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	4881      	ldr	r0, [pc, #516]	; (80008ac <display_number+0x318>)
 80006a6:	f000 fe89 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 80006aa:	e0fb      	b.n	80008a4 <display_number+0x310>
        case 3:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	487e      	ldr	r0, [pc, #504]	; (80008ac <display_number+0x318>)
 80006b2:	f000 fe83 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2102      	movs	r1, #2
 80006ba:	487c      	ldr	r0, [pc, #496]	; (80008ac <display_number+0x318>)
 80006bc:	f000 fe7e 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2104      	movs	r1, #4
 80006c4:	4879      	ldr	r0, [pc, #484]	; (80008ac <display_number+0x318>)
 80006c6:	f000 fe79 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	4877      	ldr	r0, [pc, #476]	; (80008ac <display_number+0x318>)
 80006d0:	f000 fe74 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2110      	movs	r1, #16
 80006d8:	4874      	ldr	r0, [pc, #464]	; (80008ac <display_number+0x318>)
 80006da:	f000 fe6f 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	4872      	ldr	r0, [pc, #456]	; (80008ac <display_number+0x318>)
 80006e4:	f000 fe6a 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	486f      	ldr	r0, [pc, #444]	; (80008ac <display_number+0x318>)
 80006ee:	f000 fe65 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 80006f2:	e0d7      	b.n	80008a4 <display_number+0x310>
        case 4:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2101      	movs	r1, #1
 80006f8:	486c      	ldr	r0, [pc, #432]	; (80008ac <display_number+0x318>)
 80006fa:	f000 fe5f 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	486a      	ldr	r0, [pc, #424]	; (80008ac <display_number+0x318>)
 8000704:	f000 fe5a 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2104      	movs	r1, #4
 800070c:	4867      	ldr	r0, [pc, #412]	; (80008ac <display_number+0x318>)
 800070e:	f000 fe55 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2108      	movs	r1, #8
 8000716:	4865      	ldr	r0, [pc, #404]	; (80008ac <display_number+0x318>)
 8000718:	f000 fe50 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4862      	ldr	r0, [pc, #392]	; (80008ac <display_number+0x318>)
 8000722:	f000 fe4b 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	4860      	ldr	r0, [pc, #384]	; (80008ac <display_number+0x318>)
 800072c:	f000 fe46 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	485d      	ldr	r0, [pc, #372]	; (80008ac <display_number+0x318>)
 8000736:	f000 fe41 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 800073a:	e0b3      	b.n	80008a4 <display_number+0x310>
        case 5:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2101      	movs	r1, #1
 8000740:	485a      	ldr	r0, [pc, #360]	; (80008ac <display_number+0x318>)
 8000742:	f000 fe3b 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	4858      	ldr	r0, [pc, #352]	; (80008ac <display_number+0x318>)
 800074c:	f000 fe36 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	4855      	ldr	r0, [pc, #340]	; (80008ac <display_number+0x318>)
 8000756:	f000 fe31 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	4853      	ldr	r0, [pc, #332]	; (80008ac <display_number+0x318>)
 8000760:	f000 fe2c 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4850      	ldr	r0, [pc, #320]	; (80008ac <display_number+0x318>)
 800076a:	f000 fe27 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	484e      	ldr	r0, [pc, #312]	; (80008ac <display_number+0x318>)
 8000774:	f000 fe22 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	484b      	ldr	r0, [pc, #300]	; (80008ac <display_number+0x318>)
 800077e:	f000 fe1d 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 8000782:	e08f      	b.n	80008a4 <display_number+0x310>
        case 6:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4848      	ldr	r0, [pc, #288]	; (80008ac <display_number+0x318>)
 800078a:	f000 fe17 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	4846      	ldr	r0, [pc, #280]	; (80008ac <display_number+0x318>)
 8000794:	f000 fe12 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	4843      	ldr	r0, [pc, #268]	; (80008ac <display_number+0x318>)
 800079e:	f000 fe0d 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	4841      	ldr	r0, [pc, #260]	; (80008ac <display_number+0x318>)
 80007a8:	f000 fe08 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2110      	movs	r1, #16
 80007b0:	483e      	ldr	r0, [pc, #248]	; (80008ac <display_number+0x318>)
 80007b2:	f000 fe03 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	483c      	ldr	r0, [pc, #240]	; (80008ac <display_number+0x318>)
 80007bc:	f000 fdfe 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	4839      	ldr	r0, [pc, #228]	; (80008ac <display_number+0x318>)
 80007c6:	f000 fdf9 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 80007ca:	e06b      	b.n	80008a4 <display_number+0x310>
        case 7:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <display_number+0x318>)
 80007d2:	f000 fdf3 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4834      	ldr	r0, [pc, #208]	; (80008ac <display_number+0x318>)
 80007dc:	f000 fdee 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4831      	ldr	r0, [pc, #196]	; (80008ac <display_number+0x318>)
 80007e6:	f000 fde9 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2108      	movs	r1, #8
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <display_number+0x318>)
 80007f0:	f000 fde4 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2110      	movs	r1, #16
 80007f8:	482c      	ldr	r0, [pc, #176]	; (80008ac <display_number+0x318>)
 80007fa:	f000 fddf 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2120      	movs	r1, #32
 8000802:	482a      	ldr	r0, [pc, #168]	; (80008ac <display_number+0x318>)
 8000804:	f000 fdda 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4827      	ldr	r0, [pc, #156]	; (80008ac <display_number+0x318>)
 800080e:	f000 fdd5 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 8000812:	e047      	b.n	80008a4 <display_number+0x310>
        case 8:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <display_number+0x318>)
 800081a:	f000 fdcf 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2102      	movs	r1, #2
 8000822:	4822      	ldr	r0, [pc, #136]	; (80008ac <display_number+0x318>)
 8000824:	f000 fdca 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2104      	movs	r1, #4
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <display_number+0x318>)
 800082e:	f000 fdc5 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	481d      	ldr	r0, [pc, #116]	; (80008ac <display_number+0x318>)
 8000838:	f000 fdc0 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	481a      	ldr	r0, [pc, #104]	; (80008ac <display_number+0x318>)
 8000842:	f000 fdbb 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <display_number+0x318>)
 800084c:	f000 fdb6 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	4815      	ldr	r0, [pc, #84]	; (80008ac <display_number+0x318>)
 8000856:	f000 fdb1 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 800085a:	e023      	b.n	80008a4 <display_number+0x310>
        case 9:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <display_number+0x318>)
 8000862:	f000 fdab 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <display_number+0x318>)
 800086c:	f000 fda6 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <display_number+0x318>)
 8000876:	f000 fda1 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <display_number+0x318>)
 8000880:	f000 fd9c 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <display_number+0x318>)
 800088a:	f000 fd97 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <display_number+0x318>)
 8000894:	f000 fd92 	bl	80013bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <display_number+0x318>)
 800089e:	f000 fd8d 	bl	80013bc <HAL_GPIO_WritePin>
            break;
 80008a2:	bf00      	nop
    }
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020800 	.word	0x40020800

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2234      	movs	r2, #52	; 0x34
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f99c 	bl	8002bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a29      	ldr	r2, [pc, #164]	; (8000984 <SystemClock_Config+0xd4>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <SystemClock_Config+0xd4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemClock_Config+0xd8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <SystemClock_Config+0xd8>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <SystemClock_Config+0xd8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2310      	movs	r3, #16
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000924:	2310      	movs	r3, #16
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000928:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800092c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800092e:	2304      	movs	r3, #4
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8b8 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800094a:	f000 f909 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fd58 	bl	8001420 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000976:	f000 f8f3 	bl	8000b60 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM6_Init+0x64>)
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_TIM6_Init+0x68>)
 800099e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009a2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 35535;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009b0:	f648 22cf 	movw	r2, #35535	; 0x8acf
 80009b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009be:	f001 fb17 	bl	8001ff0 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009c8:	f000 f8ca 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM6_Init+0x64>)
 80009da:	f001 fd99 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 f8bc 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	40001000 	.word	0x40001000

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f001 fdfe 	bl	8002630 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f891 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000074 	.word	0x20000074
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a33      	ldr	r2, [pc, #204]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	217f      	movs	r1, #127	; 0x7f
 8000ad6:	4820      	ldr	r0, [pc, #128]	; (8000b58 <MX_GPIO_Init+0x10c>)
 8000ad8:	f000 fc70 	bl	80013bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2120      	movs	r1, #32
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_GPIO_Init+0x110>)
 8000ae2:	f000 fc6b 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <MX_GPIO_Init+0x10c>)
 8000afe:	f000 fac9 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b02:	237f      	movs	r3, #127	; 0x7f
 8000b04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <MX_GPIO_Init+0x10c>)
 8000b1a:	f000 fabb 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1e:	2320      	movs	r3, #32
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <MX_GPIO_Init+0x110>)
 8000b36:	f000 faad 	bl	8001094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2028      	movs	r0, #40	; 0x28
 8000b40:	f000 fa71 	bl	8001026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fa8a 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fa30 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d115      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f000 fa19 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 fa32 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40001000 	.word	0x40001000
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c66:	230c      	movs	r3, #12
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c82:	f000 fa07 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8a2 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf8:	f000 fb7a 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM6_DAC_IRQHandler+0x10>)
 8000d06:	f001 fa33 	bl	8002170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000002c 	.word	0x2000002c

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f001 ff25 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbcd 	bl	8000508 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	08002c4c 	.word	0x08002c4c
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	200000bc 	.word	0x200000bc

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fed4 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f943 	bl	800107a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200000b8 	.word	0x200000b8

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200000b8 	.word	0x200000b8

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e165      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8154 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80ae 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_GPIO_Init+0x300>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x308>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d025      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x310>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x20a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4a      	ldr	r2, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x206>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a49      	ldr	r2, [pc, #292]	; (80013b4 <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x202>
 8001292:	2306      	movs	r3, #6
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 8001296:	2307      	movs	r3, #7
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x304>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x324>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae96 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f896 	bl	8000540 <HAL_GPIO_EXTI_Callback>
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0cc      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d90c      	bls.n	800145c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800147e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d044      	beq.n	8001540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d119      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e067      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 0203 	bic.w	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4934      	ldr	r1, [pc, #208]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001510:	f7ff fca2 	bl	8000e58 <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	e00a      	b.n	800152e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff fc9e 	bl	8000e58 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e04f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 020c 	and.w	r2, r3, #12
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	429a      	cmp	r2, r3
 800153e:	d1eb      	bne.n	8001518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d20c      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f855 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	; (80015e0 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fc02 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08002c24 	.word	0x08002c24
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_RCC_GetHCLKFreq+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000

08001604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001608:	f7ff fff0 	bl	80015ec <HAL_RCC_GetHCLKFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	0a9b      	lsrs	r3, r3, #10
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	4903      	ldr	r1, [pc, #12]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	08002c34 	.word	0x08002c34

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001630:	f7ff ffdc 	bl	80015ec <HAL_RCC_GetHCLKFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	0b5b      	lsrs	r3, r3, #13
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	4903      	ldr	r1, [pc, #12]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	08002c34 	.word	0x08002c34

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b0ae      	sub	sp, #184	; 0xb8
 800165a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167a:	4bcb      	ldr	r3, [pc, #812]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b0c      	cmp	r3, #12
 8001684:	f200 8206 	bhi.w	8001a94 <HAL_RCC_GetSysClockFreq+0x440>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_RCC_GetSysClockFreq+0x3c>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016c5 	.word	0x080016c5
 8001694:	08001a95 	.word	0x08001a95
 8001698:	08001a95 	.word	0x08001a95
 800169c:	08001a95 	.word	0x08001a95
 80016a0:	080016cd 	.word	0x080016cd
 80016a4:	08001a95 	.word	0x08001a95
 80016a8:	08001a95 	.word	0x08001a95
 80016ac:	08001a95 	.word	0x08001a95
 80016b0:	080016d5 	.word	0x080016d5
 80016b4:	08001a95 	.word	0x08001a95
 80016b8:	08001a95 	.word	0x08001a95
 80016bc:	08001a95 	.word	0x08001a95
 80016c0:	080018c5 	.word	0x080018c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4bb9      	ldr	r3, [pc, #740]	; (80019ac <HAL_RCC_GetSysClockFreq+0x358>)
 80016c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016ca:	e1e7      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016cc:	4bb8      	ldr	r3, [pc, #736]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016d2:	e1e3      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4bb4      	ldr	r3, [pc, #720]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e0:	4bb1      	ldr	r3, [pc, #708]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d071      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4bae      	ldr	r3, [pc, #696]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800170e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4621      	mov	r1, r4
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	6439      	str	r1, [r7, #64]	; 0x40
 8001730:	4629      	mov	r1, r5
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001744:	4649      	mov	r1, r9
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4641      	mov	r1, r8
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4641      	mov	r1, r8
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4641      	mov	r1, r8
 8001754:	1a51      	subs	r1, r2, r1
 8001756:	63b9      	str	r1, [r7, #56]	; 0x38
 8001758:	4649      	mov	r1, r9
 800175a:	eb63 0301 	sbc.w	r3, r3, r1
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800176c:	4649      	mov	r1, r9
 800176e:	00cb      	lsls	r3, r1, #3
 8001770:	4641      	mov	r1, r8
 8001772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001776:	4641      	mov	r1, r8
 8001778:	00ca      	lsls	r2, r1, #3
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	4603      	mov	r3, r0
 8001780:	4622      	mov	r2, r4
 8001782:	189b      	adds	r3, r3, r2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
 8001786:	462b      	mov	r3, r5
 8001788:	460a      	mov	r2, r1
 800178a:	eb42 0303 	adc.w	r3, r2, r3
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800179c:	4629      	mov	r1, r5
 800179e:	024b      	lsls	r3, r1, #9
 80017a0:	4621      	mov	r1, r4
 80017a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017a6:	4621      	mov	r1, r4
 80017a8:	024a      	lsls	r2, r1, #9
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017c0:	f7fe fd20 	bl	8000204 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ce:	e067      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ea:	2300      	movs	r3, #0
 80017ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017f2:	4622      	mov	r2, r4
 80017f4:	462b      	mov	r3, r5
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0159      	lsls	r1, r3, #5
 8001800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001804:	0150      	lsls	r0, r2, #5
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4621      	mov	r1, r4
 800180c:	1a51      	subs	r1, r2, r1
 800180e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001810:	4629      	mov	r1, r5
 8001812:	eb63 0301 	sbc.w	r3, r3, r1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001824:	4649      	mov	r1, r9
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182e:	4641      	mov	r1, r8
 8001830:	018a      	lsls	r2, r1, #6
 8001832:	4641      	mov	r1, r8
 8001834:	ebb2 0a01 	subs.w	sl, r2, r1
 8001838:	4649      	mov	r1, r9
 800183a:	eb63 0b01 	sbc.w	fp, r3, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800184a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800184e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001852:	4692      	mov	sl, r2
 8001854:	469b      	mov	fp, r3
 8001856:	4623      	mov	r3, r4
 8001858:	eb1a 0303 	adds.w	r3, sl, r3
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	462b      	mov	r3, r5
 8001860:	eb4b 0303 	adc.w	r3, fp, r3
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001872:	4629      	mov	r1, r5
 8001874:	028b      	lsls	r3, r1, #10
 8001876:	4621      	mov	r1, r4
 8001878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800187c:	4621      	mov	r1, r4
 800187e:	028a      	lsls	r2, r1, #10
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001888:	2200      	movs	r2, #0
 800188a:	673b      	str	r3, [r7, #112]	; 0x70
 800188c:	677a      	str	r2, [r7, #116]	; 0x74
 800188e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001892:	f7fe fcb7 	bl	8000204 <__aeabi_uldivmod>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4613      	mov	r3, r2
 800189c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018c2:	e0eb      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d06b      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80018e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ee:	663b      	str	r3, [r7, #96]	; 0x60
 80018f0:	2300      	movs	r3, #0
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
 80018f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018f8:	4622      	mov	r2, r4
 80018fa:	462b      	mov	r3, r5
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0159      	lsls	r1, r3, #5
 8001906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190a:	0150      	lsls	r0, r2, #5
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4621      	mov	r1, r4
 8001912:	1a51      	subs	r1, r2, r1
 8001914:	61b9      	str	r1, [r7, #24]
 8001916:	4629      	mov	r1, r5
 8001918:	eb63 0301 	sbc.w	r3, r3, r1
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800192a:	4659      	mov	r1, fp
 800192c:	018b      	lsls	r3, r1, #6
 800192e:	4651      	mov	r1, sl
 8001930:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001934:	4651      	mov	r1, sl
 8001936:	018a      	lsls	r2, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ebb2 0801 	subs.w	r8, r2, r1
 800193e:	4659      	mov	r1, fp
 8001940:	eb63 0901 	sbc.w	r9, r3, r1
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001950:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001954:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001958:	4690      	mov	r8, r2
 800195a:	4699      	mov	r9, r3
 800195c:	4623      	mov	r3, r4
 800195e:	eb18 0303 	adds.w	r3, r8, r3
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	462b      	mov	r3, r5
 8001966:	eb49 0303 	adc.w	r3, r9, r3
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001978:	4629      	mov	r1, r5
 800197a:	024b      	lsls	r3, r1, #9
 800197c:	4621      	mov	r1, r4
 800197e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001982:	4621      	mov	r1, r4
 8001984:	024a      	lsls	r2, r1, #9
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800198e:	2200      	movs	r2, #0
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
 8001992:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001994:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001998:	f7fe fc34 	bl	8000204 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019a6:	e065      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x420>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_GetSysClockFreq+0x458>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	2200      	movs	r2, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	4611      	mov	r1, r2
 80019c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c4:	653b      	str	r3, [r7, #80]	; 0x50
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
 80019ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019ce:	4642      	mov	r2, r8
 80019d0:	464b      	mov	r3, r9
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0159      	lsls	r1, r3, #5
 80019dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e0:	0150      	lsls	r0, r2, #5
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4641      	mov	r1, r8
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	4649      	mov	r1, r9
 80019ee:	eb63 0301 	sbc.w	r3, r3, r1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a00:	4659      	mov	r1, fp
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	4651      	mov	r1, sl
 8001a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	018a      	lsls	r2, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	1a54      	subs	r4, r2, r1
 8001a12:	4659      	mov	r1, fp
 8001a14:	eb63 0501 	sbc.w	r5, r3, r1
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a66:	f7fe fbcd 	bl	8000204 <__aeabi_uldivmod>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4613      	mov	r3, r2
 8001a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_GetSysClockFreq+0x458>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0f1b      	lsrs	r3, r3, #28
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a92:	e003      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	37b8      	adds	r7, #184	; 0xb8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400

08001ab4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e28d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8083 	beq.w	8001bda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d019      	beq.n	8001b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae0:	4b91      	ldr	r3, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aec:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d112      	bne.n	8001b2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b12:	d10b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4b84      	ldr	r3, [pc, #528]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x124>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d157      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e25a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x90>
 8001b36:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7b      	ldr	r2, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xcc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0xb4>
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a75      	ldr	r2, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xcc>
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6b      	ldr	r2, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f966 	bl	8000e58 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff f962 	bl	8000e58 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e21f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xdc>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f952 	bl	8000e58 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f94e 	bl	8000e58 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e20b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x104>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06f      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x186>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1d3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4937      	ldr	r1, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8fb 	bl	8000e58 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff f8f7 	bl	8000e58 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1b4      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4925      	ldr	r1, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f8da 	bl	8000e58 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f8d6 	bl	8000e58 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e193      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d036      	beq.n	8001d40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f8ba 	bl	8000e58 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f8b6 	bl	8000e58 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e173      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x234>
 8001d06:	e01b      	b.n	8001d40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f8a3 	bl	8000e58 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	e00e      	b.n	8001d34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff f89f 	bl	8000e58 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d907      	bls.n	8001d34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e15c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	42470000 	.word	0x42470000
 8001d30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ea      	bne.n	8001d16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8097 	beq.w	8001e7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f85f 	bl	8000e58 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff f85b 	bl	8000e58 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e118      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x31e>
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x358>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x340>
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	4a60      	ldr	r2, [pc, #384]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6713      	str	r3, [r2, #112]	; 0x70
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x358>
 8001df4:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a59      	ldr	r2, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff f820 	bl	8000e58 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f81c 	bl	8000e58 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0d7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ee      	beq.n	8001e1c <HAL_RCC_OscConfig+0x368>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f80a 	bl	8000e58 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff f806 	bl	8000e58 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0c1      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ee      	bne.n	8001e48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80ad 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d060      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d145      	bne.n	8001f26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ffda 	bl	8000e58 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ffd6 	bl	8000e58 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e093      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	071b      	lsls	r3, r3, #28
 8001ef2:	491b      	ldr	r1, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe ffab 	bl	8000e58 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe ffa7 	bl	8000e58 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e064      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x452>
 8001f24:	e05c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff94 	bl	8000e58 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe ff90 	bl	8000e58 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e04d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
 8001f52:	e045      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e040      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x538>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d030      	beq.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d119      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10f      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e041      	b.n	8002086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fdd0 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 f9ce 	bl	80023d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e04e      	b.n	8002146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_TIM_Base_Start_IT+0xc4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d022      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d2:	d01d      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_TIM_Base_Start_IT+0xc8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d018      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_TIM_Base_Start_IT+0xcc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_TIM_Base_Start_IT+0xd0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00e      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <HAL_TIM_Base_Start_IT+0xd4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d009      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_TIM_Base_Start_IT+0xd8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x80>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_TIM_Base_Start_IT+0xdc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d111      	bne.n	8002134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d010      	beq.n	8002144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	e007      	b.n	8002144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40010400 	.word	0x40010400
 8002168:	40014000 	.word	0x40014000
 800216c:	40001800 	.word	0x40001800

08002170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0202 	mvn.w	r2, #2
 800219c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8ee 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8e0 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8f1 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d122      	bne.n	8002220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d11b      	bne.n	8002220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0204 	mvn.w	r2, #4
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8c4 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8b6 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f8c7 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0208 	mvn.w	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f89a 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f88c 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f89d 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b10      	cmp	r3, #16
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0210 	mvn.w	r2, #16
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2208      	movs	r2, #8
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f870 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f862 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f873 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0201 	mvn.w	r2, #1
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe f91c 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b80      	cmp	r3, #128	; 0x80
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d107      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f97e 	bl	800261c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f838 	bl	80023bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b20      	cmp	r3, #32
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0220 	mvn.w	r2, #32
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f948 	bl	8002608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <TIM_Base_SetConfig+0x114>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <TIM_Base_SetConfig+0x40>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d00f      	beq.n	8002410 <TIM_Base_SetConfig+0x40>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3d      	ldr	r2, [pc, #244]	; (80024e8 <TIM_Base_SetConfig+0x118>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00b      	beq.n	8002410 <TIM_Base_SetConfig+0x40>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <TIM_Base_SetConfig+0x11c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <TIM_Base_SetConfig+0x40>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <TIM_Base_SetConfig+0x120>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0x40>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <TIM_Base_SetConfig+0x124>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d108      	bne.n	8002422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <TIM_Base_SetConfig+0x114>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d027      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <TIM_Base_SetConfig+0x118>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d023      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <TIM_Base_SetConfig+0x11c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <TIM_Base_SetConfig+0x120>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01b      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a29      	ldr	r2, [pc, #164]	; (80024f4 <TIM_Base_SetConfig+0x124>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d017      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <TIM_Base_SetConfig+0x128>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <TIM_Base_SetConfig+0x12c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00f      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <TIM_Base_SetConfig+0x130>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00b      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a25      	ldr	r2, [pc, #148]	; (8002504 <TIM_Base_SetConfig+0x134>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <TIM_Base_SetConfig+0x138>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d003      	beq.n	8002482 <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <TIM_Base_SetConfig+0x13c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d108      	bne.n	8002494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <TIM_Base_SetConfig+0x114>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <TIM_Base_SetConfig+0xf8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <TIM_Base_SetConfig+0x124>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d103      	bne.n	80024d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	615a      	str	r2, [r3, #20]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800
 80024f0:	40000c00 	.word	0x40000c00
 80024f4:	40010400 	.word	0x40010400
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40014400 	.word	0x40014400
 8002500:	40014800 	.word	0x40014800
 8002504:	40001800 	.word	0x40001800
 8002508:	40001c00 	.word	0x40001c00
 800250c:	40002000 	.word	0x40002000

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e05a      	b.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d01d      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10c      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	40010400 	.word	0x40010400
 8002600:	40014000 	.word	0x40014000
 8002604:	40001800 	.word	0x40001800

08002608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e03f      	b.n	80026c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fad8 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f829 	bl	80026cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d0:	b0c0      	sub	sp, #256	; 0x100
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	ea40 0301 	orr.w	r3, r0, r1
 80026f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	431a      	orrs	r2, r3
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002724:	f021 010c 	bic.w	r1, r1, #12
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002732:	430b      	orrs	r3, r1
 8002734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	6999      	ldr	r1, [r3, #24]
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	ea40 0301 	orr.w	r3, r0, r1
 8002752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <UART_SetConfig+0x2cc>)
 800275c:	429a      	cmp	r2, r3
 800275e:	d005      	beq.n	800276c <UART_SetConfig+0xa0>
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b8d      	ldr	r3, [pc, #564]	; (800299c <UART_SetConfig+0x2d0>)
 8002768:	429a      	cmp	r2, r3
 800276a:	d104      	bne.n	8002776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800276c:	f7fe ff5e 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8002770:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002774:	e003      	b.n	800277e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002776:	f7fe ff45 	bl	8001604 <HAL_RCC_GetPCLK1Freq>
 800277a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002788:	f040 810c 	bne.w	80029a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800278c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002790:	2200      	movs	r2, #0
 8002792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800279a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	1891      	adds	r1, r2, r2
 80027a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80027a6:	415b      	adcs	r3, r3
 80027a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027ae:	4621      	mov	r1, r4
 80027b0:	eb12 0801 	adds.w	r8, r2, r1
 80027b4:	4629      	mov	r1, r5
 80027b6:	eb43 0901 	adc.w	r9, r3, r1
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ce:	4690      	mov	r8, r2
 80027d0:	4699      	mov	r9, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	eb18 0303 	adds.w	r3, r8, r3
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027dc:	462b      	mov	r3, r5
 80027de:	eb49 0303 	adc.w	r3, r9, r3
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027fa:	460b      	mov	r3, r1
 80027fc:	18db      	adds	r3, r3, r3
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
 8002800:	4613      	mov	r3, r2
 8002802:	eb42 0303 	adc.w	r3, r2, r3
 8002806:	657b      	str	r3, [r7, #84]	; 0x54
 8002808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800280c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002810:	f7fd fcf8 	bl	8000204 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <UART_SetConfig+0x2d4>)
 800281a:	fba3 2302 	umull	r2, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	011c      	lsls	r4, r3, #4
 8002822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002826:	2200      	movs	r2, #0
 8002828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800282c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002834:	4642      	mov	r2, r8
 8002836:	464b      	mov	r3, r9
 8002838:	1891      	adds	r1, r2, r2
 800283a:	64b9      	str	r1, [r7, #72]	; 0x48
 800283c:	415b      	adcs	r3, r3
 800283e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002844:	4641      	mov	r1, r8
 8002846:	eb12 0a01 	adds.w	sl, r2, r1
 800284a:	4649      	mov	r1, r9
 800284c:	eb43 0b01 	adc.w	fp, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800285c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002864:	4692      	mov	sl, r2
 8002866:	469b      	mov	fp, r3
 8002868:	4643      	mov	r3, r8
 800286a:	eb1a 0303 	adds.w	r3, sl, r3
 800286e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002872:	464b      	mov	r3, r9
 8002874:	eb4b 0303 	adc.w	r3, fp, r3
 8002878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002888:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800288c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002890:	460b      	mov	r3, r1
 8002892:	18db      	adds	r3, r3, r3
 8002894:	643b      	str	r3, [r7, #64]	; 0x40
 8002896:	4613      	mov	r3, r2
 8002898:	eb42 0303 	adc.w	r3, r2, r3
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
 800289e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028a6:	f7fd fcad 	bl	8000204 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <UART_SetConfig+0x2d4>)
 80028b2:	fba3 2301 	umull	r2, r3, r3, r1
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	1acb      	subs	r3, r1, r3
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <UART_SetConfig+0x2d4>)
 80028c8:	fba3 2302 	umull	r2, r3, r3, r2
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d4:	441c      	add	r4, r3
 80028d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028e8:	4642      	mov	r2, r8
 80028ea:	464b      	mov	r3, r9
 80028ec:	1891      	adds	r1, r2, r2
 80028ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80028f0:	415b      	adcs	r3, r3
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028f8:	4641      	mov	r1, r8
 80028fa:	1851      	adds	r1, r2, r1
 80028fc:	6339      	str	r1, [r7, #48]	; 0x30
 80028fe:	4649      	mov	r1, r9
 8002900:	414b      	adcs	r3, r1
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002910:	4659      	mov	r1, fp
 8002912:	00cb      	lsls	r3, r1, #3
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291a:	4651      	mov	r1, sl
 800291c:	00ca      	lsls	r2, r1, #3
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	4603      	mov	r3, r0
 8002924:	4642      	mov	r2, r8
 8002926:	189b      	adds	r3, r3, r2
 8002928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800292c:	464b      	mov	r3, r9
 800292e:	460a      	mov	r2, r1
 8002930:	eb42 0303 	adc.w	r3, r2, r3
 8002934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800294c:	460b      	mov	r3, r1
 800294e:	18db      	adds	r3, r3, r3
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 8002952:	4613      	mov	r3, r2
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002962:	f7fd fc4f 	bl	8000204 <__aeabi_uldivmod>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <UART_SetConfig+0x2d4>)
 800296c:	fba3 1302 	umull	r1, r3, r3, r2
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	2164      	movs	r1, #100	; 0x64
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3332      	adds	r3, #50	; 0x32
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <UART_SetConfig+0x2d4>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	f003 0207 	and.w	r2, r3, #7
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4422      	add	r2, r4
 8002992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002994:	e105      	b.n	8002ba2 <UART_SetConfig+0x4d6>
 8002996:	bf00      	nop
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029b6:	4642      	mov	r2, r8
 80029b8:	464b      	mov	r3, r9
 80029ba:	1891      	adds	r1, r2, r2
 80029bc:	6239      	str	r1, [r7, #32]
 80029be:	415b      	adcs	r3, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c6:	4641      	mov	r1, r8
 80029c8:	1854      	adds	r4, r2, r1
 80029ca:	4649      	mov	r1, r9
 80029cc:	eb43 0501 	adc.w	r5, r3, r1
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	00eb      	lsls	r3, r5, #3
 80029da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029de:	00e2      	lsls	r2, r4, #3
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	18e3      	adds	r3, r4, r3
 80029e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029ec:	464b      	mov	r3, r9
 80029ee:	eb45 0303 	adc.w	r3, r5, r3
 80029f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a12:	4629      	mov	r1, r5
 8002a14:	008b      	lsls	r3, r1, #2
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	008a      	lsls	r2, r1, #2
 8002a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a24:	f7fd fbee 	bl	8000204 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <UART_SetConfig+0x4e4>)
 8002a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	011c      	lsls	r4, r3, #4
 8002a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	61b9      	str	r1, [r7, #24]
 8002a50:	415b      	adcs	r3, r3
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a58:	4641      	mov	r1, r8
 8002a5a:	1851      	adds	r1, r2, r1
 8002a5c:	6139      	str	r1, [r7, #16]
 8002a5e:	4649      	mov	r1, r9
 8002a60:	414b      	adcs	r3, r1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a70:	4659      	mov	r1, fp
 8002a72:	00cb      	lsls	r3, r1, #3
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	00ca      	lsls	r2, r1, #3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	4642      	mov	r2, r8
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	460a      	mov	r2, r1
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	008b      	lsls	r3, r1, #2
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aba:	4641      	mov	r1, r8
 8002abc:	008a      	lsls	r2, r1, #2
 8002abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ac2:	f7fd fb9f 	bl	8000204 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <UART_SetConfig+0x4e4>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2164      	movs	r1, #100	; 0x64
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <UART_SetConfig+0x4e4>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aea:	441c      	add	r4, r3
 8002aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af0:	2200      	movs	r2, #0
 8002af2:	673b      	str	r3, [r7, #112]	; 0x70
 8002af4:	677a      	str	r2, [r7, #116]	; 0x74
 8002af6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002afa:	4642      	mov	r2, r8
 8002afc:	464b      	mov	r3, r9
 8002afe:	1891      	adds	r1, r2, r2
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	415b      	adcs	r3, r3
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	1851      	adds	r1, r2, r1
 8002b0e:	6039      	str	r1, [r7, #0]
 8002b10:	4649      	mov	r1, r9
 8002b12:	414b      	adcs	r3, r1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b22:	4659      	mov	r1, fp
 8002b24:	00cb      	lsls	r3, r1, #3
 8002b26:	4651      	mov	r1, sl
 8002b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	00ca      	lsls	r2, r1, #3
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	4642      	mov	r2, r8
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	460a      	mov	r2, r1
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b50:	667a      	str	r2, [r7, #100]	; 0x64
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b5e:	4649      	mov	r1, r9
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	4641      	mov	r1, r8
 8002b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b68:	4641      	mov	r1, r8
 8002b6a:	008a      	lsls	r2, r1, #2
 8002b6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b70:	f7fd fb48 	bl	8000204 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <UART_SetConfig+0x4e4>)
 8002b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2164      	movs	r1, #100	; 0x64
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <UART_SetConfig+0x4e4>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4422      	add	r2, r4
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	51eb851f 	.word	0x51eb851f

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	4d0d      	ldr	r5, [pc, #52]	; (8002bec <__libc_init_array+0x38>)
 8002bb8:	4c0d      	ldr	r4, [pc, #52]	; (8002bf0 <__libc_init_array+0x3c>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	4d0b      	ldr	r5, [pc, #44]	; (8002bf4 <__libc_init_array+0x40>)
 8002bc6:	4c0c      	ldr	r4, [pc, #48]	; (8002bf8 <__libc_init_array+0x44>)
 8002bc8:	f000 f820 	bl	8002c0c <_init>
 8002bcc:	1b64      	subs	r4, r4, r5
 8002bce:	10a4      	asrs	r4, r4, #2
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	08002c44 	.word	0x08002c44
 8002bf0:	08002c44 	.word	0x08002c44
 8002bf4:	08002c44 	.word	0x08002c44
 8002bf8:	08002c48 	.word	0x08002c48

08002bfc <memset>:
 8002bfc:	4402      	add	r2, r0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d100      	bne.n	8002c06 <memset+0xa>
 8002c04:	4770      	bx	lr
 8002c06:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0a:	e7f9      	b.n	8002c00 <memset+0x4>

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
