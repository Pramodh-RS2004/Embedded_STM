
Day6_task_BE33_FiniteState.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800358c  0800358c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  080035a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080035a0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001866  00000000  00000000  000298f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f6c  00000000  00000000  0002bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b73  00000000  00000000  0004cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c85dc  00000000  00000000  00056a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d1c  00000000  00000000  0011f084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003468 	.word	0x08003468

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003468 	.word	0x08003468

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	2b00      	cmp	r3, #0
 800052e:	d013      	beq.n	8000558 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000538:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00b      	beq.n	8000558 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000540:	e000      	b.n	8000544 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000542:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800054e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <main>:
void processResponse(void);
int validateResponse(const char *expectedResponse);

/* Private user code ---------------------------------------------------------*/
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    HAL_Init();
 800056c:	f000 fcf2 	bl	8000f54 <HAL_Init>
    SystemClock_Config();
 8000570:	f000 fa9e 	bl	8000ab0 <SystemClock_Config>
    MX_GPIO_Init();
 8000574:	f000 fb5e 	bl	8000c34 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000578:	f000 fb32 	bl	8000be0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 800057c:	f000 fb06 	bl	8000b8c <MX_USART1_UART_Init>

    // Start UART receive interrupt
    HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	49a7      	ldr	r1, [pc, #668]	; (8000820 <main+0x2b8>)
 8000584:	48a7      	ldr	r0, [pc, #668]	; (8000824 <main+0x2bc>)
 8000586:	f001 ff94 	bl	80024b2 <HAL_UART_Receive_IT>

    currentState = STATE_SEND_CMD_NAME; // Start FSM by sending the first command
 800058a:	4ba7      	ldr	r3, [pc, #668]	; (8000828 <main+0x2c0>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]

    while (1)
    {
        if (rxComplete) {
 8000590:	4ba6      	ldr	r3, [pc, #664]	; (800082c <main+0x2c4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x36>
            processResponse();
 800059a:	f000 f977 	bl	800088c <processResponse>
        }

        switch (currentState) {
 800059e:	4ba2      	ldr	r3, [pc, #648]	; (8000828 <main+0x2c0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	2b0c      	cmp	r3, #12
 80005a6:	f200 8139 	bhi.w	800081c <main+0x2b4>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <main+0x48>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005e5 	.word	0x080005e5
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	0800063f 	.word	0x0800063f
 80005bc:	08000655 	.word	0x08000655
 80005c0:	08000699 	.word	0x08000699
 80005c4:	080006af 	.word	0x080006af
 80005c8:	080006f3 	.word	0x080006f3
 80005cc:	08000709 	.word	0x08000709
 80005d0:	0800074d 	.word	0x0800074d
 80005d4:	08000763 	.word	0x08000763
 80005d8:	080007a7 	.word	0x080007a7
 80005dc:	080007bd 	.word	0x080007bd
 80005e0:	08000801 	.word	0x08000801
            case STATE_SEND_CMD_NAME:
                sendCommand("CMD?NAME\r\n");
 80005e4:	4892      	ldr	r0, [pc, #584]	; (8000830 <main+0x2c8>)
 80005e6:	f000 f93b 	bl	8000860 <sendCommand>
                HAL_Delay(2000); // Use timers or other non-blocking methods in real applications
 80005ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ee:	f000 fd23 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_NAME;
 80005f2:	4b8d      	ldr	r3, [pc, #564]	; (8000828 <main+0x2c0>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
                break;
 80005f8:	e111      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_NAME:
                if (validateResponse("RSP=0")) {
 80005fa:	488e      	ldr	r0, [pc, #568]	; (8000834 <main+0x2cc>)
 80005fc:	f000 fa00 	bl	8000a00 <validateResponse>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <main+0xac>
                    currentState = STATE_SEND_CMD_RESET;
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <main+0x2c0>)
 8000608:	2203      	movs	r2, #3
 800060a:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 800060c:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <main+0x2d0>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure (e.g., log error, alert user)
                        currentState = STATE_IDLE;
                    }
                }
                break;
 8000612:	e104      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 8000614:	4b88      	ldr	r3, [pc, #544]	; (8000838 <main+0x2d0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	dc0c      	bgt.n	8000636 <main+0xce>
                        commandRetryCount++;
 800061c:	4b86      	ldr	r3, [pc, #536]	; (8000838 <main+0x2d0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a85      	ldr	r2, [pc, #532]	; (8000838 <main+0x2d0>)
 8000624:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD?NAME\r\n");
 8000626:	4882      	ldr	r0, [pc, #520]	; (8000830 <main+0x2c8>)
 8000628:	f000 f91a 	bl	8000860 <sendCommand>
                        HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f000 fd02 	bl	8001038 <HAL_Delay>
                break;
 8000634:	e0f3      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 8000636:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <main+0x2c0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
                break;
 800063c:	e0ef      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_RESET:
                sendCommand("CMD+RESET=0\r\n");
 800063e:	487f      	ldr	r0, [pc, #508]	; (800083c <main+0x2d4>)
 8000640:	f000 f90e 	bl	8000860 <sendCommand>
                HAL_Delay(2000);
 8000644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000648:	f000 fcf6 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_RESET;
 800064c:	4b76      	ldr	r3, [pc, #472]	; (8000828 <main+0x2c0>)
 800064e:	2204      	movs	r2, #4
 8000650:	701a      	strb	r2, [r3, #0]
                break;
 8000652:	e0e4      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_RESET:
                if (validateResponse("EVT+READY")) {
 8000654:	487a      	ldr	r0, [pc, #488]	; (8000840 <main+0x2d8>)
 8000656:	f000 f9d3 	bl	8000a00 <validateResponse>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <main+0x106>
                    currentState = STATE_SEND_CMD_TXPWR;
 8000660:	4b71      	ldr	r3, [pc, #452]	; (8000828 <main+0x2c0>)
 8000662:	2205      	movs	r2, #5
 8000664:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 8000666:	4b74      	ldr	r3, [pc, #464]	; (8000838 <main+0x2d0>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }
                break;
 800066c:	e0d7      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <main+0x2d0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	dc0c      	bgt.n	8000690 <main+0x128>
                        commandRetryCount++;
 8000676:	4b70      	ldr	r3, [pc, #448]	; (8000838 <main+0x2d0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <main+0x2d0>)
 800067e:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+RESET=0\r\n");
 8000680:	486e      	ldr	r0, [pc, #440]	; (800083c <main+0x2d4>)
 8000682:	f000 f8ed 	bl	8000860 <sendCommand>
                        HAL_Delay(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068a:	f000 fcd5 	bl	8001038 <HAL_Delay>
                break;
 800068e:	e0c6      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 8000690:	4b65      	ldr	r3, [pc, #404]	; (8000828 <main+0x2c0>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
                break;
 8000696:	e0c2      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_TXPWR:
                sendCommand("CMD+TXPWR=-4\r\n");
 8000698:	486a      	ldr	r0, [pc, #424]	; (8000844 <main+0x2dc>)
 800069a:	f000 f8e1 	bl	8000860 <sendCommand>
                HAL_Delay(2000);
 800069e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a2:	f000 fcc9 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_TXPWR;
 80006a6:	4b60      	ldr	r3, [pc, #384]	; (8000828 <main+0x2c0>)
 80006a8:	2206      	movs	r2, #6
 80006aa:	701a      	strb	r2, [r3, #0]
                break;
 80006ac:	e0b7      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_TXPWR:
                if (validateResponse("RSP=0")) {
 80006ae:	4861      	ldr	r0, [pc, #388]	; (8000834 <main+0x2cc>)
 80006b0:	f000 f9a6 	bl	8000a00 <validateResponse>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <main+0x160>
                    currentState = STATE_SEND_CMD_SCANPARAM;
 80006ba:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <main+0x2c0>)
 80006bc:	2207      	movs	r2, #7
 80006be:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <main+0x2d0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }
                break;
 80006c6:	e0aa      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <main+0x2d0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	dc0c      	bgt.n	80006ea <main+0x182>
                        commandRetryCount++;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <main+0x2d0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <main+0x2d0>)
 80006d8:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+TXPWR=-4\r\n");
 80006da:	485a      	ldr	r0, [pc, #360]	; (8000844 <main+0x2dc>)
 80006dc:	f000 f8c0 	bl	8000860 <sendCommand>
                        HAL_Delay(2000);
 80006e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e4:	f000 fca8 	bl	8001038 <HAL_Delay>
                break;
 80006e8:	e099      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <main+0x2c0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
                break;
 80006f0:	e095      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_SCANPARAM:
                sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 80006f2:	4855      	ldr	r0, [pc, #340]	; (8000848 <main+0x2e0>)
 80006f4:	f000 f8b4 	bl	8000860 <sendCommand>
                HAL_Delay(2000);
 80006f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fc:	f000 fc9c 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_SCANPARAM;
 8000700:	4b49      	ldr	r3, [pc, #292]	; (8000828 <main+0x2c0>)
 8000702:	2208      	movs	r2, #8
 8000704:	701a      	strb	r2, [r3, #0]
                break;
 8000706:	e08a      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_SCANPARAM:
                if (validateResponse("RSP=0")) {
 8000708:	484a      	ldr	r0, [pc, #296]	; (8000834 <main+0x2cc>)
 800070a:	f000 f979 	bl	8000a00 <validateResponse>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <main+0x1ba>
                    currentState = STATE_SEND_CMD_SCAN;
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <main+0x2c0>)
 8000716:	2209      	movs	r2, #9
 8000718:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <main+0x2d0>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }
                break;
 8000720:	e07d      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <main+0x2d0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	dc0c      	bgt.n	8000744 <main+0x1dc>
                        commandRetryCount++;
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <main+0x2d0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a41      	ldr	r2, [pc, #260]	; (8000838 <main+0x2d0>)
 8000732:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 8000734:	4844      	ldr	r0, [pc, #272]	; (8000848 <main+0x2e0>)
 8000736:	f000 f893 	bl	8000860 <sendCommand>
                        HAL_Delay(2000);
 800073a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800073e:	f000 fc7b 	bl	8001038 <HAL_Delay>
                break;
 8000742:	e06c      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <main+0x2c0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
                break;
 800074a:	e068      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_SCAN:
                sendCommand("CMD+SCAN=1\r\n");
 800074c:	483f      	ldr	r0, [pc, #252]	; (800084c <main+0x2e4>)
 800074e:	f000 f887 	bl	8000860 <sendCommand>
                HAL_Delay(5000);
 8000752:	f241 3088 	movw	r0, #5000	; 0x1388
 8000756:	f000 fc6f 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_SCAN;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <main+0x2c0>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
                break;
 8000760:	e05d      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_SCAN:
                if (validateResponse("EVT+ADVRPT")) {
 8000762:	483b      	ldr	r0, [pc, #236]	; (8000850 <main+0x2e8>)
 8000764:	f000 f94c 	bl	8000a00 <validateResponse>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <main+0x214>
                    // Replace with actual expected scan response
                    currentState = STATE_SEND_CMD_CON;
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <main+0x2c0>)
 8000770:	220b      	movs	r2, #11
 8000772:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <main+0x2d0>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }
                break;
 800077a:	e050      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x2d0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b02      	cmp	r3, #2
 8000782:	dc0c      	bgt.n	800079e <main+0x236>
                        commandRetryCount++;
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x2d0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <main+0x2d0>)
 800078c:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+SCAN=1\r\n");
 800078e:	482f      	ldr	r0, [pc, #188]	; (800084c <main+0x2e4>)
 8000790:	f000 f866 	bl	8000860 <sendCommand>
                        HAL_Delay(5000);
 8000794:	f241 3088 	movw	r0, #5000	; 0x1388
 8000798:	f000 fc4e 	bl	8001038 <HAL_Delay>
                break;
 800079c:	e03f      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <main+0x2c0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
                break;
 80007a4:	e03b      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_CON:
                sendCommand("CMD+CON=1,fab321a20744\r\n");
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <main+0x2ec>)
 80007a8:	f000 f85a 	bl	8000860 <sendCommand>
                HAL_Delay(2000);
 80007ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b0:	f000 fc42 	bl	8001038 <HAL_Delay>
                currentState = STATE_WAIT_CMD_CON;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <main+0x2c0>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	701a      	strb	r2, [r3, #0]
                break;
 80007ba:	e030      	b.n	800081e <main+0x2b6>

            case STATE_WAIT_CMD_CON:
                if (validateResponse("RSP=0")) {
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <main+0x2cc>)
 80007be:	f000 f91f 	bl	8000a00 <validateResponse>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <main+0x26e>
                    currentState = STATE_SEND_CMD_DATA;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x2c0>)
 80007ca:	220d      	movs	r2, #13
 80007cc:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0x2d0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
                    } else {
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }
                break;
 80007d4:	e023      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <main+0x2d0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	dc0c      	bgt.n	80007f8 <main+0x290>
                        commandRetryCount++;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <main+0x2d0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <main+0x2d0>)
 80007e6:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+CON=1,fab321a20744\r\n");
 80007e8:	481a      	ldr	r0, [pc, #104]	; (8000854 <main+0x2ec>)
 80007ea:	f000 f839 	bl	8000860 <sendCommand>
                        HAL_Delay(2000);
 80007ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f2:	f000 fc21 	bl	8001038 <HAL_Delay>
                break;
 80007f6:	e012      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <main+0x2c0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
                break;
 80007fe:	e00e      	b.n	800081e <main+0x2b6>

            case STATE_SEND_CMD_DATA:
                sendCommand("CMD+DATA=<conn_handle>,\r\n");
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <main+0x2f0>)
 8000802:	f000 f82d 	bl	8000860 <sendCommand>
                HAL_Delay(2000);
 8000806:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800080a:	f000 fc15 	bl	8001038 <HAL_Delay>
                sendCommand("CMD+DATA=<conn_handle>,WELCOME TO EVERY ONE\r\n");
 800080e:	4813      	ldr	r0, [pc, #76]	; (800085c <main+0x2f4>)
 8000810:	f000 f826 	bl	8000860 <sendCommand>
                currentState = STATE_IDLE;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <main+0x2c0>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e000      	b.n	800081e <main+0x2b6>

            case STATE_IDLE:
            default:
                break;
 800081c:	bf00      	nop
        if (rxComplete) {
 800081e:	e6b7      	b.n	8000590 <main+0x28>
 8000820:	200000b4 	.word	0x200000b4
 8000824:	20000028 	.word	0x20000028
 8000828:	200000b0 	.word	0x200000b0
 800082c:	200001e6 	.word	0x200001e6
 8000830:	08003480 	.word	0x08003480
 8000834:	0800348c 	.word	0x0800348c
 8000838:	200001e8 	.word	0x200001e8
 800083c:	08003494 	.word	0x08003494
 8000840:	080034a4 	.word	0x080034a4
 8000844:	080034b0 	.word	0x080034b0
 8000848:	080034c0 	.word	0x080034c0
 800084c:	080034e0 	.word	0x080034e0
 8000850:	080034f0 	.word	0x080034f0
 8000854:	080034fc 	.word	0x080034fc
 8000858:	08003518 	.word	0x08003518
 800085c:	08003534 	.word	0x08003534

08000860 <sendCommand>:
        }
    }
}

void sendCommand(const char *cmd)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fccb 	bl	8000204 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <sendCommand+0x28>)
 800087a:	f001 fd88 	bl	800238e <HAL_UART_Transmit>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000028 	.word	0x20000028

0800088c <processResponse>:

void processResponse(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
    // Print the entire response buffer to debug
    for (uint16_t i = 0; i < bufferIndex; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	e008      	b.n	80008aa <processResponse+0x1e>
        ITM_SendChar(responseBuffer[i]);
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	4a50      	ldr	r2, [pc, #320]	; (80009dc <processResponse+0x150>)
 800089c:	5cd3      	ldrb	r3, [r2, r3]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe3a 	bl	8000518 <ITM_SendChar>
    for (uint16_t i = 0; i < bufferIndex; i++) {
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	3301      	adds	r3, #1
 80008a8:	80fb      	strh	r3, [r7, #6]
 80008aa:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <processResponse+0x154>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d3f0      	bcc.n	8000898 <processResponse+0xc>
    }
    ITM_SendChar('\n'); // Newline for clarity
 80008b6:	200a      	movs	r0, #10
 80008b8:	f7ff fe2e 	bl	8000518 <ITM_SendChar>

    // Check and handle different responses based on state
    switch (currentState) {
 80008bc:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <processResponse+0x158>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	3b02      	subs	r3, #2
 80008c2:	2b0c      	cmp	r3, #12
 80008c4:	d86e      	bhi.n	80009a4 <processResponse+0x118>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <processResponse+0x40>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000901 	.word	0x08000901
 80008d0:	080009a5 	.word	0x080009a5
 80008d4:	08000923 	.word	0x08000923
 80008d8:	080009a5 	.word	0x080009a5
 80008dc:	0800093d 	.word	0x0800093d
 80008e0:	080009a5 	.word	0x080009a5
 80008e4:	08000957 	.word	0x08000957
 80008e8:	080009a5 	.word	0x080009a5
 80008ec:	08000971 	.word	0x08000971
 80008f0:	080009a5 	.word	0x080009a5
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	080009a5 	.word	0x080009a5
 80008fc:	080009a5 	.word	0x080009a5
        case STATE_WAIT_CMD_NAME:
            if (validateResponse("RSP=0")) {
 8000900:	4839      	ldr	r0, [pc, #228]	; (80009e8 <processResponse+0x15c>)
 8000902:	f000 f87d 	bl	8000a00 <validateResponse>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <processResponse+0x8e>
                currentState = STATE_SEND_CMD_RESET;
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <processResponse+0x158>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <processResponse+0x160>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
            } else if (validateResponse("EVT+READY")) {
                // Handle unexpected response if needed
            } else {
                // Retry or handle error
            }
            break;
 8000918:	e04f      	b.n	80009ba <processResponse+0x12e>
            } else if (validateResponse("EVT+READY")) {
 800091a:	4835      	ldr	r0, [pc, #212]	; (80009f0 <processResponse+0x164>)
 800091c:	f000 f870 	bl	8000a00 <validateResponse>
            break;
 8000920:	e04b      	b.n	80009ba <processResponse+0x12e>

        case STATE_WAIT_CMD_RESET:
            if (validateResponse("EVT+READY")) {
 8000922:	4833      	ldr	r0, [pc, #204]	; (80009f0 <processResponse+0x164>)
 8000924:	f000 f86c 	bl	8000a00 <validateResponse>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d03c      	beq.n	80009a8 <processResponse+0x11c>
                currentState = STATE_SEND_CMD_TXPWR;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <processResponse+0x158>)
 8000930:	2205      	movs	r2, #5
 8000932:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <processResponse+0x160>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
            } else {
                // Retry or handle error
            }
            break;
 800093a:	e035      	b.n	80009a8 <processResponse+0x11c>

        case STATE_WAIT_CMD_TXPWR:
            if (validateResponse("RSP=0")) {
 800093c:	482a      	ldr	r0, [pc, #168]	; (80009e8 <processResponse+0x15c>)
 800093e:	f000 f85f 	bl	8000a00 <validateResponse>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d031      	beq.n	80009ac <processResponse+0x120>
                currentState = STATE_SEND_CMD_SCANPARAM;
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <processResponse+0x158>)
 800094a:	2207      	movs	r2, #7
 800094c:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <processResponse+0x160>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
            } else {
                // Retry or handle error
            }
            break;
 8000954:	e02a      	b.n	80009ac <processResponse+0x120>

        case STATE_WAIT_CMD_SCANPARAM:
            if (validateResponse("RSP=0")) {
 8000956:	4824      	ldr	r0, [pc, #144]	; (80009e8 <processResponse+0x15c>)
 8000958:	f000 f852 	bl	8000a00 <validateResponse>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d026      	beq.n	80009b0 <processResponse+0x124>
                currentState = STATE_SEND_CMD_SCAN;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <processResponse+0x158>)
 8000964:	2209      	movs	r2, #9
 8000966:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <processResponse+0x160>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
            } else {
                // Retry or handle error
            }
            break;
 800096e:	e01f      	b.n	80009b0 <processResponse+0x124>

        case STATE_WAIT_CMD_SCAN:
            if (validateResponse("EVT+ADVRPT")) {
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <processResponse+0x168>)
 8000972:	f000 f845 	bl	8000a00 <validateResponse>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d01b      	beq.n	80009b4 <processResponse+0x128>
                // Replace with actual expected scan response
                currentState = STATE_SEND_CMD_CON;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <processResponse+0x158>)
 800097e:	220b      	movs	r2, #11
 8000980:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <processResponse+0x160>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
            } else {
                // Retry or handle error
            }
            break;
 8000988:	e014      	b.n	80009b4 <processResponse+0x128>

        case STATE_WAIT_CMD_CON:
            if (validateResponse("EVT+CON")) {
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <processResponse+0x16c>)
 800098c:	f000 f838 	bl	8000a00 <validateResponse>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d010      	beq.n	80009b8 <processResponse+0x12c>
                currentState = STATE_SEND_CMD_DATA;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <processResponse+0x158>)
 8000998:	220d      	movs	r2, #13
 800099a:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <processResponse+0x160>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
            } else {
                // Retry or handle error
            }
            break;
 80009a2:	e009      	b.n	80009b8 <processResponse+0x12c>
        case STATE_WAIT_CMD_DATA:
            // Add handling for CMD+DATA responses if necessary
            break;

        default:
            break;
 80009a4:	bf00      	nop
 80009a6:	e008      	b.n	80009ba <processResponse+0x12e>
            break;
 80009a8:	bf00      	nop
 80009aa:	e006      	b.n	80009ba <processResponse+0x12e>
            break;
 80009ac:	bf00      	nop
 80009ae:	e004      	b.n	80009ba <processResponse+0x12e>
            break;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <processResponse+0x12e>
            break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <processResponse+0x12e>
            break;
 80009b8:	bf00      	nop
    }

    // Clear buffer and reset index
    bufferIndex = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <processResponse+0x154>)
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]
    memset(responseBuffer, 0, RX_BUFFER_SIZE);
 80009c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <processResponse+0x150>)
 80009c8:	f002 fd30 	bl	800342c <memset>
    rxComplete = 0;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <processResponse+0x170>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	200001e4 	.word	0x200001e4
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	0800348c 	.word	0x0800348c
 80009ec:	200001e8 	.word	0x200001e8
 80009f0:	080034a4 	.word	0x080034a4
 80009f4:	080034f0 	.word	0x080034f0
 80009f8:	08003564 	.word	0x08003564
 80009fc:	200001e6 	.word	0x200001e6

08000a00 <validateResponse>:

int validateResponse(const char *expectedResponse)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    // Check if the response buffer contains the expected response
    return strstr((char*)responseBuffer, expectedResponse) != NULL;
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <validateResponse+0x24>)
 8000a0c:	f002 fd16 	bl	800343c <strstr>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf14      	ite	ne
 8000a16:	2301      	movne	r3, #1
 8000a18:	2300      	moveq	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000b8 	.word	0x200000b8

08000a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12a      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x68>
        if (bufferIndex < RX_BUFFER_SIZE - 1) {
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8000a44:	d80b      	bhi.n	8000a5e <HAL_UART_RxCpltCallback+0x36>
            responseBuffer[bufferIndex++] = rxBuffer[0];
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	b291      	uxth	r1, r2
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a52:	8011      	strh	r1, [r2, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_UART_RxCpltCallback+0x78>)
 8000a58:	7819      	ldrb	r1, [r3, #0]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_UART_RxCpltCallback+0x7c>)
 8000a5c:	5499      	strb	r1, [r3, r2]
        }

        if (rxBuffer[0] == '\n' || bufferIndex >= RX_BUFFER_SIZE - 1) {
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_UART_RxCpltCallback+0x78>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b0a      	cmp	r3, #10
 8000a64:	d005      	beq.n	8000a72 <HAL_UART_RxCpltCallback+0x4a>
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8000a70:	d909      	bls.n	8000a86 <HAL_UART_RxCpltCallback+0x5e>
            responseBuffer[bufferIndex] = '\0';
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_UART_RxCpltCallback+0x7c>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	5499      	strb	r1, [r3, r2]
            rxComplete = 1;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_UART_RxCpltCallback+0x80>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	4905      	ldr	r1, [pc, #20]	; (8000aa0 <HAL_UART_RxCpltCallback+0x78>)
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <HAL_UART_RxCpltCallback+0x84>)
 8000a8c:	f001 fd11 	bl	80024b2 <HAL_UART_Receive_IT>
    }
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40011000 	.word	0x40011000
 8000a9c:	200001e4 	.word	0x200001e4
 8000aa0:	200000b4 	.word	0x200000b4
 8000aa4:	200000b8 	.word	0x200000b8
 8000aa8:	200001e6 	.word	0x200001e6
 8000aac:	20000028 	.word	0x20000028

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fcb4 	bl	800342c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <SystemClock_Config+0xd4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <SystemClock_Config+0xd4>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemClock_Config+0xd4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <SystemClock_Config+0xd8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000afc:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <SystemClock_Config+0xd8>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <SystemClock_Config+0xd8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000b24:	2310      	movs	r3, #16
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000b28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f93a 	bl	8001db8 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x9e>
    {
        Error_Handler();
 8000b4a:	f000 f8e1 	bl	8000d10 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2302      	movs	r3, #2
 8000b54:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fdda 	bl	8001724 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xca>
    {
        Error_Handler();
 8000b76:	f000 f8cb 	bl	8000d10 <Error_Handler>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART1_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bbc:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	f001 fb95 	bl	80022f4 <HAL_UART_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART1_UART_Init+0x48>
    {
        Error_Handler();
 8000bd0:	f000 f89e 	bl	8000d10 <Error_Handler>
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000028 	.word	0x20000028
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f001 fb6c 	bl	80022f4 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8000c22:	f000 f875 	bl	8000d10 <Error_Handler>
    }
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000006c 	.word	0x2000006c
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000cc0:	f000 fd16 	bl	80016f0 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = B1_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0xd8>)
 8000cdc:	f000 fb74 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000cf8:	f000 fb66 	bl	80013c8 <HAL_GPIO_Init>
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020800 	.word	0x40020800

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
    __disable_irq();
    while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fa60 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d135      	bne.n	8000dfa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a34      	ldr	r2, [pc, #208]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dc6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4822      	ldr	r0, [pc, #136]	; (8000e6c <HAL_UART_MspInit+0x100>)
 8000de4:	f000 faf0 	bl	80013c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2025      	movs	r0, #37	; 0x25
 8000dee:	f000 fa22 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df2:	2025      	movs	r0, #37	; 0x25
 8000df4:	f000 fa3b 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df8:	e030      	b.n	8000e5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <HAL_UART_MspInit+0x104>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d12b      	bne.n	8000e5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0x100>)
 8000e58:	f000 fab6 	bl	80013c8 <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40004400 	.word	0x40004400

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f89a 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USART1_IRQHandler+0x10>)
 8000ece:	f001 fb21 	bl	8002514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000028 	.word	0x20000028

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 fa59 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb19 	bl	8000568 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	08003594 	.word	0x08003594
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	200001f0 	.word	0x200001f0

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94f 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fec8 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f967 	bl	800128a <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f000 f92f 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200001ec 	.word	0x200001ec

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001ec 	.word	0x200001ec

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff feb6 	bl	8001020 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d008      	beq.n	80012d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e052      	b.n	800137a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0216 	bic.w	r2, r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <HAL_DMA_Abort+0x62>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0208 	bic.w	r2, r2, #8
 8001312:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001324:	e013      	b.n	800134e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001326:	f7ff fe7b 	bl	8001020 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b05      	cmp	r3, #5
 8001332:	d90c      	bls.n	800134e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e015      	b.n	800137a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e4      	bne.n	8001326 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	223f      	movs	r2, #63	; 0x3f
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e00c      	b.n	80013ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2205      	movs	r2, #5
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e165      	b.n	80016b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8154 	bne.w	80016aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ae 	beq.w	80016aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a5c      	ldr	r2, [pc, #368]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_GPIO_Init+0x304>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x308>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x216>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x310>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x314>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x318>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x20a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x31c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x206>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x320>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x202>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x304>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x324>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_GPIO_Init+0x324>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_GPIO_Init+0x324>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae96 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fc04 	bl	8001020 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fc00 	bl	8001020 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f855 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb64 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	0800356c 	.word	0x0800356c
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	0800357c 	.word	0x0800357c

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	0800357c 	.word	0x0800357c

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	b0ae      	sub	sp, #184	; 0xb8
 800195e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197e:	4bcb      	ldr	r3, [pc, #812]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b0c      	cmp	r3, #12
 8001988:	f200 8206 	bhi.w	8001d98 <HAL_RCC_GetSysClockFreq+0x440>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_RCC_GetSysClockFreq+0x3c>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019c9 	.word	0x080019c9
 8001998:	08001d99 	.word	0x08001d99
 800199c:	08001d99 	.word	0x08001d99
 80019a0:	08001d99 	.word	0x08001d99
 80019a4:	080019d1 	.word	0x080019d1
 80019a8:	08001d99 	.word	0x08001d99
 80019ac:	08001d99 	.word	0x08001d99
 80019b0:	08001d99 	.word	0x08001d99
 80019b4:	080019d9 	.word	0x080019d9
 80019b8:	08001d99 	.word	0x08001d99
 80019bc:	08001d99 	.word	0x08001d99
 80019c0:	08001d99 	.word	0x08001d99
 80019c4:	08001bc9 	.word	0x08001bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4bb9      	ldr	r3, [pc, #740]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019ce:	e1e7      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d0:	4bb8      	ldr	r3, [pc, #736]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019d6:	e1e3      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d8:	4bb4      	ldr	r3, [pc, #720]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e4:	4bb1      	ldr	r3, [pc, #708]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d071      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	4bae      	ldr	r3, [pc, #696]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	099b      	lsrs	r3, r3, #6
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a16:	4622      	mov	r2, r4
 8001a18:	462b      	mov	r3, r5
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	0159      	lsls	r1, r3, #5
 8001a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a28:	0150      	lsls	r0, r2, #5
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4621      	mov	r1, r4
 8001a30:	1a51      	subs	r1, r2, r1
 8001a32:	6439      	str	r1, [r7, #64]	; 0x40
 8001a34:	4629      	mov	r1, r5
 8001a36:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a48:	4649      	mov	r1, r9
 8001a4a:	018b      	lsls	r3, r1, #6
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a52:	4641      	mov	r1, r8
 8001a54:	018a      	lsls	r2, r1, #6
 8001a56:	4641      	mov	r1, r8
 8001a58:	1a51      	subs	r1, r2, r1
 8001a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a70:	4649      	mov	r1, r9
 8001a72:	00cb      	lsls	r3, r1, #3
 8001a74:	4641      	mov	r1, r8
 8001a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	00ca      	lsls	r2, r1, #3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	4622      	mov	r2, r4
 8001a86:	189b      	adds	r3, r3, r2
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	eb42 0303 	adc.w	r3, r2, r3
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	024b      	lsls	r3, r1, #9
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aaa:	4621      	mov	r1, r4
 8001aac:	024a      	lsls	r2, r1, #9
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ac0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac4:	f7fe fba6 	bl	8000214 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ad2:	e067      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad4:	4b75      	ldr	r3, [pc, #468]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	2200      	movs	r2, #0
 8001adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ae0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aee:	2300      	movs	r3, #0
 8001af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001af6:	4622      	mov	r2, r4
 8001af8:	462b      	mov	r3, r5
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0159      	lsls	r1, r3, #5
 8001b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b08:	0150      	lsls	r0, r2, #5
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4621      	mov	r1, r4
 8001b10:	1a51      	subs	r1, r2, r1
 8001b12:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b14:	4629      	mov	r1, r5
 8001b16:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b28:	4649      	mov	r1, r9
 8001b2a:	018b      	lsls	r3, r1, #6
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b32:	4641      	mov	r1, r8
 8001b34:	018a      	lsls	r2, r1, #6
 8001b36:	4641      	mov	r1, r8
 8001b38:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b56:	4692      	mov	sl, r2
 8001b58:	469b      	mov	fp, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	462b      	mov	r3, r5
 8001b64:	eb4b 0303 	adc.w	r3, fp, r3
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b76:	4629      	mov	r1, r5
 8001b78:	028b      	lsls	r3, r1, #10
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b80:	4621      	mov	r1, r4
 8001b82:	028a      	lsls	r2, r1, #10
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b90:	677a      	str	r2, [r7, #116]	; 0x74
 8001b92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b96:	f7fe fb3d 	bl	8000214 <__aeabi_uldivmod>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bc6:	e0eb      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d06b      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_GetSysClockFreq+0x354>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	2200      	movs	r2, #0
 8001be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bf8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	462b      	mov	r3, r5
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	0159      	lsls	r1, r3, #5
 8001c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0e:	0150      	lsls	r0, r2, #5
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4621      	mov	r1, r4
 8001c16:	1a51      	subs	r1, r2, r1
 8001c18:	61b9      	str	r1, [r7, #24]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c2e:	4659      	mov	r1, fp
 8001c30:	018b      	lsls	r3, r1, #6
 8001c32:	4651      	mov	r1, sl
 8001c34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c38:	4651      	mov	r1, sl
 8001c3a:	018a      	lsls	r2, r1, #6
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c42:	4659      	mov	r1, fp
 8001c44:	eb63 0901 	sbc.w	r9, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	4699      	mov	r9, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	eb18 0303 	adds.w	r3, r8, r3
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	462b      	mov	r3, r5
 8001c6a:	eb49 0303 	adc.w	r3, r9, r3
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	024b      	lsls	r3, r1, #9
 8001c80:	4621      	mov	r1, r4
 8001c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c86:	4621      	mov	r1, r4
 8001c88:	024a      	lsls	r2, r1, #9
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c92:	2200      	movs	r2, #0
 8001c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c9c:	f7fe faba 	bl	8000214 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001caa:	e065      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x420>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb8:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8001cca:	2300      	movs	r3, #0
 8001ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8001cce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cd2:	4642      	mov	r2, r8
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0159      	lsls	r1, r3, #5
 8001ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce4:	0150      	lsls	r0, r2, #5
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4641      	mov	r1, r8
 8001cec:	1a51      	subs	r1, r2, r1
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d04:	4659      	mov	r1, fp
 8001d06:	018b      	lsls	r3, r1, #6
 8001d08:	4651      	mov	r1, sl
 8001d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0e:	4651      	mov	r1, sl
 8001d10:	018a      	lsls	r2, r1, #6
 8001d12:	4651      	mov	r1, sl
 8001d14:	1a54      	subs	r4, r2, r1
 8001d16:	4659      	mov	r1, fp
 8001d18:	eb63 0501 	sbc.w	r5, r3, r1
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	00eb      	lsls	r3, r5, #3
 8001d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2a:	00e2      	lsls	r2, r4, #3
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	4643      	mov	r3, r8
 8001d32:	18e3      	adds	r3, r4, r3
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	464b      	mov	r3, r9
 8001d38:	eb45 0303 	adc.w	r3, r5, r3
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	028b      	lsls	r3, r1, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d54:	4621      	mov	r1, r4
 8001d56:	028a      	lsls	r2, r1, #10
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d60:	2200      	movs	r2, #0
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d64:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d6a:	f7fe fa53 	bl	8000214 <__aeabi_uldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4613      	mov	r3, r2
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0f1b      	lsrs	r3, r3, #28
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d96:	e003      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	37b8      	adds	r7, #184	; 0xb8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	00f42400 	.word	0x00f42400

08001db8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e28d      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8083 	beq.w	8001ede <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dd8:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d019      	beq.n	8001e18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df0:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfc:	d00c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d112      	bne.n	8001e30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	4b84      	ldr	r3, [pc, #528]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d05b      	beq.n	8001edc <HAL_RCC_OscConfig+0x124>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d157      	bne.n	8001edc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e25a      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d106      	bne.n	8001e48 <HAL_RCC_OscConfig+0x90>
 8001e3a:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7b      	ldr	r2, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xcc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xb4>
 8001e52:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xcc>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b6c      	ldr	r3, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6b      	ldr	r2, [pc, #428]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f8c8 	bl	8001020 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff f8c4 	bl	8001020 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e21f      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xdc>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f8b4 	bl	8001020 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f8b0 	bl	8001020 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e20b      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x104>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06f      	beq.n	8001fca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d017      	beq.n	8001f26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef6:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x186>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1d3      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_OscConfig+0x278>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f85d 	bl	8001020 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f859 	bl	8001020 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1b4      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4925      	ldr	r1, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x278>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f83c 	bl	8001020 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f838 	bl	8001020 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e193      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d036      	beq.n	8002044 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x27c>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f81c 	bl	8001020 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff f818 	bl	8001020 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e173      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x234>
 800200a:	e01b      	b.n	8002044 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_OscConfig+0x27c>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7ff f805 	bl	8001020 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	e00e      	b.n	8002038 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff f801 	bl	8001020 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d907      	bls.n	8002038 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e15c      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
 800202c:	40023800 	.word	0x40023800
 8002030:	42470000 	.word	0x42470000
 8002034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ea      	bne.n	800201a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8097 	beq.w	8002180 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b79      	ldr	r3, [pc, #484]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7fe ffc1 	bl	8001020 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7fe ffbd 	bl	8001020 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e118      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x31e>
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0x358>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x340>
 80020de:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0x358>
 80020f8:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a59      	ldr	r2, [pc, #356]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe ff82 	bl	8001020 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe ff7e 	bl	8001020 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0d7      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ee      	beq.n	8002120 <HAL_RCC_OscConfig+0x368>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe ff6c 	bl	8001020 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe ff68 	bl	8001020 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0c1      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ee      	bne.n	800214c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80ad 	beq.w	80022e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d060      	beq.n	8002258 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d145      	bne.n	800222a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe ff3c 	bl	8001020 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe ff38 	bl	8001020 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e093      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	491b      	ldr	r1, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe ff0d 	bl	8001020 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe ff09 	bl	8001020 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e064      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x452>
 8002228:	e05c      	b.n	80022e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fef6 	bl	8001020 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fef2 	bl	8001020 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04d      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x480>
 8002256:	e045      	b.n	80022e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e040      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x538>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d030      	beq.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d129      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d122      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d119      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	3b01      	subs	r3, #1
 80022ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10f      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e03f      	b.n	8002386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fd26 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fddf 	bl	8002efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800236c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af02      	add	r7, sp, #8
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d17c      	bne.n	80024a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_UART_Transmit+0x2c>
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e075      	b.n	80024aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_UART_Transmit+0x3e>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e06e      	b.n	80024aa <HAL_UART_Transmit+0x11c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	; 0x21
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fe1d 	bl	8001020 <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x82>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002420:	e02a      	b.n	8002478 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fb1f 	bl	8002a70 <UART_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e036      	b.n	80024aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3302      	adds	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e007      	b.n	800246a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1cf      	bne.n	8002422 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 faef 	bl	8002a70 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d11d      	bne.n	8002508 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_UART_Receive_IT+0x26>
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e016      	b.n	800250a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_UART_Receive_IT+0x38>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e00f      	b.n	800250a <HAL_UART_Receive_IT+0x58>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb24 	bl	8002b4c <UART_Start_Receive_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	e000      	b.n	800250a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0ba      	sub	sp, #232	; 0xe8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_UART_IRQHandler+0x66>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fc07 	bl	8002d86 <UART_Receive_IT>
      return;
 8002578:	e256      	b.n	8002a28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800257a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80de 	beq.w	8002740 <HAL_UART_IRQHandler+0x22c>
 8002584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002594:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80d1 	beq.w	8002740 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xae>
 80025aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_UART_IRQHandler+0xd2>
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0202 	orr.w	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_UART_IRQHandler+0xf6>
 80025f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d011      	beq.n	800263a <HAL_UART_IRQHandler+0x126>
 8002616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0208 	orr.w	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 81ed 	beq.w	8002a1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_UART_IRQHandler+0x14e>
 8002650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb92 	bl	8002d86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <HAL_UART_IRQHandler+0x17a>
 8002686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04f      	beq.n	800272e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa9a 	bl	8002bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d141      	bne.n	8002726 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026b0:	e853 3f00 	ldrex	r3, [r3]
 80026b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3314      	adds	r3, #20
 80026ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1d9      	bne.n	80026a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	4a7d      	ldr	r2, [pc, #500]	; (80028f0 <HAL_UART_IRQHandler+0x3dc>)
 80026fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fe3d 	bl	8001382 <HAL_DMA_Abort_IT>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002718:	4610      	mov	r0, r2
 800271a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	e00e      	b.n	800273c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f990 	bl	8002a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	e00a      	b.n	800273c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f98c 	bl	8002a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	e006      	b.n	800273c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f988 	bl	8002a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800273a:	e170      	b.n	8002a1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273c:	bf00      	nop
    return;
 800273e:	e16e      	b.n	8002a1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b01      	cmp	r3, #1
 8002746:	f040 814a 	bne.w	80029de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8143 	beq.w	80029de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 813c 	beq.w	80029de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	f040 80b4 	bne.w	80028f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8140 	beq.w	8002a22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027aa:	429a      	cmp	r2, r3
 80027ac:	f080 8139 	bcs.w	8002a22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	f000 8088 	beq.w	80028d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800280a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1d9      	bne.n	80027c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800283a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800283e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e1      	bne.n	8002812 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800285e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800287a:	e841 2300 	strex	r3, r2, [r1]
 800287e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e3      	bne.n	800284e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	f023 0310 	bic.w	r3, r3, #16
 80028aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80028ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e3      	bne.n	8002894 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fce6 	bl	80012a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8b6 	bl	8002a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ec:	e099      	b.n	8002a22 <HAL_UART_IRQHandler+0x50e>
 80028ee:	bf00      	nop
 80028f0:	08002c8f 	.word	0x08002c8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 808b 	beq.w	8002a26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8086 	beq.w	8002a26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800293e:	647a      	str	r2, [r7, #68]	; 0x44
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	623b      	str	r3, [r7, #32]
   return(result);
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3314      	adds	r3, #20
 8002972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002976:	633a      	str	r2, [r7, #48]	; 0x30
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800297c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e3      	bne.n	8002952 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	e853 3f00 	ldrex	r3, [r3]
 80029a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0310 	bic.w	r3, r3, #16
 80029ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029bc:	61fa      	str	r2, [r7, #28]
 80029be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	69b9      	ldr	r1, [r7, #24]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	617b      	str	r3, [r7, #20]
   return(result);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e3      	bne.n	8002998 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f83e 	bl	8002a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029dc:	e023      	b.n	8002a26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_UART_IRQHandler+0x4ea>
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f95d 	bl	8002cb6 <UART_Transmit_IT>
    return;
 80029fc:	e014      	b.n	8002a28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <HAL_UART_IRQHandler+0x514>
 8002a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f99d 	bl	8002d56 <UART_EndTransmit_IT>
    return;
 8002a1c:	e004      	b.n	8002a28 <HAL_UART_IRQHandler+0x514>
    return;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <HAL_UART_IRQHandler+0x514>
      return;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <HAL_UART_IRQHandler+0x514>
      return;
 8002a26:	bf00      	nop
  }
}
 8002a28:	37e8      	adds	r7, #232	; 0xe8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b090      	sub	sp, #64	; 0x40
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a80:	e050      	b.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a88:	d04c      	beq.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a90:	f7fe fac6 	bl	8001020 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d241      	bcs.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac0:	637a      	str	r2, [r7, #52]	; 0x34
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	623a      	str	r2, [r7, #32]
 8002af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	69f9      	ldr	r1, [r7, #28]
 8002afa:	6a3a      	ldr	r2, [r7, #32]
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e5      	bne.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e00f      	b.n	8002b44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d09f      	beq.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3740      	adds	r7, #64	; 0x40
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2222      	movs	r2, #34	; 0x22
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b095      	sub	sp, #84	; 0x54
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf0:	643a      	str	r2, [r7, #64]	; 0x40
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0310 	bic.w	r3, r3, #16
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c60:	61ba      	str	r2, [r7, #24]
 8002c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c82:	bf00      	nop
 8002c84:	3754      	adds	r7, #84	; 0x54
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff fecb 	bl	8002a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b21      	cmp	r3, #33	; 0x21
 8002cc8:	d13e      	bne.n	8002d48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d114      	bne.n	8002cfe <UART_Transmit_IT+0x48>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d110      	bne.n	8002cfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e008      	b.n	8002d10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	1c59      	adds	r1, r3, #1
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6211      	str	r1, [r2, #32]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe5a 	bl	8002a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08c      	sub	sp, #48	; 0x30
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b22      	cmp	r3, #34	; 0x22
 8002d98:	f040 80ab 	bne.w	8002ef2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d117      	bne.n	8002dd6 <UART_Receive_IT+0x50>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d113      	bne.n	8002dd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	1c9a      	adds	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	e026      	b.n	8002e24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d007      	beq.n	8002dfa <UART_Receive_IT+0x74>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <UART_Receive_IT+0x82>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e008      	b.n	8002e1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4619      	mov	r1, r3
 8002e32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d15a      	bne.n	8002eee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d135      	bne.n	8002ee4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f023 0310 	bic.w	r3, r3, #16
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	623a      	str	r2, [r7, #32]
 8002ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	69f9      	ldr	r1, [r7, #28]
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d10a      	bne.n	8002ed6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff fdbb 	bl	8002a58 <HAL_UARTEx_RxEventCallback>
 8002ee2:	e002      	b.n	8002eea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fd fd9f 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e002      	b.n	8002ef4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3730      	adds	r7, #48	; 0x30
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b0c0      	sub	sp, #256	; 0x100
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	68d9      	ldr	r1, [r3, #12]
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	ea40 0301 	orr.w	r3, r0, r1
 8002f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f54:	f021 010c 	bic.w	r1, r1, #12
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f62:	430b      	orrs	r3, r1
 8002f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	6999      	ldr	r1, [r3, #24]
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	ea40 0301 	orr.w	r3, r0, r1
 8002f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <UART_SetConfig+0x2cc>)
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d005      	beq.n	8002f9c <UART_SetConfig+0xa0>
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8d      	ldr	r3, [pc, #564]	; (80031cc <UART_SetConfig+0x2d0>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d104      	bne.n	8002fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7fe fcc8 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fa4:	e003      	b.n	8002fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f7fe fcaf 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002faa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb8:	f040 810c 	bne.w	80031d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	1891      	adds	r1, r2, r2
 8002fd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fd6:	415b      	adcs	r3, r3
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fde:	4621      	mov	r1, r4
 8002fe0:	eb12 0801 	adds.w	r8, r2, r1
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb43 0901 	adc.w	r9, r3, r1
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ffe:	4690      	mov	r8, r2
 8003000:	4699      	mov	r9, r3
 8003002:	4623      	mov	r3, r4
 8003004:	eb18 0303 	adds.w	r3, r8, r3
 8003008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800300c:	462b      	mov	r3, r5
 800300e:	eb49 0303 	adc.w	r3, r9, r3
 8003012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003022:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800302a:	460b      	mov	r3, r1
 800302c:	18db      	adds	r3, r3, r3
 800302e:	653b      	str	r3, [r7, #80]	; 0x50
 8003030:	4613      	mov	r3, r2
 8003032:	eb42 0303 	adc.w	r3, r2, r3
 8003036:	657b      	str	r3, [r7, #84]	; 0x54
 8003038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800303c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003040:	f7fd f8e8 	bl	8000214 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <UART_SetConfig+0x2d4>)
 800304a:	fba3 2302 	umull	r2, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	011c      	lsls	r4, r3, #4
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800305c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003064:	4642      	mov	r2, r8
 8003066:	464b      	mov	r3, r9
 8003068:	1891      	adds	r1, r2, r2
 800306a:	64b9      	str	r1, [r7, #72]	; 0x48
 800306c:	415b      	adcs	r3, r3
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003074:	4641      	mov	r1, r8
 8003076:	eb12 0a01 	adds.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb43 0b01 	adc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800308c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003094:	4692      	mov	sl, r2
 8003096:	469b      	mov	fp, r3
 8003098:	4643      	mov	r3, r8
 800309a:	eb1a 0303 	adds.w	r3, sl, r3
 800309e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a2:	464b      	mov	r3, r9
 80030a4:	eb4b 0303 	adc.w	r3, fp, r3
 80030a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030c0:	460b      	mov	r3, r1
 80030c2:	18db      	adds	r3, r3, r3
 80030c4:	643b      	str	r3, [r7, #64]	; 0x40
 80030c6:	4613      	mov	r3, r2
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
 80030ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030d6:	f7fd f89d 	bl	8000214 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <UART_SetConfig+0x2d4>)
 80030e2:	fba3 2301 	umull	r2, r3, r3, r1
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2264      	movs	r2, #100	; 0x64
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	1acb      	subs	r3, r1, r3
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <UART_SetConfig+0x2d4>)
 80030f8:	fba3 2302 	umull	r2, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003104:	441c      	add	r4, r3
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003110:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	1891      	adds	r1, r2, r2
 800311e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003120:	415b      	adcs	r3, r3
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003128:	4641      	mov	r1, r8
 800312a:	1851      	adds	r1, r2, r1
 800312c:	6339      	str	r1, [r7, #48]	; 0x30
 800312e:	4649      	mov	r1, r9
 8003130:	414b      	adcs	r3, r1
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003140:	4659      	mov	r1, fp
 8003142:	00cb      	lsls	r3, r1, #3
 8003144:	4651      	mov	r1, sl
 8003146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314a:	4651      	mov	r1, sl
 800314c:	00ca      	lsls	r2, r1, #3
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	4603      	mov	r3, r0
 8003154:	4642      	mov	r2, r8
 8003156:	189b      	adds	r3, r3, r2
 8003158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800315c:	464b      	mov	r3, r9
 800315e:	460a      	mov	r2, r1
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003174:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800317c:	460b      	mov	r3, r1
 800317e:	18db      	adds	r3, r3, r3
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	4613      	mov	r3, r2
 8003184:	eb42 0303 	adc.w	r3, r2, r3
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800318e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003192:	f7fd f83f 	bl	8000214 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <UART_SetConfig+0x2d4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <UART_SetConfig+0x2d4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4422      	add	r2, r4
 80031c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031c4:	e105      	b.n	80033d2 <UART_SetConfig+0x4d6>
 80031c6:	bf00      	nop
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40011400 	.word	0x40011400
 80031d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031e6:	4642      	mov	r2, r8
 80031e8:	464b      	mov	r3, r9
 80031ea:	1891      	adds	r1, r2, r2
 80031ec:	6239      	str	r1, [r7, #32]
 80031ee:	415b      	adcs	r3, r3
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031f6:	4641      	mov	r1, r8
 80031f8:	1854      	adds	r4, r2, r1
 80031fa:	4649      	mov	r1, r9
 80031fc:	eb43 0501 	adc.w	r5, r3, r1
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800321c:	464b      	mov	r3, r9
 800321e:	eb45 0303 	adc.w	r3, r5, r3
 8003222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003242:	4629      	mov	r1, r5
 8003244:	008b      	lsls	r3, r1, #2
 8003246:	4621      	mov	r1, r4
 8003248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324c:	4621      	mov	r1, r4
 800324e:	008a      	lsls	r2, r1, #2
 8003250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003254:	f7fc ffde 	bl	8000214 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4b60      	ldr	r3, [pc, #384]	; (80033e0 <UART_SetConfig+0x4e4>)
 800325e:	fba3 2302 	umull	r2, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	011c      	lsls	r4, r3, #4
 8003266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003270:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	61b9      	str	r1, [r7, #24]
 8003280:	415b      	adcs	r3, r3
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003288:	4641      	mov	r1, r8
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6139      	str	r1, [r7, #16]
 800328e:	4649      	mov	r1, r9
 8003290:	414b      	adcs	r3, r1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a0:	4659      	mov	r1, fp
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032aa:	4651      	mov	r1, sl
 80032ac:	00ca      	lsls	r2, r1, #3
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	4642      	mov	r2, r8
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032bc:	464b      	mov	r3, r9
 80032be:	460a      	mov	r2, r1
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032e0:	4649      	mov	r1, r9
 80032e2:	008b      	lsls	r3, r1, #2
 80032e4:	4641      	mov	r1, r8
 80032e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ea:	4641      	mov	r1, r8
 80032ec:	008a      	lsls	r2, r1, #2
 80032ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032f2:	f7fc ff8f 	bl	8000214 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <UART_SetConfig+0x4e4>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <UART_SetConfig+0x4e4>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331a:	441c      	add	r4, r3
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003320:	2200      	movs	r2, #0
 8003322:	673b      	str	r3, [r7, #112]	; 0x70
 8003324:	677a      	str	r2, [r7, #116]	; 0x74
 8003326:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800332a:	4642      	mov	r2, r8
 800332c:	464b      	mov	r3, r9
 800332e:	1891      	adds	r1, r2, r2
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	415b      	adcs	r3, r3
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800333a:	4641      	mov	r1, r8
 800333c:	1851      	adds	r1, r2, r1
 800333e:	6039      	str	r1, [r7, #0]
 8003340:	4649      	mov	r1, r9
 8003342:	414b      	adcs	r3, r1
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003352:	4659      	mov	r1, fp
 8003354:	00cb      	lsls	r3, r1, #3
 8003356:	4651      	mov	r1, sl
 8003358:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335c:	4651      	mov	r1, sl
 800335e:	00ca      	lsls	r2, r1, #3
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	4603      	mov	r3, r0
 8003366:	4642      	mov	r2, r8
 8003368:	189b      	adds	r3, r3, r2
 800336a:	66bb      	str	r3, [r7, #104]	; 0x68
 800336c:	464b      	mov	r3, r9
 800336e:	460a      	mov	r2, r1
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	663b      	str	r3, [r7, #96]	; 0x60
 8003380:	667a      	str	r2, [r7, #100]	; 0x64
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800338e:	4649      	mov	r1, r9
 8003390:	008b      	lsls	r3, r1, #2
 8003392:	4641      	mov	r1, r8
 8003394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003398:	4641      	mov	r1, r8
 800339a:	008a      	lsls	r2, r1, #2
 800339c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033a0:	f7fc ff38 	bl	8000214 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <UART_SetConfig+0x4e4>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2164      	movs	r1, #100	; 0x64
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <UART_SetConfig+0x4e4>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4422      	add	r2, r4
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	bf00      	nop
 80033d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	51eb851f 	.word	0x51eb851f

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	4d0d      	ldr	r5, [pc, #52]	; (800341c <__libc_init_array+0x38>)
 80033e8:	4c0d      	ldr	r4, [pc, #52]	; (8003420 <__libc_init_array+0x3c>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	2600      	movs	r6, #0
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	4d0b      	ldr	r5, [pc, #44]	; (8003424 <__libc_init_array+0x40>)
 80033f6:	4c0c      	ldr	r4, [pc, #48]	; (8003428 <__libc_init_array+0x44>)
 80033f8:	f000 f836 	bl	8003468 <_init>
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	2600      	movs	r6, #0
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	0800358c 	.word	0x0800358c
 8003420:	0800358c 	.word	0x0800358c
 8003424:	0800358c 	.word	0x0800358c
 8003428:	08003590 	.word	0x08003590

0800342c <memset>:
 800342c:	4402      	add	r2, r0
 800342e:	4603      	mov	r3, r0
 8003430:	4293      	cmp	r3, r2
 8003432:	d100      	bne.n	8003436 <memset+0xa>
 8003434:	4770      	bx	lr
 8003436:	f803 1b01 	strb.w	r1, [r3], #1
 800343a:	e7f9      	b.n	8003430 <memset+0x4>

0800343c <strstr>:
 800343c:	780a      	ldrb	r2, [r1, #0]
 800343e:	b570      	push	{r4, r5, r6, lr}
 8003440:	b96a      	cbnz	r2, 800345e <strstr+0x22>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	429a      	cmp	r2, r3
 8003446:	d109      	bne.n	800345c <strstr+0x20>
 8003448:	460c      	mov	r4, r1
 800344a:	4605      	mov	r5, r0
 800344c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f6      	beq.n	8003442 <strstr+0x6>
 8003454:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003458:	429e      	cmp	r6, r3
 800345a:	d0f7      	beq.n	800344c <strstr+0x10>
 800345c:	3001      	adds	r0, #1
 800345e:	7803      	ldrb	r3, [r0, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ef      	bne.n	8003444 <strstr+0x8>
 8003464:	4618      	mov	r0, r3
 8003466:	e7ec      	b.n	8003442 <strstr+0x6>

08003468 <_init>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr

08003474 <_fini>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr
