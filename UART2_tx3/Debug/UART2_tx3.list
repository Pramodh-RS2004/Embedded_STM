
UART2_tx3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004dc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018ca  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000610  00000000  00000000  000218fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00021f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00022118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f829  00000000  00000000  000222c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025fc  00000000  00000000  00041af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2dc9  00000000  00000000  000440ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  00106f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004ac 	.word	0x080004ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004ac 	.word	0x080004ac

08000204 <delayMs>:
}
}

/* 16 MHz SYSCLK */
void delayMs(int n)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 800020c:	e00d      	b.n	800022a <delayMs+0x26>
	for (i = 0; i < 3195; i++) ;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delayMs+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delayMs+0x10>
	for (; n > 0; n--)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcee      	bgt.n	800020e <delayMs+0xa>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <main>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	uart2_init();
 8000244:	f000 f80a 	bl	800025c <uart2_init>
	while(1)
	{
		uart2_write("Deva \r \n");
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <main+0x18>)
 800024a:	f000 f871 	bl	8000330 <uart2_write>
		delayMs(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f7ff ffd8 	bl	8000204 <delayMs>
		uart2_write("Deva \r \n");
 8000254:	e7f8      	b.n	8000248 <main+0x8>
 8000256:	bf00      	nop
 8000258:	080004c4 	.word	0x080004c4

0800025c <uart2_init>:
	return 0;
}


void uart2_init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

	/****************Configure uart gpio pin***************/
		/*Enable clock access to gpioa */
		RCC->AHB1ENR |= GPIOAEN;
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <uart2_init+0x58>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <uart2_init+0x58>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6313      	str	r3, [r2, #48]	; 0x30

		/*Set PA2 mode to alternate function mode*/
		GPIOA->MODER  |= PA2MOD;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <uart2_init+0x5c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <uart2_init+0x5c>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]

		/*Set PA2 alternate function type to UART_TX (AF07)*/
        GPIOA->AFR[0] |= PA2AF;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <uart2_init+0x5c>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <uart2_init+0x5c>)
 800027e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000282:	6213      	str	r3, [r2, #32]

		/****************Configure uart module ***************/
		/*Enable clock access to uart2 */
         RCC->APB1ENR |= APB1EN;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <uart2_init+0x58>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <uart2_init+0x58>)
 800028a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028e:	6413      	str	r3, [r2, #64]	; 0x40

		/*Configure baudrate*/
		uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000294:	4909      	ldr	r1, [pc, #36]	; (80002bc <uart2_init+0x60>)
 8000296:	480a      	ldr	r0, [pc, #40]	; (80002c0 <uart2_init+0x64>)
 8000298:	f000 f814 	bl	80002c4 <uart_set_baudrate>
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		/*Configure the transfer direction*/
		USART2->CR1 = USART2_TX;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <uart2_init+0x64>)
 800029e:	2208      	movs	r2, #8
 80002a0:	60da      	str	r2, [r3, #12]

		/*Enable uart module*/
        USART2->CR1 |= USART2EN;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <uart2_init+0x64>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <uart2_init+0x64>)
 80002a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ac:	60d3      	str	r3, [r2, #12]

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000
 80002bc:	00f42400 	.word	0x00f42400
 80002c0:	40004400 	.word	0x40004400

080002c4 <uart_set_baudrate>:





static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate) {
 80002c4:	b480      	push	{r7}
 80002c6:	b087      	sub	sp, #28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    uint32_t usartdiv = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]

    // Calculate USARTDIV value
    if ((USARTx == USART1) || (USARTx == USART6)) {
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	4a14      	ldr	r2, [pc, #80]	; (8000328 <uart_set_baudrate+0x64>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d003      	beq.n	80002e4 <uart_set_baudrate+0x20>
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <uart_set_baudrate+0x68>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d109      	bne.n	80002f8 <uart_set_baudrate+0x34>
        usartdiv = ((2 * PeriphClk) + (BaudRate / 2)) / BaudRate;
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	005a      	lsls	r2, r3, #1
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	085b      	lsrs	r3, r3, #1
 80002ec:	441a      	add	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	e00d      	b.n	8000314 <uart_set_baudrate+0x50>
    } else {
        // For other USARTs (USART2, USART3, UART4, UART5)
        usartdiv = ((25 * PeriphClk) + (BaudRate / 2)) / (BaudRate * 16);
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	009a      	lsls	r2, r3, #2
 8000302:	441a      	add	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	085b      	lsrs	r3, r3, #1
 8000308:	441a      	add	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	011b      	lsls	r3, r3, #4
 800030e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000312:	617b      	str	r3, [r7, #20]
    }

    // Assign BRR
    USARTx->BRR = usartdiv;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	697a      	ldr	r2, [r7, #20]
 8000318:	609a      	str	r2, [r3, #8]
}
 800031a:	bf00      	nop
 800031c:	371c      	adds	r7, #28
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40011000 	.word	0x40011000
 800032c:	40011400 	.word	0x40011400

08000330 <uart2_write>:




void uart2_write(const char *ch)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	while(*ch !='\0'){
 8000338:	e00d      	b.n	8000356 <uart2_write+0x26>

  /*Write to transmit data register*/

	USART2->DR	=  (*ch & 0xFF);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <uart2_write+0x3c>)
 8000340:	605a      	str	r2, [r3, #4]
	ch++;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000348:	bf00      	nop
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <uart2_write+0x3c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f9      	beq.n	800034a <uart2_write+0x1a>
	while(*ch !='\0'){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1ed      	bne.n	800033a <uart2_write+0xa>

	}



}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40004400 	.word	0x40004400

08000370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <NMI_Handler+0x4>

08000376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <MemManage_Handler+0x4>

08000382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler+0x4>

0800038e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f83e 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SystemInit+0x20>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <SystemInit+0x20>)
 80003d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003ee:	490e      	ldr	r1, [pc, #56]	; (8000428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003f0:	4a0e      	ldr	r2, [pc, #56]	; (800042c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f4:	e002      	b.n	80003fc <LoopCopyDataInit>

080003f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fa:	3304      	adds	r3, #4

080003fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000400:	d3f9      	bcc.n	80003f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000404:	4c0b      	ldr	r4, [pc, #44]	; (8000434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000408:	e001      	b.n	800040e <LoopFillZerobss>

0800040a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800040c:	3204      	adds	r2, #4

0800040e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000410:	d3fb      	bcc.n	800040a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000412:	f7ff ffd7 	bl	80003c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000416:	f000 f825 	bl	8000464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800041a:	f7ff ff11 	bl	8000240 <main>
  bx  lr    
 800041e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800042c:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000430:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000434:	20000024 	.word	0x20000024

08000438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_IncTick+0x20>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_IncTick+0x24>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_IncTick+0x24>)
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000
 8000460:	20000020 	.word	0x20000020

08000464 <__libc_init_array>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4d0d      	ldr	r5, [pc, #52]	; (800049c <__libc_init_array+0x38>)
 8000468:	4c0d      	ldr	r4, [pc, #52]	; (80004a0 <__libc_init_array+0x3c>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	2600      	movs	r6, #0
 8000470:	42a6      	cmp	r6, r4
 8000472:	d109      	bne.n	8000488 <__libc_init_array+0x24>
 8000474:	4d0b      	ldr	r5, [pc, #44]	; (80004a4 <__libc_init_array+0x40>)
 8000476:	4c0c      	ldr	r4, [pc, #48]	; (80004a8 <__libc_init_array+0x44>)
 8000478:	f000 f818 	bl	80004ac <_init>
 800047c:	1b64      	subs	r4, r4, r5
 800047e:	10a4      	asrs	r4, r4, #2
 8000480:	2600      	movs	r6, #0
 8000482:	42a6      	cmp	r6, r4
 8000484:	d105      	bne.n	8000492 <__libc_init_array+0x2e>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	3601      	adds	r6, #1
 8000490:	e7ee      	b.n	8000470 <__libc_init_array+0xc>
 8000492:	f855 3b04 	ldr.w	r3, [r5], #4
 8000496:	4798      	blx	r3
 8000498:	3601      	adds	r6, #1
 800049a:	e7f2      	b.n	8000482 <__libc_init_array+0x1e>
 800049c:	080004d0 	.word	0x080004d0
 80004a0:	080004d0 	.word	0x080004d0
 80004a4:	080004d0 	.word	0x080004d0
 80004a8:	080004d4 	.word	0x080004d4

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
