
Day6_task_BE33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031c4  080031c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  080031d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080031d8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184a  00000000  00000000  000297f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f66  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099a9  00000000  00000000  0004cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8434  00000000  00000000  0005675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eb93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc4  00000000  00000000  0011ebe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030c8 	.word	0x080030c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080030c8 	.word	0x080030c8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	2b00      	cmp	r3, #0
 800052e:	d013      	beq.n	8000558 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000538:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00b      	beq.n	8000558 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000540:	e000      	b.n	8000544 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000542:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800054e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800056c:	f000 fb38 	bl	8000be0 <HAL_Init>
  SystemClock_Config();
 8000570:	f000 f8d2 	bl	8000718 <SystemClock_Config>
  MX_GPIO_Init();
 8000574:	f000 f992 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f966 	bl	8000848 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800057c:	f000 f93a 	bl	80007f4 <MX_USART1_UART_Init>

  /* Start UART receive interrupt */
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);  // Receive one byte at a time
 8000580:	2201      	movs	r2, #1
 8000582:	491e      	ldr	r1, [pc, #120]	; (80005fc <main+0x94>)
 8000584:	481e      	ldr	r0, [pc, #120]	; (8000600 <main+0x98>)
 8000586:	f001 fdda 	bl	800213e <HAL_UART_Receive_IT>

  /* Send AT commands to BLE module */
  sendCommand("CMD?NAME\r\n");
 800058a:	481e      	ldr	r0, [pc, #120]	; (8000604 <main+0x9c>)
 800058c:	f000 f84a 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 8000590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000594:	f000 fb96 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+RESET=0\r\n");
 8000598:	481b      	ldr	r0, [pc, #108]	; (8000608 <main+0xa0>)
 800059a:	f000 f843 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 800059e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a2:	f000 fb8f 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+TXPWR=-4\r\n");
 80005a6:	4819      	ldr	r0, [pc, #100]	; (800060c <main+0xa4>)
 80005a8:	f000 f83c 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b0:	f000 fb88 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <main+0xa8>)
 80005b6:	f000 f835 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 80005ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005be:	f000 fb81 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+SCAN=1\r\n");
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0xac>)
 80005c4:	f000 f82e 	bl	8000624 <sendCommand>
  HAL_Delay(5000);
 80005c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005cc:	f000 fb7a 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+CON=1,fab321a20744\r\n");
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0xb0>)
 80005d2:	f000 f827 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 80005d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005da:	f000 fb73 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+DATA=<conn_handle>,\r\n");
 80005de:	480f      	ldr	r0, [pc, #60]	; (800061c <main+0xb4>)
 80005e0:	f000 f820 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 80005e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e8:	f000 fb6c 	bl	8000cc4 <HAL_Delay>

  sendCommand("CMD+DATA=<conn_handle>,WELCOME to ever one\r\n");
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0xb8>)
 80005ee:	f000 f819 	bl	8000624 <sendCommand>
  HAL_Delay(2000);
 80005f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f6:	f000 fb65 	bl	8000cc4 <HAL_Delay>

  /* Infinite loop */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x92>
 80005fc:	200000b0 	.word	0x200000b0
 8000600:	20000028 	.word	0x20000028
 8000604:	080030e0 	.word	0x080030e0
 8000608:	080030ec 	.word	0x080030ec
 800060c:	080030fc 	.word	0x080030fc
 8000610:	0800310c 	.word	0x0800310c
 8000614:	0800312c 	.word	0x0800312c
 8000618:	0800313c 	.word	0x0800313c
 800061c:	08003158 	.word	0x08003158
 8000620:	08003174 	.word	0x08003174

08000624 <sendCommand>:
  * @brief  Send an AT command via UART.
  * @param  cmd: Pointer to the command string
  * @retval None
  */
void sendCommand(const char *cmd)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fde9 	bl	8000204 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <sendCommand+0x38>)
 800063e:	f001 fcec 	bl	800201a <HAL_UART_Transmit>
    memset(responseBuffer, 0, RX_BUFFER_SIZE); // Clear buffer before receiving new data
 8000642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000646:	2100      	movs	r1, #0
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <sendCommand+0x3c>)
 800064a:	f002 fd35 	bl	80030b8 <memset>
    bufferIndex = 0; // Reset buffer index
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <sendCommand+0x40>)
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	200001dc 	.word	0x200001dc
 8000664:	20000308 	.word	0x20000308

08000668 <HAL_UART_RxCpltCallback>:
  * @brief  UART Receive Complete Callback.
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <HAL_UART_RxCpltCallback+0x9c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d13f      	bne.n	80006fa <HAL_UART_RxCpltCallback+0x92>
        responseBuffer[bufferIndex++] = rxBuffer[0];  // Store received byte
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	b29b      	uxth	r3, r3
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	b291      	uxth	r1, r2
 8000684:	4a20      	ldr	r2, [pc, #128]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 8000686:	8011      	strh	r1, [r2, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 800068c:	7819      	ldrb	r1, [r3, #0]
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 8000690:	5499      	strb	r1, [r3, r2]

        if (rxBuffer[0] == '\n' || bufferIndex >= RX_BUFFER_SIZE - 1) {  // Check for newline or buffer overflow
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b0a      	cmp	r3, #10
 8000698:	d005      	beq.n	80006a6 <HAL_UART_RxCpltCallback+0x3e>
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80006a4:	d924      	bls.n	80006f0 <HAL_UART_RxCpltCallback+0x88>
            responseBuffer[bufferIndex] = '\0';  // Null-terminate the string
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	5499      	strb	r1, [r3, r2]

            // Print buffer value to SWV console
            for (int i = 0; i < bufferIndex; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e00a      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x68>
                ITM_SendChar(responseBuffer[i]);
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff27 	bl	8000518 <ITM_SendChar>
            for (int i = 0; i < bufferIndex; i++) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4293      	cmp	r3, r2
 80006dc:	dbed      	blt.n	80006ba <HAL_UART_RxCpltCallback+0x52>
            }

            bufferIndex = 0;  // Reset buffer index for next response
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	801a      	strh	r2, [r3, #0]
            memset(responseBuffer, 0, RX_BUFFER_SIZE);  // Clear buffer
 80006e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006ec:	f002 fce4 	bl	80030b8 <memset>
        }

        // Re-enable UART receive interrupt for the next byte
        HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	4906      	ldr	r1, [pc, #24]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <HAL_UART_RxCpltCallback+0xac>)
 80006f6:	f001 fd22 	bl	800213e <HAL_UART_Receive_IT>
    }
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40011000 	.word	0x40011000
 8000708:	20000308 	.word	0x20000308
 800070c:	200000b0 	.word	0x200000b0
 8000710:	200001dc 	.word	0x200001dc
 8000714:	20000028 	.word	0x20000028

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fcc6 	bl	80030b8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a29      	ldr	r2, [pc, #164]	; (80007ec <SystemClock_Config+0xd4>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0xd4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <SystemClock_Config+0xd8>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 800078c:	2310      	movs	r3, #16
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000790:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000796:	2304      	movs	r3, #4
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f94c 	bl	8001a44 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9e>
    {
        Error_Handler();
 80007b2:	f000 f8e1 	bl	8000978 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fdec 	bl	80013b0 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xca>
    {
        Error_Handler();
 80007de:	f000 f8cb 	bl	8000978 <Error_Handler>
    }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART1_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 8000820:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000824:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_USART1_UART_Init+0x4c>)
 800082e:	f001 fba7 	bl	8001f80 <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x48>
    {
        Error_Handler();
 8000838:	f000 f89e 	bl	8000978 <Error_Handler>
    }
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000028 	.word	0x20000028
 8000844:	40011000 	.word	0x40011000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f001 fb7e 	bl	8001f80 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800088a:	f000 f875 	bl	8000978 <Error_Handler>
    }
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000006c 	.word	0x2000006c
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a2c      	ldr	r2, [pc, #176]	; (800096c <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a25      	ldr	r2, [pc, #148]	; (800096c <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <MX_GPIO_Init+0xd0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_GPIO_Init+0xd0>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_GPIO_Init+0xd4>)
 8000928:	f000 fd28 	bl	800137c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = B1_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000932:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0xd8>)
 8000944:	f000 fb86 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin;
 8000948:	2320      	movs	r3, #32
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0xd4>)
 8000960:	f000 fb78 	bl	8001054 <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40020800 	.word	0x40020800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
    __disable_irq();
    while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c2:	2007      	movs	r0, #7
 80009c4:	f000 fa72 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a3a      	ldr	r2, [pc, #232]	; (8000adc <HAL_UART_MspInit+0x108>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d135      	bne.n	8000a62 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a2e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a40:	2307      	movs	r3, #7
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <HAL_UART_MspInit+0x110>)
 8000a4c:	f000 fb02 	bl	8001054 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2025      	movs	r0, #37	; 0x25
 8000a56:	f000 fa34 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5a:	2025      	movs	r0, #37	; 0x25
 8000a5c:	f000 fa4d 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a60:	e038      	b.n	8000ad4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <HAL_UART_MspInit+0x114>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d133      	bne.n	8000ad4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x10c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_UART_MspInit+0x110>)
 8000ac0:	f000 fac8 	bl	8001054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f000 f9fa 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 fa13 	bl	8000efa <HAL_NVIC_EnableIRQ>
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40011000 	.word	0x40011000
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40004400 	.word	0x40004400

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8a4 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART1_IRQHandler+0x10>)
 8000b46:	f001 fb2b 	bl	80021a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000028 	.word	0x20000028

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART2_IRQHandler+0x10>)
 8000b5a:	f001 fb21 	bl	80021a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000006c 	.word	0x2000006c

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fa59 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fcd3 	bl	8000568 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	080031cc 	.word	0x080031cc
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000310 	.word	0x20000310

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f94f 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff feb6 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f967 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 f92f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	2000030c 	.word	0x2000030c

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000030c 	.word	0x2000030c

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriorityGrouping>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff3e 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff31 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff feb6 	bl	8000cac <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d008      	beq.n	8000f60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e052      	b.n	8001006 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0216 	bic.w	r2, r2, #22
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <HAL_DMA_Abort+0x62>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0208 	bic.w	r2, r2, #8
 8000f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb0:	e013      	b.n	8000fda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb2:	f7ff fe7b 	bl	8000cac <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d90c      	bls.n	8000fda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e015      	b.n	8001006 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e4      	bne.n	8000fb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	223f      	movs	r2, #63	; 0x3f
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d004      	beq.n	800102c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e00c      	b.n	8001046 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2205      	movs	r2, #5
 8001030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e165      	b.n	800133c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8154 	bne.w	8001336 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ae 	beq.w	8001336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <HAL_GPIO_Init+0x304>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x308>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x30c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x310>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x314>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x318>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x20a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x206>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x320>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x202>
 8001252:	2306      	movs	r3, #6
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001256:	2307      	movs	r3, #7
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x324>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae96 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0cc      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d90c      	bls.n	80013ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800140e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d044      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d119      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d003      	beq.n	800146e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146a:	2b03      	cmp	r3, #3
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e06f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e067      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f023 0203 	bic.w	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4934      	ldr	r1, [pc, #208]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fc04 	bl	8000cac <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e00a      	b.n	80014be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff fc00 	bl	8000cac <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e04f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 020c 	and.w	r2, r3, #12
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1eb      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d20c      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f855 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb64 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00
 800156c:	40023800 	.word	0x40023800
 8001570:	080031a4 	.word	0x080031a4
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_RCC_GetHCLKFreq+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001598:	f7ff fff0 	bl	800157c <HAL_RCC_GetHCLKFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	0a9b      	lsrs	r3, r3, #10
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	4903      	ldr	r1, [pc, #12]	; (80015b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	080031b4 	.word	0x080031b4

080015bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015c0:	f7ff ffdc 	bl	800157c <HAL_RCC_GetHCLKFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	0b5b      	lsrs	r3, r3, #13
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	4903      	ldr	r1, [pc, #12]	; (80015e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	080031b4 	.word	0x080031b4

080015e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e8:	b0ae      	sub	sp, #184	; 0xb8
 80015ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160a:	4bcb      	ldr	r3, [pc, #812]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b0c      	cmp	r3, #12
 8001614:	f200 8206 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x440>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_RCC_GetSysClockFreq+0x3c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001655 	.word	0x08001655
 8001624:	08001a25 	.word	0x08001a25
 8001628:	08001a25 	.word	0x08001a25
 800162c:	08001a25 	.word	0x08001a25
 8001630:	0800165d 	.word	0x0800165d
 8001634:	08001a25 	.word	0x08001a25
 8001638:	08001a25 	.word	0x08001a25
 800163c:	08001a25 	.word	0x08001a25
 8001640:	08001665 	.word	0x08001665
 8001644:	08001a25 	.word	0x08001a25
 8001648:	08001a25 	.word	0x08001a25
 800164c:	08001a25 	.word	0x08001a25
 8001650:	08001855 	.word	0x08001855
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4bb9      	ldr	r3, [pc, #740]	; (800193c <HAL_RCC_GetSysClockFreq+0x358>)
 8001656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800165a:	e1e7      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4bb8      	ldr	r3, [pc, #736]	; (8001940 <HAL_RCC_GetSysClockFreq+0x35c>)
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001662:	e1e3      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4bb4      	ldr	r3, [pc, #720]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001670:	4bb1      	ldr	r3, [pc, #708]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d071      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001688:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800168c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800169e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016a2:	4622      	mov	r2, r4
 80016a4:	462b      	mov	r3, r5
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0159      	lsls	r1, r3, #5
 80016b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b4:	0150      	lsls	r0, r2, #5
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4621      	mov	r1, r4
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	6439      	str	r1, [r7, #64]	; 0x40
 80016c0:	4629      	mov	r1, r5
 80016c2:	eb63 0301 	sbc.w	r3, r3, r1
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016d4:	4649      	mov	r1, r9
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	4641      	mov	r1, r8
 80016da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016de:	4641      	mov	r1, r8
 80016e0:	018a      	lsls	r2, r1, #6
 80016e2:	4641      	mov	r1, r8
 80016e4:	1a51      	subs	r1, r2, r1
 80016e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80016e8:	4649      	mov	r1, r9
 80016ea:	eb63 0301 	sbc.w	r3, r3, r1
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016fc:	4649      	mov	r1, r9
 80016fe:	00cb      	lsls	r3, r1, #3
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001706:	4641      	mov	r1, r8
 8001708:	00ca      	lsls	r2, r1, #3
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	4603      	mov	r3, r0
 8001710:	4622      	mov	r2, r4
 8001712:	189b      	adds	r3, r3, r2
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
 8001716:	462b      	mov	r3, r5
 8001718:	460a      	mov	r2, r1
 800171a:	eb42 0303 	adc.w	r3, r2, r3
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800172c:	4629      	mov	r1, r5
 800172e:	024b      	lsls	r3, r1, #9
 8001730:	4621      	mov	r1, r4
 8001732:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001736:	4621      	mov	r1, r4
 8001738:	024a      	lsls	r2, r1, #9
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001742:	2200      	movs	r2, #0
 8001744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800174c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001750:	f7fe fd60 	bl	8000214 <__aeabi_uldivmod>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4613      	mov	r3, r2
 800175a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800175e:	e067      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800176c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	67bb      	str	r3, [r7, #120]	; 0x78
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4621      	mov	r1, r4
 800179c:	1a51      	subs	r1, r2, r1
 800179e:	62b9      	str	r1, [r7, #40]	; 0x28
 80017a0:	4629      	mov	r1, r5
 80017a2:	eb63 0301 	sbc.w	r3, r3, r1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017b4:	4649      	mov	r1, r9
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	4641      	mov	r1, r8
 80017ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017be:	4641      	mov	r1, r8
 80017c0:	018a      	lsls	r2, r1, #6
 80017c2:	4641      	mov	r1, r8
 80017c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017c8:	4649      	mov	r1, r9
 80017ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017e2:	4692      	mov	sl, r2
 80017e4:	469b      	mov	fp, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	eb1a 0303 	adds.w	r3, sl, r3
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	462b      	mov	r3, r5
 80017f0:	eb4b 0303 	adc.w	r3, fp, r3
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001802:	4629      	mov	r1, r5
 8001804:	028b      	lsls	r3, r1, #10
 8001806:	4621      	mov	r1, r4
 8001808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800180c:	4621      	mov	r1, r4
 800180e:	028a      	lsls	r2, r1, #10
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001818:	2200      	movs	r2, #0
 800181a:	673b      	str	r3, [r7, #112]	; 0x70
 800181c:	677a      	str	r2, [r7, #116]	; 0x74
 800181e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001822:	f7fe fcf7 	bl	8000214 <__aeabi_uldivmod>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4613      	mov	r3, r2
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001852:	e0eb      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06b      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	2200      	movs	r2, #0
 8001874:	66bb      	str	r3, [r7, #104]	; 0x68
 8001876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
 8001880:	2300      	movs	r3, #0
 8001882:	667b      	str	r3, [r7, #100]	; 0x64
 8001884:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	f04f 0000 	mov.w	r0, #0
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	0159      	lsls	r1, r3, #5
 8001896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189a:	0150      	lsls	r0, r2, #5
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4621      	mov	r1, r4
 80018a2:	1a51      	subs	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	eb63 0301 	sbc.w	r3, r3, r1
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ba:	4659      	mov	r1, fp
 80018bc:	018b      	lsls	r3, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c4:	4651      	mov	r1, sl
 80018c6:	018a      	lsls	r2, r1, #6
 80018c8:	4651      	mov	r1, sl
 80018ca:	ebb2 0801 	subs.w	r8, r2, r1
 80018ce:	4659      	mov	r1, fp
 80018d0:	eb63 0901 	sbc.w	r9, r3, r1
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e8:	4690      	mov	r8, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	eb18 0303 	adds.w	r3, r8, r3
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	462b      	mov	r3, r5
 80018f6:	eb49 0303 	adc.w	r3, r9, r3
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001908:	4629      	mov	r1, r5
 800190a:	024b      	lsls	r3, r1, #9
 800190c:	4621      	mov	r1, r4
 800190e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001912:	4621      	mov	r1, r4
 8001914:	024a      	lsls	r2, r1, #9
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191e:	2200      	movs	r2, #0
 8001920:	65bb      	str	r3, [r7, #88]	; 0x58
 8001922:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001924:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001928:	f7fe fc74 	bl	8000214 <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001936:	e065      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x420>
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	4618      	mov	r0, r3
 800194e:	4611      	mov	r1, r2
 8001950:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001954:	653b      	str	r3, [r7, #80]	; 0x50
 8001956:	2300      	movs	r3, #0
 8001958:	657b      	str	r3, [r7, #84]	; 0x54
 800195a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800195e:	4642      	mov	r2, r8
 8001960:	464b      	mov	r3, r9
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4641      	mov	r1, r8
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	4649      	mov	r1, r9
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	1a54      	subs	r4, r2, r1
 80019a2:	4659      	mov	r1, fp
 80019a4:	eb63 0501 	sbc.w	r5, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	00eb      	lsls	r3, r5, #3
 80019b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b6:	00e2      	lsls	r2, r4, #3
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
 80019bc:	4643      	mov	r3, r8
 80019be:	18e3      	adds	r3, r4, r3
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	464b      	mov	r3, r9
 80019c4:	eb45 0303 	adc.w	r3, r5, r3
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d6:	4629      	mov	r1, r5
 80019d8:	028b      	lsls	r3, r1, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e0:	4621      	mov	r1, r4
 80019e2:	028a      	lsls	r2, r1, #10
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ec:	2200      	movs	r2, #0
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80019f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019f6:	f7fe fc0d 	bl	8000214 <__aeabi_uldivmod>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4613      	mov	r3, r2
 8001a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0f1b      	lsrs	r3, r3, #28
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a22:	e003      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	37b8      	adds	r7, #184	; 0xb8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400

08001a44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e28d      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8083 	beq.w	8001b6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a64:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d019      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a70:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a88:	d00c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d112      	bne.n	8001abc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa2:	d10b      	bne.n	8001abc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	4b84      	ldr	r3, [pc, #528]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x124>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d157      	bne.n	8001b68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e25a      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x90>
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7b      	ldr	r2, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xcc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xb4>
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xcc>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6b      	ldr	r2, [pc, #428]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8c8 	bl	8000cac <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f8c4 	bl	8000cac <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e21f      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xdc>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8b4 	bl	8000cac <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8b0 	bl	8000cac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20b      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x104>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06f      	beq.n	8001c56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b82:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x186>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1d3      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff f85d 	bl	8000cac <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f859 	bl	8000cac <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1b4      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f83c 	bl	8000cac <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff f838 	bl	8000cac <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e193      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f81c 	bl	8000cac <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f818 	bl	8000cac <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e173      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x234>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f805 	bl	8000cac <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f801 	bl	8000cac <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d907      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e15c      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470000 	.word	0x42470000
 8001cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ea      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8097 	beq.w	8001e0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b7f      	ldr	r3, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a7e      	ldr	r2, [pc, #504]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ffc1 	bl	8000cac <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7fe ffbd 	bl	8000cac <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e118      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x31e>
 8001d54:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x358>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x340>
 8001d6a:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a60      	ldr	r2, [pc, #384]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x358>
 8001d84:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7fe ff82 	bl	8000cac <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7fe ff7e 	bl	8000cac <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0d7      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ee      	beq.n	8001dac <HAL_RCC_OscConfig+0x368>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ff6c 	bl	8000cac <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ff68 	bl	8000cac <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0c1      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80ad 	beq.w	8001f70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d060      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d145      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ff3c 	bl	8000cac <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ff38 	bl	8000cac <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e093      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	071b      	lsls	r3, r3, #28
 8001e82:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff0d 	bl	8000cac <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe ff09 	bl	8000cac <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e064      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x452>
 8001eb4:	e05c      	b.n	8001f70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fef6 	bl	8000cac <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fef2 	bl	8000cac <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04d      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x480>
 8001ee2:	e045      	b.n	8001f70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e040      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_RCC_OscConfig+0x538>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d030      	beq.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d129      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d122      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d119      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10f      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e03f      	b.n	8002012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd14 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fddf 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08a      	sub	sp, #40	; 0x28
 800201e:	af02      	add	r7, sp, #8
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d17c      	bne.n	8002134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_UART_Transmit+0x2c>
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e075      	b.n	8002136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_UART_Transmit+0x3e>
 8002054:	2302      	movs	r3, #2
 8002056:	e06e      	b.n	8002136 <HAL_UART_Transmit+0x11c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206e:	f7fe fe1d 	bl	8000cac <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x82>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020ac:	e02a      	b.n	8002104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fb1f 	bl	80026fc <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e036      	b.n	8002136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e007      	b.n	80020f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1cf      	bne.n	80020ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 faef 	bl	80026fc <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e006      	b.n	8002136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b20      	cmp	r3, #32
 8002156:	d11d      	bne.n	8002194 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_UART_Receive_IT+0x26>
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e016      	b.n	8002196 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_UART_Receive_IT+0x38>
 8002172:	2302      	movs	r3, #2
 8002174:	e00f      	b.n	8002196 <HAL_UART_Receive_IT+0x58>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	461a      	mov	r2, r3
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fb24 	bl	80027d8 <UART_Start_Receive_IT>
 8002190:	4603      	mov	r3, r0
 8002192:	e000      	b.n	8002196 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0ba      	sub	sp, #232	; 0xe8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_UART_IRQHandler+0x66>
 80021f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fc07 	bl	8002a12 <UART_Receive_IT>
      return;
 8002204:	e256      	b.n	80026b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80de 	beq.w	80023cc <HAL_UART_IRQHandler+0x22c>
 8002210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80d1 	beq.w	80023cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_UART_IRQHandler+0xae>
 8002236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_UART_IRQHandler+0xd2>
 800225a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_UART_IRQHandler+0xf6>
 800227e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d011      	beq.n	80022c6 <HAL_UART_IRQHandler+0x126>
 80022a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0208 	orr.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 81ed 	beq.w	80026aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_UART_IRQHandler+0x14e>
 80022dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fb92 	bl	8002a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_UART_IRQHandler+0x17a>
 8002312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d04f      	beq.n	80023ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa9a 	bl	8002854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d141      	bne.n	80023b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3314      	adds	r3, #20
 8002334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800234c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3314      	adds	r3, #20
 8002356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800235a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800235e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1d9      	bne.n	800232e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	2b00      	cmp	r3, #0
 8002380:	d013      	beq.n	80023aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	4a7d      	ldr	r2, [pc, #500]	; (800257c <HAL_UART_IRQHandler+0x3dc>)
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fe3d 	bl	800100e <HAL_DMA_Abort_IT>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023a4:	4610      	mov	r0, r2
 80023a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	e00e      	b.n	80023c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f990 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e00a      	b.n	80023c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f98c 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	e006      	b.n	80023c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f988 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023c6:	e170      	b.n	80026aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	bf00      	nop
    return;
 80023ca:	e16e      	b.n	80026aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	f040 814a 	bne.w	800266a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8143 	beq.w	800266a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 813c 	beq.w	800266a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	f040 80b4 	bne.w	8002580 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8140 	beq.w	80026ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002436:	429a      	cmp	r2, r3
 8002438:	f080 8139 	bcs.w	80026ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244e:	f000 8088 	beq.w	8002562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002460:	e853 3f00 	ldrex	r3, [r3]
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800247e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800248a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1d9      	bne.n	8002452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a8:	e853 3f00 	ldrex	r3, [r3]
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e1      	bne.n	800249e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800250c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e3      	bne.n	80024da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	e853 3f00 	ldrex	r3, [r3]
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002532:	f023 0310 	bic.w	r3, r3, #16
 8002536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002544:	65ba      	str	r2, [r7, #88]	; 0x58
 8002546:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800254a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e3      	bne.n	8002520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fce6 	bl	8000f2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800256a:	b29b      	uxth	r3, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8b6 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002578:	e099      	b.n	80026ae <HAL_UART_IRQHandler+0x50e>
 800257a:	bf00      	nop
 800257c:	0800291b 	.word	0x0800291b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002588:	b29b      	uxth	r3, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 808b 	beq.w	80026b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800259c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8086 	beq.w	80026b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025ca:	647a      	str	r2, [r7, #68]	; 0x44
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e3      	bne.n	80025a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3314      	adds	r3, #20
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	623b      	str	r3, [r7, #32]
   return(result);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002602:	633a      	str	r2, [r7, #48]	; 0x30
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e3      	bne.n	80025de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	60fb      	str	r3, [r7, #12]
   return(result);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0310 	bic.w	r3, r3, #16
 800263a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002648:	61fa      	str	r2, [r7, #28]
 800264a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	69b9      	ldr	r1, [r7, #24]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	617b      	str	r3, [r7, #20]
   return(result);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e3      	bne.n	8002624 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800265c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f83e 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002668:	e023      	b.n	80026b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_UART_IRQHandler+0x4ea>
 8002676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f95d 	bl	8002942 <UART_Transmit_IT>
    return;
 8002688:	e014      	b.n	80026b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00e      	beq.n	80026b4 <HAL_UART_IRQHandler+0x514>
 8002696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f99d 	bl	80029e2 <UART_EndTransmit_IT>
    return;
 80026a8:	e004      	b.n	80026b4 <HAL_UART_IRQHandler+0x514>
    return;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <HAL_UART_IRQHandler+0x514>
      return;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_UART_IRQHandler+0x514>
      return;
 80026b2:	bf00      	nop
  }
}
 80026b4:	37e8      	adds	r7, #232	; 0xe8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b090      	sub	sp, #64	; 0x40
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270c:	e050      	b.n	80027b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002714:	d04c      	beq.n	80027b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <UART_WaitOnFlagUntilTimeout+0x30>
 800271c:	f7fe fac6 	bl	8000cac <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002728:	429a      	cmp	r2, r3
 800272a:	d241      	bcs.n	80027b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	e853 3f00 	ldrex	r3, [r3]
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800274c:	637a      	str	r2, [r7, #52]	; 0x34
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	613b      	str	r3, [r7, #16]
   return(result);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002780:	623a      	str	r2, [r7, #32]
 8002782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	69f9      	ldr	r1, [r7, #28]
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	61bb      	str	r3, [r7, #24]
   return(result);
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e00f      	b.n	80027d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d09f      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3740      	adds	r7, #64	; 0x40
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2222      	movs	r2, #34	; 0x22
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002824:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002854:	b480      	push	{r7}
 8002856:	b095      	sub	sp, #84	; 0x54
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287c:	643a      	str	r2, [r7, #64]	; 0x40
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3314      	adds	r3, #20
 80028ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d119      	bne.n	8002900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	60bb      	str	r3, [r7, #8]
   return(result);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f023 0310 	bic.w	r3, r3, #16
 80028e2:	647b      	str	r3, [r7, #68]	; 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ec:	61ba      	str	r2, [r7, #24]
 80028ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	613b      	str	r3, [r7, #16]
   return(result);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800290e:	bf00      	nop
 8002910:	3754      	adds	r7, #84	; 0x54
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fecb 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b21      	cmp	r3, #33	; 0x21
 8002954:	d13e      	bne.n	80029d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d114      	bne.n	800298a <UART_Transmit_IT+0x48>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d110      	bne.n	800298a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800297c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	1c9a      	adds	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	621a      	str	r2, [r3, #32]
 8002988:	e008      	b.n	800299c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	1c59      	adds	r1, r3, #1
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6211      	str	r1, [r2, #32]
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4619      	mov	r1, r3
 80029aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fe5a 	bl	80026bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b08c      	sub	sp, #48	; 0x30
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b22      	cmp	r3, #34	; 0x22
 8002a24:	f040 80ab 	bne.w	8002b7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d117      	bne.n	8002a62 <UART_Receive_IT+0x50>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	e026      	b.n	8002ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a74:	d007      	beq.n	8002a86 <UART_Receive_IT+0x74>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <UART_Receive_IT+0x82>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e008      	b.n	8002aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4619      	mov	r1, r3
 8002abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d15a      	bne.n	8002b7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0220 	bic.w	r2, r2, #32
 8002ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d135      	bne.n	8002b70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f023 0310 	bic.w	r3, r3, #16
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	623a      	str	r2, [r7, #32]
 8002b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	69f9      	ldr	r1, [r7, #28]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d10a      	bne.n	8002b62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff fdbb 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
 8002b6e:	e002      	b.n	8002b76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fd fd79 	bl	8000668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e002      	b.n	8002b80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3730      	adds	r7, #48	; 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0c0      	sub	sp, #256	; 0x100
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	68d9      	ldr	r1, [r3, #12]
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	ea40 0301 	orr.w	r3, r0, r1
 8002bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be0:	f021 010c 	bic.w	r1, r1, #12
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	ea40 0301 	orr.w	r3, r0, r1
 8002c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <UART_SetConfig+0x2cc>)
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d005      	beq.n	8002c28 <UART_SetConfig+0xa0>
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d104      	bne.n	8002c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c28:	f7fe fcc8 	bl	80015bc <HAL_RCC_GetPCLK2Freq>
 8002c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c30:	e003      	b.n	8002c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7fe fcaf 	bl	8001594 <HAL_RCC_GetPCLK1Freq>
 8002c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c44:	f040 810c 	bne.w	8002e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	1891      	adds	r1, r2, r2
 8002c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c62:	415b      	adcs	r3, r3
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	eb12 0801 	adds.w	r8, r2, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb43 0901 	adc.w	r9, r3, r1
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	eb18 0303 	adds.w	r3, r8, r3
 8002c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb49 0303 	adc.w	r3, r9, r3
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	18db      	adds	r3, r3, r3
 8002cba:	653b      	str	r3, [r7, #80]	; 0x50
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ccc:	f7fd faa2 	bl	8000214 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	011c      	lsls	r4, r3, #4
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d00:	4641      	mov	r1, r8
 8002d02:	eb12 0a01 	adds.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb43 0b01 	adc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d20:	4692      	mov	sl, r2
 8002d22:	469b      	mov	fp, r3
 8002d24:	4643      	mov	r3, r8
 8002d26:	eb1a 0303 	adds.w	r3, sl, r3
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	eb4b 0303 	adc.w	r3, fp, r3
 8002d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	18db      	adds	r3, r3, r3
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
 8002d52:	4613      	mov	r3, r2
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d62:	f7fd fa57 	bl	8000214 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2264      	movs	r2, #100	; 0x64
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	1acb      	subs	r3, r1, r3
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002d84:	fba3 2302 	umull	r2, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d90:	441c      	add	r4, r3
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dac:	415b      	adcs	r3, r3
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e08:	460b      	mov	r3, r1
 8002e0a:	18db      	adds	r3, r3, r3
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	4613      	mov	r3, r2
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e1e:	f7fd f9f9 	bl	8000214 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 0207 	and.w	r2, r3, #7
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4422      	add	r2, r4
 8002e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e50:	e105      	b.n	800305e <UART_SetConfig+0x4d6>
 8002e52:	bf00      	nop
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e72:	4642      	mov	r2, r8
 8002e74:	464b      	mov	r3, r9
 8002e76:	1891      	adds	r1, r2, r2
 8002e78:	6239      	str	r1, [r7, #32]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e82:	4641      	mov	r1, r8
 8002e84:	1854      	adds	r4, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb43 0501 	adc.w	r5, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	00eb      	lsls	r3, r5, #3
 8002e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4643      	mov	r3, r8
 8002ea2:	18e3      	adds	r3, r4, r3
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	eb45 0303 	adc.w	r3, r5, r3
 8002eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ece:	4629      	mov	r1, r5
 8002ed0:	008b      	lsls	r3, r1, #2
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed8:	4621      	mov	r1, r4
 8002eda:	008a      	lsls	r2, r1, #2
 8002edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ee0:	f7fd f998 	bl	8000214 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b60      	ldr	r3, [pc, #384]	; (800306c <UART_SetConfig+0x4e4>)
 8002eea:	fba3 2302 	umull	r2, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	011c      	lsls	r4, r3, #4
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	61b9      	str	r1, [r7, #24]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f14:	4641      	mov	r1, r8
 8002f16:	1851      	adds	r1, r2, r1
 8002f18:	6139      	str	r1, [r7, #16]
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	414b      	adcs	r3, r1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4651      	mov	r1, sl
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4642      	mov	r2, r8
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f48:	464b      	mov	r3, r9
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	eb42 0303 	adc.w	r3, r2, r3
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	008b      	lsls	r3, r1, #2
 8002f70:	4641      	mov	r1, r8
 8002f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f76:	4641      	mov	r1, r8
 8002f78:	008a      	lsls	r2, r1, #2
 8002f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f7e:	f7fd f949 	bl	8000214 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <UART_SetConfig+0x4e4>)
 8002f88:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2164      	movs	r1, #100	; 0x64
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	3332      	adds	r3, #50	; 0x32
 8002f9a:	4a34      	ldr	r2, [pc, #208]	; (800306c <UART_SetConfig+0x4e4>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	441c      	add	r4, r3
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1851      	adds	r1, r2, r1
 8002fca:	6039      	str	r1, [r7, #0]
 8002fcc:	4649      	mov	r1, r9
 8002fce:	414b      	adcs	r3, r1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fde:	4659      	mov	r1, fp
 8002fe0:	00cb      	lsls	r3, r1, #3
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe8:	4651      	mov	r1, sl
 8002fea:	00ca      	lsls	r2, r1, #3
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	189b      	adds	r3, r3, r2
 8002ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	663b      	str	r3, [r7, #96]	; 0x60
 800300c:	667a      	str	r2, [r7, #100]	; 0x64
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800301a:	4649      	mov	r1, r9
 800301c:	008b      	lsls	r3, r1, #2
 800301e:	4641      	mov	r1, r8
 8003020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003024:	4641      	mov	r1, r8
 8003026:	008a      	lsls	r2, r1, #2
 8003028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800302c:	f7fd f8f2 	bl	8000214 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <UART_SetConfig+0x4e4>)
 8003036:	fba3 1302 	umull	r1, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2164      	movs	r1, #100	; 0x64
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <UART_SetConfig+0x4e4>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4422      	add	r2, r4
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306a:	bf00      	nop
 800306c:	51eb851f 	.word	0x51eb851f

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4d0d      	ldr	r5, [pc, #52]	; (80030a8 <__libc_init_array+0x38>)
 8003074:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	2600      	movs	r6, #0
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	4d0b      	ldr	r5, [pc, #44]	; (80030b0 <__libc_init_array+0x40>)
 8003082:	4c0c      	ldr	r4, [pc, #48]	; (80030b4 <__libc_init_array+0x44>)
 8003084:	f000 f820 	bl	80030c8 <_init>
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	2600      	movs	r6, #0
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f855 3b04 	ldr.w	r3, [r5], #4
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	080031c4 	.word	0x080031c4
 80030ac:	080031c4 	.word	0x080031c4
 80030b0:	080031c4 	.word	0x080031c4
 80030b4:	080031c8 	.word	0x080031c8

080030b8 <memset>:
 80030b8:	4402      	add	r2, r0
 80030ba:	4603      	mov	r3, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
