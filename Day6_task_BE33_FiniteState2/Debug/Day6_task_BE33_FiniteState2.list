
Day6_task_BE33_FiniteState2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003590  08003590  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  080035a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080035a4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001866  00000000  00000000  000298f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f6c  00000000  00000000  0002bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b73  00000000  00000000  0004cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c861e  00000000  00000000  00056a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d1c  00000000  00000000  0011f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800346c 	.word	0x0800346c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800346c 	.word	0x0800346c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	2b00      	cmp	r3, #0
 800052e:	d013      	beq.n	8000558 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000538:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00b      	beq.n	8000558 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000540:	e000      	b.n	8000544 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000542:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800054e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <main>:
void sendCommand(const char *cmd);
void processResponse(void);
int validateResponse(const char *expectedResponse);

/* Private user code ---------------------------------------------------------*/
int main(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_Init();
 800056c:	f000 fcf4 	bl	8000f58 <HAL_Init>
	SystemClock_Config();
 8000570:	f000 faa0 	bl	8000ab4 <SystemClock_Config>
	MX_GPIO_Init();
 8000574:	f000 fb60 	bl	8000c38 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000578:	f000 fb34 	bl	8000be4 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800057c:	f000 fb08 	bl	8000b90 <MX_USART1_UART_Init>

	// Start UART receive interrupt
	HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	49a7      	ldr	r1, [pc, #668]	; (8000820 <main+0x2b8>)
 8000584:	48a7      	ldr	r0, [pc, #668]	; (8000824 <main+0x2bc>)
 8000586:	f001 ff96 	bl	80024b6 <HAL_UART_Receive_IT>

	currentState = STATE_SEND_CMD_NAME; // Start FSM by sending the first command
 800058a:	4ba7      	ldr	r3, [pc, #668]	; (8000828 <main+0x2c0>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]

	while (1) {
		if (rxComplete) {
 8000590:	4ba6      	ldr	r3, [pc, #664]	; (800082c <main+0x2c4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x36>
			processResponse();
 800059a:	f000 f979 	bl	8000890 <processResponse>
		}

		switch (currentState) {
 800059e:	4ba2      	ldr	r3, [pc, #648]	; (8000828 <main+0x2c0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	2b0c      	cmp	r3, #12
 80005a6:	f200 8139 	bhi.w	800081c <main+0x2b4>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <main+0x48>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005e5 	.word	0x080005e5
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	0800063f 	.word	0x0800063f
 80005bc:	08000655 	.word	0x08000655
 80005c0:	08000699 	.word	0x08000699
 80005c4:	080006af 	.word	0x080006af
 80005c8:	080006f3 	.word	0x080006f3
 80005cc:	08000709 	.word	0x08000709
 80005d0:	0800074d 	.word	0x0800074d
 80005d4:	08000763 	.word	0x08000763
 80005d8:	080007a7 	.word	0x080007a7
 80005dc:	080007bd 	.word	0x080007bd
 80005e0:	08000801 	.word	0x08000801
		case STATE_SEND_CMD_NAME:
			sendCommand("CMD?NAME\r\n");
 80005e4:	4892      	ldr	r0, [pc, #584]	; (8000830 <main+0x2c8>)
 80005e6:	f000 f93d 	bl	8000864 <sendCommand>
			HAL_Delay(2000); // Use timers or other non-blocking methods in real applications
 80005ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ee:	f000 fd25 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_NAME;
 80005f2:	4b8d      	ldr	r3, [pc, #564]	; (8000828 <main+0x2c0>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
			break;
 80005f8:	e111      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_NAME:
			if (validateResponse("RSP=0")) {
 80005fa:	488e      	ldr	r0, [pc, #568]	; (8000834 <main+0x2cc>)
 80005fc:	f000 fa02 	bl	8000a04 <validateResponse>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <main+0xac>
				currentState = STATE_SEND_CMD_RESET;
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <main+0x2c0>)
 8000608:	2203      	movs	r2, #3
 800060a:	701a      	strb	r2, [r3, #0]
				commandRetryCount = 0;
 800060c:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <main+0x2d0>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
				} else {
					// Handle retry failure (e.g., log error, alert user)
					currentState = STATE_IDLE;
				}
			}
			break;
 8000612:	e104      	b.n	800081e <main+0x2b6>
				if (commandRetryCount < MAX_RETRY_COUNT) {
 8000614:	4b88      	ldr	r3, [pc, #544]	; (8000838 <main+0x2d0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	dc0c      	bgt.n	8000636 <main+0xce>
					commandRetryCount++;
 800061c:	4b86      	ldr	r3, [pc, #536]	; (8000838 <main+0x2d0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a85      	ldr	r2, [pc, #532]	; (8000838 <main+0x2d0>)
 8000624:	6013      	str	r3, [r2, #0]
					sendCommand("CMD?NAME\r\n");
 8000626:	4882      	ldr	r0, [pc, #520]	; (8000830 <main+0x2c8>)
 8000628:	f000 f91c 	bl	8000864 <sendCommand>
					HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f000 fd04 	bl	800103c <HAL_Delay>
			break;
 8000634:	e0f3      	b.n	800081e <main+0x2b6>
					currentState = STATE_IDLE;
 8000636:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <main+0x2c0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			break;
 800063c:	e0ef      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_RESET:
			sendCommand("CMD+RESET=0\r\n");
 800063e:	487f      	ldr	r0, [pc, #508]	; (800083c <main+0x2d4>)
 8000640:	f000 f910 	bl	8000864 <sendCommand>
			HAL_Delay(2000);
 8000644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000648:	f000 fcf8 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_RESET;
 800064c:	4b76      	ldr	r3, [pc, #472]	; (8000828 <main+0x2c0>)
 800064e:	2204      	movs	r2, #4
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e0e4      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_RESET:
			if (validateResponse("EVT+READY")) {
 8000654:	487a      	ldr	r0, [pc, #488]	; (8000840 <main+0x2d8>)
 8000656:	f000 f9d5 	bl	8000a04 <validateResponse>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <main+0x106>
				currentState = STATE_SEND_CMD_TXPWR;
 8000660:	4b71      	ldr	r3, [pc, #452]	; (8000828 <main+0x2c0>)
 8000662:	2205      	movs	r2, #5
 8000664:	701a      	strb	r2, [r3, #0]
				commandRetryCount = 0;
 8000666:	4b74      	ldr	r3, [pc, #464]	; (8000838 <main+0x2d0>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
				} else {
					// Handle retry failure
					currentState = STATE_IDLE;
				}
			}
			break;
 800066c:	e0d7      	b.n	800081e <main+0x2b6>
				if (commandRetryCount < MAX_RETRY_COUNT) {
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <main+0x2d0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	dc0c      	bgt.n	8000690 <main+0x128>
					commandRetryCount++;
 8000676:	4b70      	ldr	r3, [pc, #448]	; (8000838 <main+0x2d0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <main+0x2d0>)
 800067e:	6013      	str	r3, [r2, #0]
					sendCommand("CMD+RESET=0\r\n");
 8000680:	486e      	ldr	r0, [pc, #440]	; (800083c <main+0x2d4>)
 8000682:	f000 f8ef 	bl	8000864 <sendCommand>
					HAL_Delay(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068a:	f000 fcd7 	bl	800103c <HAL_Delay>
			break;
 800068e:	e0c6      	b.n	800081e <main+0x2b6>
					currentState = STATE_IDLE;
 8000690:	4b65      	ldr	r3, [pc, #404]	; (8000828 <main+0x2c0>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e0c2      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_TXPWR:
			sendCommand("CMD+TXPWR=-4\r\n");
 8000698:	486a      	ldr	r0, [pc, #424]	; (8000844 <main+0x2dc>)
 800069a:	f000 f8e3 	bl	8000864 <sendCommand>
			HAL_Delay(2000);
 800069e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a2:	f000 fccb 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_TXPWR;
 80006a6:	4b60      	ldr	r3, [pc, #384]	; (8000828 <main+0x2c0>)
 80006a8:	2206      	movs	r2, #6
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e0b7      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_TXPWR:
			if (validateResponse("RSP=0")) {
 80006ae:	4861      	ldr	r0, [pc, #388]	; (8000834 <main+0x2cc>)
 80006b0:	f000 f9a8 	bl	8000a04 <validateResponse>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <main+0x160>
				currentState = STATE_SEND_CMD_SCANPARAM;
 80006ba:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <main+0x2c0>)
 80006bc:	2207      	movs	r2, #7
 80006be:	701a      	strb	r2, [r3, #0]
				commandRetryCount = 0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <main+0x2d0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
				} else {
					// Handle retry failure
					currentState = STATE_IDLE;
				}
			}
			break;
 80006c6:	e0aa      	b.n	800081e <main+0x2b6>
				if (commandRetryCount < MAX_RETRY_COUNT) {
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <main+0x2d0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	dc0c      	bgt.n	80006ea <main+0x182>
					commandRetryCount++;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <main+0x2d0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <main+0x2d0>)
 80006d8:	6013      	str	r3, [r2, #0]
					sendCommand("CMD+TXPWR=-4\r\n");
 80006da:	485a      	ldr	r0, [pc, #360]	; (8000844 <main+0x2dc>)
 80006dc:	f000 f8c2 	bl	8000864 <sendCommand>
					HAL_Delay(2000);
 80006e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e4:	f000 fcaa 	bl	800103c <HAL_Delay>
			break;
 80006e8:	e099      	b.n	800081e <main+0x2b6>
					currentState = STATE_IDLE;
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <main+0x2c0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
			break;
 80006f0:	e095      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_SCANPARAM:
			sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 80006f2:	4855      	ldr	r0, [pc, #340]	; (8000848 <main+0x2e0>)
 80006f4:	f000 f8b6 	bl	8000864 <sendCommand>
			HAL_Delay(2000);
 80006f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fc:	f000 fc9e 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_SCANPARAM;
 8000700:	4b49      	ldr	r3, [pc, #292]	; (8000828 <main+0x2c0>)
 8000702:	2208      	movs	r2, #8
 8000704:	701a      	strb	r2, [r3, #0]
			break;
 8000706:	e08a      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_SCANPARAM:
			if (validateResponse("RSP=0")) {
 8000708:	484a      	ldr	r0, [pc, #296]	; (8000834 <main+0x2cc>)
 800070a:	f000 f97b 	bl	8000a04 <validateResponse>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <main+0x1ba>
				currentState = STATE_SEND_CMD_SCAN;
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <main+0x2c0>)
 8000716:	2209      	movs	r2, #9
 8000718:	701a      	strb	r2, [r3, #0]
				commandRetryCount = 0;
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <main+0x2d0>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
				} else {
					// Handle retry failure
					currentState = STATE_IDLE;
				}
			}
			break;
 8000720:	e07d      	b.n	800081e <main+0x2b6>
				if (commandRetryCount < MAX_RETRY_COUNT) {
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <main+0x2d0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	dc0c      	bgt.n	8000744 <main+0x1dc>
					commandRetryCount++;
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <main+0x2d0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a41      	ldr	r2, [pc, #260]	; (8000838 <main+0x2d0>)
 8000732:	6013      	str	r3, [r2, #0]
					sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 8000734:	4844      	ldr	r0, [pc, #272]	; (8000848 <main+0x2e0>)
 8000736:	f000 f895 	bl	8000864 <sendCommand>
					HAL_Delay(2000);
 800073a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800073e:	f000 fc7d 	bl	800103c <HAL_Delay>
			break;
 8000742:	e06c      	b.n	800081e <main+0x2b6>
					currentState = STATE_IDLE;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <main+0x2c0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
			break;
 800074a:	e068      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_SCAN:
			sendCommand("CMD+SCAN=1\r\n");
 800074c:	483f      	ldr	r0, [pc, #252]	; (800084c <main+0x2e4>)
 800074e:	f000 f889 	bl	8000864 <sendCommand>
			HAL_Delay(5000);
 8000752:	f241 3088 	movw	r0, #5000	; 0x1388
 8000756:	f000 fc71 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_SCAN;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <main+0x2c0>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
			break;
 8000760:	e05d      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_SCAN:
                if (validateResponse("EVT+ADVRPT")) {
 8000762:	483b      	ldr	r0, [pc, #236]	; (8000850 <main+0x2e8>)
 8000764:	f000 f94e 	bl	8000a04 <validateResponse>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <main+0x214>
                    // Replace with actual expected scan response
                    currentState = STATE_SEND_CMD_CON;
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <main+0x2c0>)
 8000770:	220b      	movs	r2, #11
 8000772:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <main+0x2d0>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }

			break;
 800077a:	e050      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x2d0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b02      	cmp	r3, #2
 8000782:	dc0c      	bgt.n	800079e <main+0x236>
                        commandRetryCount++;
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x2d0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <main+0x2d0>)
 800078c:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+SCAN=1\r\n");
 800078e:	482f      	ldr	r0, [pc, #188]	; (800084c <main+0x2e4>)
 8000790:	f000 f868 	bl	8000864 <sendCommand>
                        HAL_Delay(5000);
 8000794:	f241 3088 	movw	r0, #5000	; 0x1388
 8000798:	f000 fc50 	bl	800103c <HAL_Delay>
			break;
 800079c:	e03f      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <main+0x2c0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			break;
 80007a4:	e03b      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_CON:
			sendCommand("CMD+CON=1,fab321a20744\r\n");
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <main+0x2ec>)
 80007a8:	f000 f85c 	bl	8000864 <sendCommand>
			HAL_Delay(2000);
 80007ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b0:	f000 fc44 	bl	800103c <HAL_Delay>
			currentState = STATE_WAIT_CMD_CON;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <main+0x2c0>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	701a      	strb	r2, [r3, #0]
			break;
 80007ba:	e030      	b.n	800081e <main+0x2b6>

		case STATE_WAIT_CMD_CON:
                if (validateResponse("EVT+CON")) {
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <main+0x2f0>)
 80007be:	f000 f921 	bl	8000a04 <validateResponse>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <main+0x26e>
                    currentState = STATE_SEND_CMD_DATA;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x2c0>)
 80007ca:	220d      	movs	r2, #13
 80007cc:	701a      	strb	r2, [r3, #0]
                    commandRetryCount = 0;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0x2d0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
                        // Handle retry failure
                        currentState = STATE_IDLE;
                    }
                }

			break;
 80007d4:	e023      	b.n	800081e <main+0x2b6>
                    if (commandRetryCount < MAX_RETRY_COUNT) {
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <main+0x2d0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	dc0c      	bgt.n	80007f8 <main+0x290>
                        commandRetryCount++;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <main+0x2d0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <main+0x2d0>)
 80007e6:	6013      	str	r3, [r2, #0]
                        sendCommand("CMD+CON=1,fab321a20744\r\n");
 80007e8:	481a      	ldr	r0, [pc, #104]	; (8000854 <main+0x2ec>)
 80007ea:	f000 f83b 	bl	8000864 <sendCommand>
                        HAL_Delay(2000);
 80007ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f2:	f000 fc23 	bl	800103c <HAL_Delay>
			break;
 80007f6:	e012      	b.n	800081e <main+0x2b6>
                        currentState = STATE_IDLE;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <main+0x2c0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			break;
 80007fe:	e00e      	b.n	800081e <main+0x2b6>

		case STATE_SEND_CMD_DATA:
			sendCommand("CMD+DATA=<conn_handle>,\r\n");
 8000800:	4816      	ldr	r0, [pc, #88]	; (800085c <main+0x2f4>)
 8000802:	f000 f82f 	bl	8000864 <sendCommand>
			HAL_Delay(2000);
 8000806:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800080a:	f000 fc17 	bl	800103c <HAL_Delay>
			sendCommand("CMD+DATA=<conn_handle>,WELCOME TO EVERY ONE\r\n");
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <main+0x2f8>)
 8000810:	f000 f828 	bl	8000864 <sendCommand>
			currentState = STATE_IDLE;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <main+0x2c0>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
			break;
 800081a:	e000      	b.n	800081e <main+0x2b6>

		case STATE_IDLE:
		default:
			break;
 800081c:	bf00      	nop
		if (rxComplete) {
 800081e:	e6b7      	b.n	8000590 <main+0x28>
 8000820:	200000b4 	.word	0x200000b4
 8000824:	20000028 	.word	0x20000028
 8000828:	200000b0 	.word	0x200000b0
 800082c:	200001e6 	.word	0x200001e6
 8000830:	08003484 	.word	0x08003484
 8000834:	08003490 	.word	0x08003490
 8000838:	200001e8 	.word	0x200001e8
 800083c:	08003498 	.word	0x08003498
 8000840:	080034a8 	.word	0x080034a8
 8000844:	080034b4 	.word	0x080034b4
 8000848:	080034c4 	.word	0x080034c4
 800084c:	080034e4 	.word	0x080034e4
 8000850:	080034f4 	.word	0x080034f4
 8000854:	08003500 	.word	0x08003500
 8000858:	0800351c 	.word	0x0800351c
 800085c:	08003524 	.word	0x08003524
 8000860:	08003540 	.word	0x08003540

08000864 <sendCommand>:
		}
	}
}

void sendCommand(const char *cmd) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), HAL_MAX_DELAY);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fcc9 	bl	8000204 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <sendCommand+0x28>)
 800087e:	f001 fd88 	bl	8002392 <HAL_UART_Transmit>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000028 	.word	0x20000028

08000890 <processResponse>:

void processResponse(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	// Print the entire response buffer to debug
	for (uint16_t i = 0; i < bufferIndex; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	e008      	b.n	80008ae <processResponse+0x1e>
		ITM_SendChar(responseBuffer[i]);
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <processResponse+0x150>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe38 	bl	8000518 <ITM_SendChar>
	for (uint16_t i = 0; i < bufferIndex; i++) {
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3301      	adds	r3, #1
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <processResponse+0x154>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3f0      	bcc.n	800089c <processResponse+0xc>
	}
	ITM_SendChar('\n'); // Newline for clarity
 80008ba:	200a      	movs	r0, #10
 80008bc:	f7ff fe2c 	bl	8000518 <ITM_SendChar>

	// Check and handle different responses based on state
	switch (currentState) {
 80008c0:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <processResponse+0x158>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3b02      	subs	r3, #2
 80008c6:	2b0c      	cmp	r3, #12
 80008c8:	d86e      	bhi.n	80009a8 <processResponse+0x118>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <processResponse+0x40>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	08000905 	.word	0x08000905
 80008d4:	080009a9 	.word	0x080009a9
 80008d8:	08000927 	.word	0x08000927
 80008dc:	080009a9 	.word	0x080009a9
 80008e0:	08000941 	.word	0x08000941
 80008e4:	080009a9 	.word	0x080009a9
 80008e8:	0800095b 	.word	0x0800095b
 80008ec:	080009a9 	.word	0x080009a9
 80008f0:	08000975 	.word	0x08000975
 80008f4:	080009a9 	.word	0x080009a9
 80008f8:	0800098f 	.word	0x0800098f
 80008fc:	080009a9 	.word	0x080009a9
 8000900:	080009a9 	.word	0x080009a9
	case STATE_WAIT_CMD_NAME:
		if (validateResponse("RSP=0")) {
 8000904:	4839      	ldr	r0, [pc, #228]	; (80009ec <processResponse+0x15c>)
 8000906:	f000 f87d 	bl	8000a04 <validateResponse>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <processResponse+0x8e>
			currentState = STATE_SEND_CMD_RESET;
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <processResponse+0x158>)
 8000912:	2203      	movs	r2, #3
 8000914:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <processResponse+0x160>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		} else if (validateResponse("EVT+READY")) {
			// Handle unexpected response if needed
		} else {
			// Retry or handle error
		}
		break;
 800091c:	e04f      	b.n	80009be <processResponse+0x12e>
		} else if (validateResponse("EVT+READY")) {
 800091e:	4835      	ldr	r0, [pc, #212]	; (80009f4 <processResponse+0x164>)
 8000920:	f000 f870 	bl	8000a04 <validateResponse>
		break;
 8000924:	e04b      	b.n	80009be <processResponse+0x12e>

	case STATE_WAIT_CMD_RESET:
		if (validateResponse("EVT+READY")) {
 8000926:	4833      	ldr	r0, [pc, #204]	; (80009f4 <processResponse+0x164>)
 8000928:	f000 f86c 	bl	8000a04 <validateResponse>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d03c      	beq.n	80009ac <processResponse+0x11c>
			currentState = STATE_SEND_CMD_TXPWR;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <processResponse+0x158>)
 8000934:	2205      	movs	r2, #5
 8000936:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <processResponse+0x160>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		} else {
			// Retry or handle error
		}
		break;
 800093e:	e035      	b.n	80009ac <processResponse+0x11c>

	case STATE_WAIT_CMD_TXPWR:
		if (validateResponse("RSP=0")) {
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <processResponse+0x15c>)
 8000942:	f000 f85f 	bl	8000a04 <validateResponse>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d031      	beq.n	80009b0 <processResponse+0x120>
			currentState = STATE_SEND_CMD_SCANPARAM;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <processResponse+0x158>)
 800094e:	2207      	movs	r2, #7
 8000950:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <processResponse+0x160>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
		} else {
			// Retry or handle error
		}
		break;
 8000958:	e02a      	b.n	80009b0 <processResponse+0x120>

	case STATE_WAIT_CMD_SCANPARAM:
		if (validateResponse("RSP=0")) {
 800095a:	4824      	ldr	r0, [pc, #144]	; (80009ec <processResponse+0x15c>)
 800095c:	f000 f852 	bl	8000a04 <validateResponse>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d026      	beq.n	80009b4 <processResponse+0x124>
			currentState = STATE_SEND_CMD_SCAN;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <processResponse+0x158>)
 8000968:	2209      	movs	r2, #9
 800096a:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <processResponse+0x160>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
		} else {
			// Retry or handle error
		}
		break;
 8000972:	e01f      	b.n	80009b4 <processResponse+0x124>

	case STATE_WAIT_CMD_SCAN:
		if (validateResponse("EVT+ADVRPT")) {
 8000974:	4820      	ldr	r0, [pc, #128]	; (80009f8 <processResponse+0x168>)
 8000976:	f000 f845 	bl	8000a04 <validateResponse>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d01b      	beq.n	80009b8 <processResponse+0x128>
			// Replace with actual expected scan response
			currentState = STATE_SEND_CMD_CON;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <processResponse+0x158>)
 8000982:	220b      	movs	r2, #11
 8000984:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <processResponse+0x160>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
		} else {
			// Retry or handle error
		}
		break;
 800098c:	e014      	b.n	80009b8 <processResponse+0x128>

	case STATE_WAIT_CMD_CON:
		if (validateResponse("EVT+CON")) {
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <processResponse+0x16c>)
 8000990:	f000 f838 	bl	8000a04 <validateResponse>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d010      	beq.n	80009bc <processResponse+0x12c>
			currentState = STATE_SEND_CMD_DATA;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <processResponse+0x158>)
 800099c:	220d      	movs	r2, #13
 800099e:	701a      	strb	r2, [r3, #0]
			commandRetryCount = 0;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <processResponse+0x160>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		} else {
			// Retry or handle error
		}
		break;
 80009a6:	e009      	b.n	80009bc <processResponse+0x12c>
	case STATE_WAIT_CMD_DATA:
		// Add handling for CMD+DATA responses if necessary
		break;

	default:
		break;
 80009a8:	bf00      	nop
 80009aa:	e008      	b.n	80009be <processResponse+0x12e>
		break;
 80009ac:	bf00      	nop
 80009ae:	e006      	b.n	80009be <processResponse+0x12e>
		break;
 80009b0:	bf00      	nop
 80009b2:	e004      	b.n	80009be <processResponse+0x12e>
		break;
 80009b4:	bf00      	nop
 80009b6:	e002      	b.n	80009be <processResponse+0x12e>
		break;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <processResponse+0x12e>
		break;
 80009bc:	bf00      	nop
	}

	// Clear buffer and reset index
	bufferIndex = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <processResponse+0x154>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
	memset(responseBuffer, 0, RX_BUFFER_SIZE);
 80009c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <processResponse+0x150>)
 80009cc:	f002 fd30 	bl	8003430 <memset>
	rxComplete = 0;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <processResponse+0x170>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000b8 	.word	0x200000b8
 80009e4:	200001e4 	.word	0x200001e4
 80009e8:	200000b0 	.word	0x200000b0
 80009ec:	08003490 	.word	0x08003490
 80009f0:	200001e8 	.word	0x200001e8
 80009f4:	080034a8 	.word	0x080034a8
 80009f8:	080034f4 	.word	0x080034f4
 80009fc:	0800351c 	.word	0x0800351c
 8000a00:	200001e6 	.word	0x200001e6

08000a04 <validateResponse>:

int validateResponse(const char *expectedResponse) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	// Check if the response buffer contains the expected response
	return strstr((char*) responseBuffer, expectedResponse) != NULL;
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <validateResponse+0x24>)
 8000a10:	f002 fd16 	bl	8003440 <strstr>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000b8 	.word	0x200000b8

08000a2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_UART_RxCpltCallback+0x70>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12a      	bne.n	8000a94 <HAL_UART_RxCpltCallback+0x68>
		if (bufferIndex < RX_BUFFER_SIZE - 1) {
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_RxCpltCallback+0x74>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8000a48:	d80b      	bhi.n	8000a62 <HAL_UART_RxCpltCallback+0x36>
			responseBuffer[bufferIndex++] = rxBuffer[0];
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_RxCpltCallback+0x74>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	b291      	uxth	r1, r2
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_UART_RxCpltCallback+0x74>)
 8000a56:	8011      	strh	r1, [r2, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_UART_RxCpltCallback+0x78>)
 8000a5c:	7819      	ldrb	r1, [r3, #0]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_RxCpltCallback+0x7c>)
 8000a60:	5499      	strb	r1, [r3, r2]
		}

		if (rxBuffer[0] == '\n' || bufferIndex >= RX_BUFFER_SIZE - 1) {
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_UART_RxCpltCallback+0x78>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d005      	beq.n	8000a76 <HAL_UART_RxCpltCallback+0x4a>
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_UART_RxCpltCallback+0x74>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8000a74:	d909      	bls.n	8000a8a <HAL_UART_RxCpltCallback+0x5e>
			responseBuffer[bufferIndex] = '\0';
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_UART_RxCpltCallback+0x74>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_UART_RxCpltCallback+0x7c>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	5499      	strb	r1, [r3, r2]
			rxComplete = 1;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_UART_RxCpltCallback+0x80>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <HAL_UART_RxCpltCallback+0x78>)
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <HAL_UART_RxCpltCallback+0x84>)
 8000a90:	f001 fd11 	bl	80024b6 <HAL_UART_Receive_IT>
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	200001e4 	.word	0x200001e4
 8000aa4:	200000b4 	.word	0x200000b4
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	200001e6 	.word	0x200001e6
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fcb4 	bl	8003430 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SystemClock_Config+0xd4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <SystemClock_Config+0xd4>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <SystemClock_Config+0xd4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <SystemClock_Config+0xd8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <SystemClock_Config+0xd8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <SystemClock_Config+0xd8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b30:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f93a 	bl	8001dbc <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x9e>
		Error_Handler();
 8000b4e:	f000 f8e1 	bl	8000d14 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2302      	movs	r3, #2
 8000b58:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fdda 	bl	8001728 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xca>
		Error_Handler();
 8000b7a:	f000 f8cb 	bl	8000d14 <Error_Handler>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART1_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bc0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bca:	f001 fb95 	bl	80022f8 <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART1_UART_Init+0x48>
		Error_Handler();
 8000bd4:	f000 f89e 	bl	8000d14 <Error_Handler>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000028 	.word	0x20000028
 8000be0:	40011000 	.word	0x40011000

08000be4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f001 fb6c 	bl	80022f8 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000c26:	f000 f875 	bl	8000d14 <Error_Handler>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000006c 	.word	0x2000006c
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <MX_GPIO_Init+0xd4>)
 8000cc4:	f000 fd16 	bl	80016f4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = B1_Pin;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0xd8>)
 8000ce0:	f000 fb74 	bl	80013cc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LD2_Pin;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0xd4>)
 8000cfc:	f000 fb66 	bl	80013cc <HAL_GPIO_Init>
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020800 	.word	0x40020800

08000d14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
	__disable_irq();
	while (1) {
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fa60 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <HAL_UART_MspInit+0xf8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d135      	bne.n	8000dfe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dca:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4822      	ldr	r0, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000de8:	f000 faf0 	bl	80013cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2025      	movs	r0, #37	; 0x25
 8000df2:	f000 fa22 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df6:	2025      	movs	r0, #37	; 0x25
 8000df8:	f000 fa3b 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfc:	e030      	b.n	8000e60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0x104>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d12b      	bne.n	8000e60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e40:	230c      	movs	r3, #12
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e50:	2307      	movs	r3, #7
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000e5c:	f000 fab6 	bl	80013cc <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40004400 	.word	0x40004400

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f89a 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART1_IRQHandler+0x10>)
 8000ed2:	f001 fb21 	bl	8002518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000028 	.word	0x20000028

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f20:	4c0b      	ldr	r4, [pc, #44]	; (8000f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2e:	f7ff ffd7 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f002 fa59 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fb17 	bl	8000568 <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f48:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f50:	200001f0 	.word	0x200001f0

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f94f 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fec8 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f967 	bl	800128e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f92f 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	200001ec 	.word	0x200001ec

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200001ec 	.word	0x200001ec

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff3e 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff31 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff feb6 	bl	8001024 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d008      	beq.n	80012d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e052      	b.n	800137e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0216 	bic.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HAL_DMA_Abort+0x62>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0208 	bic.w	r2, r2, #8
 8001316:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001328:	e013      	b.n	8001352 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132a:	f7ff fe7b 	bl	8001024 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b05      	cmp	r3, #5
 8001336:	d90c      	bls.n	8001352 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e015      	b.n	800137e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e4      	bne.n	800132a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	223f      	movs	r2, #63	; 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d004      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e00c      	b.n	80013be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2205      	movs	r2, #5
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e165      	b.n	80016b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8154 	bne.w	80016ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ae 	beq.w	80016ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_GPIO_Init+0x300>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_GPIO_Init+0x308>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <HAL_GPIO_Init+0x310>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x314>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <HAL_GPIO_Init+0x318>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x202>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_GPIO_Init+0x324>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae96 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fc04 	bl	8001024 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fc00 	bl	8001024 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f855 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb64 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08003570 	.word	0x08003570
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_GetHCLKFreq+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff0 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0a9b      	lsrs	r3, r3, #10
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	08003580 	.word	0x08003580

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffdc 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	08003580 	.word	0x08003580

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	b0ae      	sub	sp, #184	; 0xb8
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001982:	4bcb      	ldr	r3, [pc, #812]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b0c      	cmp	r3, #12
 800198c:	f200 8206 	bhi.w	8001d9c <HAL_RCC_GetSysClockFreq+0x440>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019cd 	.word	0x080019cd
 800199c:	08001d9d 	.word	0x08001d9d
 80019a0:	08001d9d 	.word	0x08001d9d
 80019a4:	08001d9d 	.word	0x08001d9d
 80019a8:	080019d5 	.word	0x080019d5
 80019ac:	08001d9d 	.word	0x08001d9d
 80019b0:	08001d9d 	.word	0x08001d9d
 80019b4:	08001d9d 	.word	0x08001d9d
 80019b8:	080019dd 	.word	0x080019dd
 80019bc:	08001d9d 	.word	0x08001d9d
 80019c0:	08001d9d 	.word	0x08001d9d
 80019c4:	08001d9d 	.word	0x08001d9d
 80019c8:	08001bcd 	.word	0x08001bcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4bb9      	ldr	r3, [pc, #740]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019d2:	e1e7      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4bb8      	ldr	r3, [pc, #736]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019da:	e1e3      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4bb4      	ldr	r3, [pc, #720]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	4bb1      	ldr	r3, [pc, #708]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d071      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4bae      	ldr	r3, [pc, #696]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	0159      	lsls	r1, r3, #5
 8001a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2c:	0150      	lsls	r0, r2, #5
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4621      	mov	r1, r4
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	6439      	str	r1, [r7, #64]	; 0x40
 8001a38:	4629      	mov	r1, r5
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	018b      	lsls	r3, r1, #6
 8001a50:	4641      	mov	r1, r8
 8001a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a56:	4641      	mov	r1, r8
 8001a58:	018a      	lsls	r2, r1, #6
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a60:	4649      	mov	r1, r9
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a74:	4649      	mov	r1, r9
 8001a76:	00cb      	lsls	r3, r1, #3
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a7e:	4641      	mov	r1, r8
 8001a80:	00ca      	lsls	r2, r1, #3
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	4622      	mov	r2, r4
 8001a8a:	189b      	adds	r3, r3, r2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	462b      	mov	r3, r5
 8001a90:	460a      	mov	r2, r1
 8001a92:	eb42 0303 	adc.w	r3, r2, r3
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	024b      	lsls	r3, r1, #9
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aae:	4621      	mov	r1, r4
 8001ab0:	024a      	lsls	r2, r1, #9
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ac0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac8:	f7fe fba4 	bl	8000214 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ad6:	e067      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ae4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001af2:	2300      	movs	r3, #0
 8001af4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	f04f 0000 	mov.w	r0, #0
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	0159      	lsls	r1, r3, #5
 8001b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0c:	0150      	lsls	r0, r2, #5
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4621      	mov	r1, r4
 8001b14:	1a51      	subs	r1, r2, r1
 8001b16:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b18:	4629      	mov	r1, r5
 8001b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	018b      	lsls	r3, r1, #6
 8001b30:	4641      	mov	r1, r8
 8001b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b36:	4641      	mov	r1, r8
 8001b38:	018a      	lsls	r2, r1, #6
 8001b3a:	4641      	mov	r1, r8
 8001b3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b5a:	4692      	mov	sl, r2
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	eb1a 0303 	adds.w	r3, sl, r3
 8001b64:	623b      	str	r3, [r7, #32]
 8001b66:	462b      	mov	r3, r5
 8001b68:	eb4b 0303 	adc.w	r3, fp, r3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b90:	2200      	movs	r2, #0
 8001b92:	673b      	str	r3, [r7, #112]	; 0x70
 8001b94:	677a      	str	r2, [r7, #116]	; 0x74
 8001b96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b9a:	f7fe fb3b 	bl	8000214 <__aeabi_uldivmod>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bca:	e0eb      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d06b      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8001bfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c00:	4622      	mov	r2, r4
 8001c02:	462b      	mov	r3, r5
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4621      	mov	r1, r4
 8001c1a:	1a51      	subs	r1, r2, r1
 8001c1c:	61b9      	str	r1, [r7, #24]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	eb63 0301 	sbc.w	r3, r3, r1
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c32:	4659      	mov	r1, fp
 8001c34:	018b      	lsls	r3, r1, #6
 8001c36:	4651      	mov	r1, sl
 8001c38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	018a      	lsls	r2, r1, #6
 8001c40:	4651      	mov	r1, sl
 8001c42:	ebb2 0801 	subs.w	r8, r2, r1
 8001c46:	4659      	mov	r1, fp
 8001c48:	eb63 0901 	sbc.w	r9, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	4623      	mov	r3, r4
 8001c66:	eb18 0303 	adds.w	r3, r8, r3
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	eb49 0303 	adc.w	r3, r9, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c80:	4629      	mov	r1, r5
 8001c82:	024b      	lsls	r3, r1, #9
 8001c84:	4621      	mov	r1, r4
 8001c86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	024a      	lsls	r2, r1, #9
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c96:	2200      	movs	r2, #0
 8001c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ca0:	f7fe fab8 	bl	8000214 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cae:	e065      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x420>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8001cce:	2300      	movs	r3, #0
 8001cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8001cd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	464b      	mov	r3, r9
 8001cda:	f04f 0000 	mov.w	r0, #0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	0159      	lsls	r1, r3, #5
 8001ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce8:	0150      	lsls	r0, r2, #5
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4641      	mov	r1, r8
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d08:	4659      	mov	r1, fp
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d12:	4651      	mov	r1, sl
 8001d14:	018a      	lsls	r2, r1, #6
 8001d16:	4651      	mov	r1, sl
 8001d18:	1a54      	subs	r4, r2, r1
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	eb63 0501 	sbc.w	r5, r3, r1
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	00eb      	lsls	r3, r5, #3
 8001d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2e:	00e2      	lsls	r2, r4, #3
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d64:	2200      	movs	r2, #0
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d6e:	f7fe fa51 	bl	8000214 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4613      	mov	r3, r2
 8001d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0f1b      	lsrs	r3, r3, #28
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d9a:	e003      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001da2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	37b8      	adds	r7, #184	; 0xb8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400

08001dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e28d      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8083 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ddc:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d019      	beq.n	8001e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de8:	4b91      	ldr	r3, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df4:	4b8e      	ldr	r3, [pc, #568]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b84      	ldr	r3, [pc, #528]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x124>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e25a      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x90>
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xcc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xb4>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xcc>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f8c8 	bl	8001024 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f8c4 	bl	8001024 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e21f      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xdc>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f8b4 	bl	8001024 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f8b0 	bl	8001024 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e20b      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x104>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06f      	beq.n	8001fce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d017      	beq.n	8001f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1d3      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f85d 	bl	8001024 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f859 	bl	8001024 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1b4      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4925      	ldr	r1, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f83c 	bl	8001024 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff f838 	bl	8001024 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e193      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d036      	beq.n	8002048 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f81c 	bl	8001024 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff f818 	bl	8001024 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e173      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x234>
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f805 	bl	8001024 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00e      	b.n	800203c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff f801 	bl	8001024 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d907      	bls.n	800203c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e15c      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
 8002030:	40023800 	.word	0x40023800
 8002034:	42470000 	.word	0x42470000
 8002038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ea      	bne.n	800201e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8097 	beq.w	8002184 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a7e      	ldr	r2, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b7c      	ldr	r3, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b79      	ldr	r3, [pc, #484]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a75      	ldr	r2, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe ffc1 	bl	8001024 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe ffbd 	bl	8001024 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e118      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x31e>
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x358>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x340>
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x358>
 80020fc:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe ff82 	bl	8001024 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe ff7e 	bl	8001024 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0d7      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCC_OscConfig+0x368>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe ff6c 	bl	8001024 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe ff68 	bl	8001024 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0c1      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80ad 	beq.w	80022e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	d060      	beq.n	800225c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d145      	bne.n	800222e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff3c 	bl	8001024 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe ff38 	bl	8001024 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e093      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	071b      	lsls	r3, r3, #28
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe ff0d 	bl	8001024 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe ff09 	bl	8001024 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e064      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x452>
 800222c:	e05c      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fef6 	bl	8001024 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fef2 	bl	8001024 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04d      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x480>
 800225a:	e045      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e040      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x538>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d030      	beq.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d129      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d122      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d119      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03f      	b.n	800238a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fd26 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fddf 	bl	8002f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d17c      	bne.n	80024ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_UART_Transmit+0x2c>
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e075      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x3e>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e06e      	b.n	80024ae <HAL_UART_Transmit+0x11c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fe1d 	bl	8001024 <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002400:	d108      	bne.n	8002414 <HAL_UART_Transmit+0x82>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e003      	b.n	800241c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002424:	e02a      	b.n	800247c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb1f 	bl	8002a74 <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e036      	b.n	80024ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3302      	adds	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e007      	b.n	800246e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1cf      	bne.n	8002426 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 faef 	bl	8002a74 <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d11d      	bne.n	800250c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_UART_Receive_IT+0x26>
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Receive_IT+0x38>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e00f      	b.n	800250e <HAL_UART_Receive_IT+0x58>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	461a      	mov	r2, r3
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fb24 	bl	8002b50 <UART_Start_Receive_IT>
 8002508:	4603      	mov	r3, r0
 800250a:	e000      	b.n	800250e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ba      	sub	sp, #232	; 0xe8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
 800256a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fc07 	bl	8002d8a <UART_Receive_IT>
      return;
 800257c:	e256      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800257e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80de 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
 8002588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80d1 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
 80025ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
 80025d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
 80025f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81ed 	beq.w	8002a22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
 8002654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fb92 	bl	8002d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_UART_IRQHandler+0x17a>
 800268a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04f      	beq.n	8002732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa9a 	bl	8002bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d141      	bne.n	800272a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3314      	adds	r3, #20
 80026ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d9      	bne.n	80026a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_UART_IRQHandler+0x3dc>)
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe3d 	bl	8001386 <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	e00e      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f990 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	e00a      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f98c 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	e006      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f988 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800273e:	e170      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	bf00      	nop
    return;
 8002742:	e16e      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 814a 	bne.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8143 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 813c 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	f040 80b4 	bne.w	80028f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800279c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8140 	beq.w	8002a26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f080 8139 	bcs.w	8002a26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	f000 8088 	beq.w	80028da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1d9      	bne.n	80027ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800283e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e1      	bne.n	8002816 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800287c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e3      	bne.n	8002852 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e3      	bne.n	8002898 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fce6 	bl	80012a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8b6 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f0:	e099      	b.n	8002a26 <HAL_UART_IRQHandler+0x50e>
 80028f2:	bf00      	nop
 80028f4:	08002c93 	.word	0x08002c93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002900:	b29b      	uxth	r3, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 808b 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8086 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002942:	647a      	str	r2, [r7, #68]	; 0x44
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e3      	bne.n	800291e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800297a:	633a      	str	r2, [r7, #48]	; 0x30
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e3      	bne.n	8002956 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0310 	bic.w	r3, r3, #16
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	617b      	str	r3, [r7, #20]
   return(result);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e3      	bne.n	800299c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f83e 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029e0:	e023      	b.n	8002a2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f95d 	bl	8002cba <UART_Transmit_IT>
    return;
 8002a00:	e014      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
 8002a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f99d 	bl	8002d5a <UART_EndTransmit_IT>
    return;
 8002a20:	e004      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    return;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a2a:	bf00      	nop
  }
}
 8002a2c:	37e8      	adds	r7, #232	; 0xe8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop

08002a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b090      	sub	sp, #64	; 0x40
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a84:	e050      	b.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8c:	d04c      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a94:	f7fe fac6 	bl	8001024 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d241      	bcs.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac4:	637a      	str	r2, [r7, #52]	; 0x34
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	623a      	str	r2, [r7, #32]
 8002afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	69f9      	ldr	r1, [r7, #28]
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e00f      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d09f      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3740      	adds	r7, #64	; 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2222      	movs	r2, #34	; 0x22
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b095      	sub	sp, #84	; 0x54
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d119      	bne.n	8002c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f023 0310 	bic.w	r3, r3, #16
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c64:	61ba      	str	r2, [r7, #24]
 8002c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6979      	ldr	r1, [r7, #20]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	613b      	str	r3, [r7, #16]
   return(result);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c86:	bf00      	nop
 8002c88:	3754      	adds	r7, #84	; 0x54
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fecb 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b21      	cmp	r3, #33	; 0x21
 8002ccc:	d13e      	bne.n	8002d4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d114      	bne.n	8002d02 <UART_Transmit_IT+0x48>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d110      	bne.n	8002d02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	1c9a      	adds	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]
 8002d00:	e008      	b.n	8002d14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6211      	str	r1, [r2, #32]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10f      	bne.n	8002d48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fe5a 	bl	8002a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08c      	sub	sp, #48	; 0x30
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b22      	cmp	r3, #34	; 0x22
 8002d9c:	f040 80ab 	bne.w	8002ef6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d117      	bne.n	8002dda <UART_Receive_IT+0x50>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d113      	bne.n	8002dda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd8:	e026      	b.n	8002e28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d007      	beq.n	8002dfe <UART_Receive_IT+0x74>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <UART_Receive_IT+0x82>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e008      	b.n	8002e1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4619      	mov	r1, r3
 8002e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d15a      	bne.n	8002ef2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0220 	bic.w	r2, r2, #32
 8002e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d135      	bne.n	8002ee8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	613b      	str	r3, [r7, #16]
   return(result);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f023 0310 	bic.w	r3, r3, #16
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	330c      	adds	r3, #12
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea2:	623a      	str	r2, [r7, #32]
 8002ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	69f9      	ldr	r1, [r7, #28]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e5      	bne.n	8002e82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d10a      	bne.n	8002eda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fdbb 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
 8002ee6:	e002      	b.n	8002eee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fd9f 	bl	8000a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e002      	b.n	8002ef8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3730      	adds	r7, #48	; 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b0c0      	sub	sp, #256	; 0x100
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	68d9      	ldr	r1, [r3, #12]
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	ea40 0301 	orr.w	r3, r0, r1
 8002f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f58:	f021 010c 	bic.w	r1, r1, #12
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f66:	430b      	orrs	r3, r1
 8002f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	6999      	ldr	r1, [r3, #24]
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	ea40 0301 	orr.w	r3, r0, r1
 8002f86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b8f      	ldr	r3, [pc, #572]	; (80031cc <UART_SetConfig+0x2cc>)
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d005      	beq.n	8002fa0 <UART_SetConfig+0xa0>
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <UART_SetConfig+0x2d0>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d104      	bne.n	8002faa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa0:	f7fe fcc8 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8002fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fa8:	e003      	b.n	8002fb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002faa:	f7fe fcaf 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8002fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbc:	f040 810c 	bne.w	80031d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	1891      	adds	r1, r2, r2
 8002fd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fda:	415b      	adcs	r3, r3
 8002fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	eb12 0801 	adds.w	r8, r2, r1
 8002fe8:	4629      	mov	r1, r5
 8002fea:	eb43 0901 	adc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003010:	462b      	mov	r3, r5
 8003012:	eb49 0303 	adc.w	r3, r9, r3
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800302a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800302e:	460b      	mov	r3, r1
 8003030:	18db      	adds	r3, r3, r3
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
 8003034:	4613      	mov	r3, r2
 8003036:	eb42 0303 	adc.w	r3, r2, r3
 800303a:	657b      	str	r3, [r7, #84]	; 0x54
 800303c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003040:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003044:	f7fd f8e6 	bl	8000214 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <UART_SetConfig+0x2d4>)
 800304e:	fba3 2302 	umull	r2, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	011c      	lsls	r4, r3, #4
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003060:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003064:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003070:	415b      	adcs	r3, r3
 8003072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003078:	4641      	mov	r1, r8
 800307a:	eb12 0a01 	adds.w	sl, r2, r1
 800307e:	4649      	mov	r1, r9
 8003080:	eb43 0b01 	adc.w	fp, r3, r1
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003090:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003098:	4692      	mov	sl, r2
 800309a:	469b      	mov	fp, r3
 800309c:	4643      	mov	r3, r8
 800309e:	eb1a 0303 	adds.w	r3, sl, r3
 80030a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a6:	464b      	mov	r3, r9
 80030a8:	eb4b 0303 	adc.w	r3, fp, r3
 80030ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030c4:	460b      	mov	r3, r1
 80030c6:	18db      	adds	r3, r3, r3
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
 80030ca:	4613      	mov	r3, r2
 80030cc:	eb42 0303 	adc.w	r3, r2, r3
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
 80030d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030da:	f7fd f89b 	bl	8000214 <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <UART_SetConfig+0x2d4>)
 80030e6:	fba3 2301 	umull	r2, r3, r3, r1
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2264      	movs	r2, #100	; 0x64
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	1acb      	subs	r3, r1, r3
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <UART_SetConfig+0x2d4>)
 80030fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003108:	441c      	add	r4, r3
 800310a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310e:	2200      	movs	r2, #0
 8003110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003114:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003118:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	1891      	adds	r1, r2, r2
 8003122:	63b9      	str	r1, [r7, #56]	; 0x38
 8003124:	415b      	adcs	r3, r3
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800312c:	4641      	mov	r1, r8
 800312e:	1851      	adds	r1, r2, r1
 8003130:	6339      	str	r1, [r7, #48]	; 0x30
 8003132:	4649      	mov	r1, r9
 8003134:	414b      	adcs	r3, r1
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003144:	4659      	mov	r1, fp
 8003146:	00cb      	lsls	r3, r1, #3
 8003148:	4651      	mov	r1, sl
 800314a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314e:	4651      	mov	r1, sl
 8003150:	00ca      	lsls	r2, r1, #3
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	4603      	mov	r3, r0
 8003158:	4642      	mov	r2, r8
 800315a:	189b      	adds	r3, r3, r2
 800315c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003160:	464b      	mov	r3, r9
 8003162:	460a      	mov	r2, r1
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003178:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800317c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003180:	460b      	mov	r3, r1
 8003182:	18db      	adds	r3, r3, r3
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
 8003186:	4613      	mov	r3, r2
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003192:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003196:	f7fd f83d 	bl	8000214 <__aeabi_uldivmod>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <UART_SetConfig+0x2d4>)
 80031a0:	fba3 1302 	umull	r1, r3, r3, r2
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	2164      	movs	r1, #100	; 0x64
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	3332      	adds	r3, #50	; 0x32
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <UART_SetConfig+0x2d4>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	f003 0207 	and.w	r2, r3, #7
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4422      	add	r2, r4
 80031c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031c8:	e105      	b.n	80033d6 <UART_SetConfig+0x4d6>
 80031ca:	bf00      	nop
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40011400 	.word	0x40011400
 80031d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ea:	4642      	mov	r2, r8
 80031ec:	464b      	mov	r3, r9
 80031ee:	1891      	adds	r1, r2, r2
 80031f0:	6239      	str	r1, [r7, #32]
 80031f2:	415b      	adcs	r3, r3
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031fa:	4641      	mov	r1, r8
 80031fc:	1854      	adds	r4, r2, r1
 80031fe:	4649      	mov	r1, r9
 8003200:	eb43 0501 	adc.w	r5, r3, r1
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003220:	464b      	mov	r3, r9
 8003222:	eb45 0303 	adc.w	r3, r5, r3
 8003226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003246:	4629      	mov	r1, r5
 8003248:	008b      	lsls	r3, r1, #2
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003250:	4621      	mov	r1, r4
 8003252:	008a      	lsls	r2, r1, #2
 8003254:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003258:	f7fc ffdc 	bl	8000214 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <UART_SetConfig+0x4e4>)
 8003262:	fba3 2302 	umull	r2, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	011c      	lsls	r4, r3, #4
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003274:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003278:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	1891      	adds	r1, r2, r2
 8003282:	61b9      	str	r1, [r7, #24]
 8003284:	415b      	adcs	r3, r3
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	4641      	mov	r1, r8
 800328e:	1851      	adds	r1, r2, r1
 8003290:	6139      	str	r1, [r7, #16]
 8003292:	4649      	mov	r1, r9
 8003294:	414b      	adcs	r3, r1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a4:	4659      	mov	r1, fp
 80032a6:	00cb      	lsls	r3, r1, #3
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ae:	4651      	mov	r1, sl
 80032b0:	00ca      	lsls	r2, r1, #3
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	4642      	mov	r2, r8
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c0:	464b      	mov	r3, r9
 80032c2:	460a      	mov	r2, r1
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032e4:	4649      	mov	r1, r9
 80032e6:	008b      	lsls	r3, r1, #2
 80032e8:	4641      	mov	r1, r8
 80032ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ee:	4641      	mov	r1, r8
 80032f0:	008a      	lsls	r2, r1, #2
 80032f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032f6:	f7fc ff8d 	bl	8000214 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <UART_SetConfig+0x4e4>)
 8003300:	fba3 1302 	umull	r1, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	2164      	movs	r1, #100	; 0x64
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	3332      	adds	r3, #50	; 0x32
 8003312:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <UART_SetConfig+0x4e4>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	441c      	add	r4, r3
 8003320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003324:	2200      	movs	r2, #0
 8003326:	673b      	str	r3, [r7, #112]	; 0x70
 8003328:	677a      	str	r2, [r7, #116]	; 0x74
 800332a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800332e:	4642      	mov	r2, r8
 8003330:	464b      	mov	r3, r9
 8003332:	1891      	adds	r1, r2, r2
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	415b      	adcs	r3, r3
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800333e:	4641      	mov	r1, r8
 8003340:	1851      	adds	r1, r2, r1
 8003342:	6039      	str	r1, [r7, #0]
 8003344:	4649      	mov	r1, r9
 8003346:	414b      	adcs	r3, r1
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003356:	4659      	mov	r1, fp
 8003358:	00cb      	lsls	r3, r1, #3
 800335a:	4651      	mov	r1, sl
 800335c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003360:	4651      	mov	r1, sl
 8003362:	00ca      	lsls	r2, r1, #3
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	4603      	mov	r3, r0
 800336a:	4642      	mov	r2, r8
 800336c:	189b      	adds	r3, r3, r2
 800336e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003370:	464b      	mov	r3, r9
 8003372:	460a      	mov	r2, r1
 8003374:	eb42 0303 	adc.w	r3, r2, r3
 8003378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	663b      	str	r3, [r7, #96]	; 0x60
 8003384:	667a      	str	r2, [r7, #100]	; 0x64
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003392:	4649      	mov	r1, r9
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	4641      	mov	r1, r8
 8003398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339c:	4641      	mov	r1, r8
 800339e:	008a      	lsls	r2, r1, #2
 80033a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033a4:	f7fc ff36 	bl	8000214 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <UART_SetConfig+0x4e4>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <UART_SetConfig+0x4e4>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4422      	add	r2, r4
 80033d4:	609a      	str	r2, [r3, #8]
}
 80033d6:	bf00      	nop
 80033d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e2:	bf00      	nop
 80033e4:	51eb851f 	.word	0x51eb851f

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4d0d      	ldr	r5, [pc, #52]	; (8003420 <__libc_init_array+0x38>)
 80033ec:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033ee:	1b64      	subs	r4, r4, r5
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	2600      	movs	r6, #0
 80033f4:	42a6      	cmp	r6, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	4d0b      	ldr	r5, [pc, #44]	; (8003428 <__libc_init_array+0x40>)
 80033fa:	4c0c      	ldr	r4, [pc, #48]	; (800342c <__libc_init_array+0x44>)
 80033fc:	f000 f836 	bl	800346c <_init>
 8003400:	1b64      	subs	r4, r4, r5
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	2600      	movs	r6, #0
 8003406:	42a6      	cmp	r6, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003410:	4798      	blx	r3
 8003412:	3601      	adds	r6, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f855 3b04 	ldr.w	r3, [r5], #4
 800341a:	4798      	blx	r3
 800341c:	3601      	adds	r6, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	08003590 	.word	0x08003590
 8003424:	08003590 	.word	0x08003590
 8003428:	08003590 	.word	0x08003590
 800342c:	08003594 	.word	0x08003594

08003430 <memset>:
 8003430:	4402      	add	r2, r0
 8003432:	4603      	mov	r3, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <strstr>:
 8003440:	780a      	ldrb	r2, [r1, #0]
 8003442:	b570      	push	{r4, r5, r6, lr}
 8003444:	b96a      	cbnz	r2, 8003462 <strstr+0x22>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	429a      	cmp	r2, r3
 800344a:	d109      	bne.n	8003460 <strstr+0x20>
 800344c:	460c      	mov	r4, r1
 800344e:	4605      	mov	r5, r0
 8003450:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f6      	beq.n	8003446 <strstr+0x6>
 8003458:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800345c:	429e      	cmp	r6, r3
 800345e:	d0f7      	beq.n	8003450 <strstr+0x10>
 8003460:	3001      	adds	r0, #1
 8003462:	7803      	ldrb	r3, [r0, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ef      	bne.n	8003448 <strstr+0x8>
 8003468:	4618      	mov	r0, r3
 800346a:	e7ec      	b.n	8003446 <strstr+0x6>

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
