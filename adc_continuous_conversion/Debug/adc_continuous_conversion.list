
adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001744  08001744  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001744  08001744  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001744  08001744  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800174c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080017b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080017b4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002345  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000094e  00000000  00000000  000223dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00022d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000280  00000000  00000000  00023038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021564  00000000  00000000  000232b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b11  00000000  00000000  0004481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8387  00000000  00000000  0004832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001106b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001174  00000000  00000000  00110704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800167c 	.word	0x0800167c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800167c 	.word	0x0800167c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_CONT		(1U<<1)



void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin ***/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |=(1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]
	/***Configure the ADC module***/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_AD0N;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_converstion>:


void start_converstion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |= CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <start_converstion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <start_converstion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]
	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <start_converstion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <start_converstion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <adc_read>:



uint32_t adc_read(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8000344:	bf00      	nop
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <adc_read+0x20>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <adc_read+0x6>

	/*Read converted result*/
	return (ADC1->DR);
 8000352:	4b03      	ldr	r3, [pc, #12]	; (8000360 <adc_read+0x20>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000

08000364 <main>:


uint32_t sensor_value;

int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0




	uart2_tx_init();
 8000368:	f000 f900 	bl	800056c <uart2_tx_init>
	pa1_adc_init();
 800036c:	f7ff ffa0 	bl	80002b0 <pa1_adc_init>
	start_converstion();
 8000370:	f7ff ffd0 	bl	8000314 <start_converstion>

	while(1)
	{

		sensor_value =  adc_read();
 8000374:	f7ff ffe4 	bl	8000340 <adc_read>
 8000378:	4603      	mov	r3, r0
 800037a:	4a04      	ldr	r2, [pc, #16]	; (800038c <main+0x28>)
 800037c:	6013      	str	r3, [r2, #0]
		printf("Sensor value : %d \n\r",(int)sensor_value);
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <main+0x28>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <main+0x2c>)
 8000386:	f000 f9eb 	bl	8000760 <iprintf>
		sensor_value =  adc_read();
 800038a:	e7f3      	b.n	8000374 <main+0x10>
 800038c:	20000084 	.word	0x20000084
 8000390:	08001694 	.word	0x08001694

08000394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <NMI_Handler+0x4>

0800039a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <HardFault_Handler+0x4>

080003a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <MemManage_Handler+0x4>

080003a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <BusFault_Handler+0x4>

080003ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <UsageFault_Handler+0x4>

080003b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e0:	f000 f978 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e00a      	b.n	8000410 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003fa:	f3af 8000 	nop.w
 80003fe:	4601      	mov	r1, r0
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	b2ca      	uxtb	r2, r1
 8000408:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	3301      	adds	r3, #1
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	697a      	ldr	r2, [r7, #20]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	429a      	cmp	r2, r3
 8000416:	dbf0      	blt.n	80003fa <_read+0x12>
	}

return len;
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e009      	b.n	8000448 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	60ba      	str	r2, [r7, #8]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f889 	bl	8000554 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	429a      	cmp	r2, r3
 800044e:	dbf1      	blt.n	8000434 <_write+0x12>
	}
	return len;
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <_close>:

int _close(int file)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
	return -1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000482:	605a      	str	r2, [r3, #4]
	return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <_isatty>:

int _isatty(int file)
{
 8000492:	b480      	push	{r7}
 8000494:	b083      	sub	sp, #12
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
	return 1;
 800049a:	2301      	movs	r3, #1
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
	return 0;
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <_sbrk+0x5c>)
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_sbrk+0x60>)
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <_sbrk+0x64>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <_sbrk+0x68>)
 80004e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d207      	bcs.n	8000504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f4:	f000 f902 	bl	80006fc <__errno>
 80004f8:	4603      	mov	r3, r0
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000502:	e009      	b.n	8000518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <_sbrk+0x64>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <_sbrk+0x64>)
 8000514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20020000 	.word	0x20020000
 8000524:	00000400 	.word	0x00000400
 8000528:	20000088 	.word	0x20000088
 800052c:	200000a0 	.word	0x200000a0

08000530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SystemInit+0x20>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <SystemInit+0x20>)
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__io_putchar>:

void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f851 	bl	8000604 <uart2_write>
	return ch;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <uart2_tx_init>:


}

void uart2_tx_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <uart2_tx_init+0x88>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <uart2_tx_init+0x88>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <uart2_tx_init+0x8c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <uart2_tx_init+0x8c>)
 8000582:	f023 0310 	bic.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <uart2_tx_init+0x8c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <uart2_tx_init+0x8c>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <uart2_tx_init+0x8c>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <uart2_tx_init+0x8c>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <uart2_tx_init+0x8c>)
 80005a2:	6a1b      	ldr	r3, [r3, #32]
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <uart2_tx_init+0x8c>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <uart2_tx_init+0x8c>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <uart2_tx_init+0x8c>)
 80005b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <uart2_tx_init+0x8c>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <uart2_tx_init+0x8c>)
 80005be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005c2:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <uart2_tx_init+0x88>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <uart2_tx_init+0x88>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	4909      	ldr	r1, [pc, #36]	; (80005fc <uart2_tx_init+0x90>)
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <uart2_tx_init+0x94>)
 80005d8:	f000 f82c 	bl	8000634 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  CR1_TE;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <uart2_tx_init+0x94>)
 80005de:	2208      	movs	r2, #8
 80005e0:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <uart2_tx_init+0x94>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a06      	ldr	r2, [pc, #24]	; (8000600 <uart2_tx_init+0x94>)
 80005e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ec:	60d3      	str	r3, [r2, #12]


}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020000 	.word	0x40020000
 80005fc:	00f42400 	.word	0x00f42400
 8000600:	40004400 	.word	0x40004400

08000604 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800060c:	bf00      	nop
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <uart2_write+0x2c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <uart2_write+0x2c>)
 800061e:	b2db      	uxtb	r3, r3
 8000620:	6053      	str	r3, [r2, #4]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40004400 	.word	0x40004400

08000634 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	68b8      	ldr	r0, [r7, #8]
 8000644:	f000 f808 	bl	8000658 <compute_uart_bd>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	609a      	str	r2, [r3, #8]
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	085a      	lsrs	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	441a      	add	r2, r3
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	b29b      	uxth	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000686:	490e      	ldr	r1, [pc, #56]	; (80006c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800069c:	4c0b      	ldr	r4, [pc, #44]	; (80006cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006aa:	f7ff ff41 	bl	8000530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f000 f82b 	bl	8000708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006b2:	f7ff fe57 	bl	8000364 <main>
  bx  lr    
 80006b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c4:	0800174c 	.word	0x0800174c
  ldr r2, =_sbss
 80006c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006cc:	200000a0 	.word	0x200000a0

080006d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC_IRQHandler>
	...

080006d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x20>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_IncTick+0x24>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_IncTick+0x24>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000
 80006f8:	2000008c 	.word	0x2000008c

080006fc <__errno>:
 80006fc:	4b01      	ldr	r3, [pc, #4]	; (8000704 <__errno+0x8>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000004 	.word	0x20000004

08000708 <__libc_init_array>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	4d0d      	ldr	r5, [pc, #52]	; (8000740 <__libc_init_array+0x38>)
 800070c:	4c0d      	ldr	r4, [pc, #52]	; (8000744 <__libc_init_array+0x3c>)
 800070e:	1b64      	subs	r4, r4, r5
 8000710:	10a4      	asrs	r4, r4, #2
 8000712:	2600      	movs	r6, #0
 8000714:	42a6      	cmp	r6, r4
 8000716:	d109      	bne.n	800072c <__libc_init_array+0x24>
 8000718:	4d0b      	ldr	r5, [pc, #44]	; (8000748 <__libc_init_array+0x40>)
 800071a:	4c0c      	ldr	r4, [pc, #48]	; (800074c <__libc_init_array+0x44>)
 800071c:	f000 ffae 	bl	800167c <_init>
 8000720:	1b64      	subs	r4, r4, r5
 8000722:	10a4      	asrs	r4, r4, #2
 8000724:	2600      	movs	r6, #0
 8000726:	42a6      	cmp	r6, r4
 8000728:	d105      	bne.n	8000736 <__libc_init_array+0x2e>
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000730:	4798      	blx	r3
 8000732:	3601      	adds	r6, #1
 8000734:	e7ee      	b.n	8000714 <__libc_init_array+0xc>
 8000736:	f855 3b04 	ldr.w	r3, [r5], #4
 800073a:	4798      	blx	r3
 800073c:	3601      	adds	r6, #1
 800073e:	e7f2      	b.n	8000726 <__libc_init_array+0x1e>
 8000740:	08001744 	.word	0x08001744
 8000744:	08001744 	.word	0x08001744
 8000748:	08001744 	.word	0x08001744
 800074c:	08001748 	.word	0x08001748

08000750 <memset>:
 8000750:	4402      	add	r2, r0
 8000752:	4603      	mov	r3, r0
 8000754:	4293      	cmp	r3, r2
 8000756:	d100      	bne.n	800075a <memset+0xa>
 8000758:	4770      	bx	lr
 800075a:	f803 1b01 	strb.w	r1, [r3], #1
 800075e:	e7f9      	b.n	8000754 <memset+0x4>

08000760 <iprintf>:
 8000760:	b40f      	push	{r0, r1, r2, r3}
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <iprintf+0x2c>)
 8000764:	b513      	push	{r0, r1, r4, lr}
 8000766:	681c      	ldr	r4, [r3, #0]
 8000768:	b124      	cbz	r4, 8000774 <iprintf+0x14>
 800076a:	69a3      	ldr	r3, [r4, #24]
 800076c:	b913      	cbnz	r3, 8000774 <iprintf+0x14>
 800076e:	4620      	mov	r0, r4
 8000770:	f000 f866 	bl	8000840 <__sinit>
 8000774:	ab05      	add	r3, sp, #20
 8000776:	9a04      	ldr	r2, [sp, #16]
 8000778:	68a1      	ldr	r1, [r4, #8]
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4620      	mov	r0, r4
 800077e:	f000 f9bd 	bl	8000afc <_vfiprintf_r>
 8000782:	b002      	add	sp, #8
 8000784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000788:	b004      	add	sp, #16
 800078a:	4770      	bx	lr
 800078c:	20000004 	.word	0x20000004

08000790 <std>:
 8000790:	2300      	movs	r3, #0
 8000792:	b510      	push	{r4, lr}
 8000794:	4604      	mov	r4, r0
 8000796:	e9c0 3300 	strd	r3, r3, [r0]
 800079a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800079e:	6083      	str	r3, [r0, #8]
 80007a0:	8181      	strh	r1, [r0, #12]
 80007a2:	6643      	str	r3, [r0, #100]	; 0x64
 80007a4:	81c2      	strh	r2, [r0, #14]
 80007a6:	6183      	str	r3, [r0, #24]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2208      	movs	r2, #8
 80007ac:	305c      	adds	r0, #92	; 0x5c
 80007ae:	f7ff ffcf 	bl	8000750 <memset>
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <std+0x38>)
 80007b4:	6263      	str	r3, [r4, #36]	; 0x24
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <std+0x3c>)
 80007b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <std+0x40>)
 80007bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <std+0x44>)
 80007c0:	6224      	str	r4, [r4, #32]
 80007c2:	6323      	str	r3, [r4, #48]	; 0x30
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	080010a5 	.word	0x080010a5
 80007cc:	080010c7 	.word	0x080010c7
 80007d0:	080010ff 	.word	0x080010ff
 80007d4:	08001123 	.word	0x08001123

080007d8 <_cleanup_r>:
 80007d8:	4901      	ldr	r1, [pc, #4]	; (80007e0 <_cleanup_r+0x8>)
 80007da:	f000 b8af 	b.w	800093c <_fwalk_reent>
 80007de:	bf00      	nop
 80007e0:	080013fd 	.word	0x080013fd

080007e4 <__sfmoreglue>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	2268      	movs	r2, #104	; 0x68
 80007e8:	1e4d      	subs	r5, r1, #1
 80007ea:	4355      	muls	r5, r2
 80007ec:	460e      	mov	r6, r1
 80007ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007f2:	f000 f8e5 	bl	80009c0 <_malloc_r>
 80007f6:	4604      	mov	r4, r0
 80007f8:	b140      	cbz	r0, 800080c <__sfmoreglue+0x28>
 80007fa:	2100      	movs	r1, #0
 80007fc:	e9c0 1600 	strd	r1, r6, [r0]
 8000800:	300c      	adds	r0, #12
 8000802:	60a0      	str	r0, [r4, #8]
 8000804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000808:	f7ff ffa2 	bl	8000750 <memset>
 800080c:	4620      	mov	r0, r4
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__sfp_lock_acquire>:
 8000810:	4801      	ldr	r0, [pc, #4]	; (8000818 <__sfp_lock_acquire+0x8>)
 8000812:	f000 b8b3 	b.w	800097c <__retarget_lock_acquire_recursive>
 8000816:	bf00      	nop
 8000818:	20000091 	.word	0x20000091

0800081c <__sfp_lock_release>:
 800081c:	4801      	ldr	r0, [pc, #4]	; (8000824 <__sfp_lock_release+0x8>)
 800081e:	f000 b8ae 	b.w	800097e <__retarget_lock_release_recursive>
 8000822:	bf00      	nop
 8000824:	20000091 	.word	0x20000091

08000828 <__sinit_lock_acquire>:
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <__sinit_lock_acquire+0x8>)
 800082a:	f000 b8a7 	b.w	800097c <__retarget_lock_acquire_recursive>
 800082e:	bf00      	nop
 8000830:	20000092 	.word	0x20000092

08000834 <__sinit_lock_release>:
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <__sinit_lock_release+0x8>)
 8000836:	f000 b8a2 	b.w	800097e <__retarget_lock_release_recursive>
 800083a:	bf00      	nop
 800083c:	20000092 	.word	0x20000092

08000840 <__sinit>:
 8000840:	b510      	push	{r4, lr}
 8000842:	4604      	mov	r4, r0
 8000844:	f7ff fff0 	bl	8000828 <__sinit_lock_acquire>
 8000848:	69a3      	ldr	r3, [r4, #24]
 800084a:	b11b      	cbz	r3, 8000854 <__sinit+0x14>
 800084c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000850:	f7ff bff0 	b.w	8000834 <__sinit_lock_release>
 8000854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000858:	6523      	str	r3, [r4, #80]	; 0x50
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <__sinit+0x68>)
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <__sinit+0x6c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	62a2      	str	r2, [r4, #40]	; 0x28
 8000862:	42a3      	cmp	r3, r4
 8000864:	bf04      	itt	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	61a3      	streq	r3, [r4, #24]
 800086a:	4620      	mov	r0, r4
 800086c:	f000 f820 	bl	80008b0 <__sfp>
 8000870:	6060      	str	r0, [r4, #4]
 8000872:	4620      	mov	r0, r4
 8000874:	f000 f81c 	bl	80008b0 <__sfp>
 8000878:	60a0      	str	r0, [r4, #8]
 800087a:	4620      	mov	r0, r4
 800087c:	f000 f818 	bl	80008b0 <__sfp>
 8000880:	2200      	movs	r2, #0
 8000882:	60e0      	str	r0, [r4, #12]
 8000884:	2104      	movs	r1, #4
 8000886:	6860      	ldr	r0, [r4, #4]
 8000888:	f7ff ff82 	bl	8000790 <std>
 800088c:	68a0      	ldr	r0, [r4, #8]
 800088e:	2201      	movs	r2, #1
 8000890:	2109      	movs	r1, #9
 8000892:	f7ff ff7d 	bl	8000790 <std>
 8000896:	68e0      	ldr	r0, [r4, #12]
 8000898:	2202      	movs	r2, #2
 800089a:	2112      	movs	r1, #18
 800089c:	f7ff ff78 	bl	8000790 <std>
 80008a0:	2301      	movs	r3, #1
 80008a2:	61a3      	str	r3, [r4, #24]
 80008a4:	e7d2      	b.n	800084c <__sinit+0xc>
 80008a6:	bf00      	nop
 80008a8:	080016ac 	.word	0x080016ac
 80008ac:	080007d9 	.word	0x080007d9

080008b0 <__sfp>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	4607      	mov	r7, r0
 80008b4:	f7ff ffac 	bl	8000810 <__sfp_lock_acquire>
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <__sfp+0x84>)
 80008ba:	681e      	ldr	r6, [r3, #0]
 80008bc:	69b3      	ldr	r3, [r6, #24]
 80008be:	b913      	cbnz	r3, 80008c6 <__sfp+0x16>
 80008c0:	4630      	mov	r0, r6
 80008c2:	f7ff ffbd 	bl	8000840 <__sinit>
 80008c6:	3648      	adds	r6, #72	; 0x48
 80008c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	d503      	bpl.n	80008d8 <__sfp+0x28>
 80008d0:	6833      	ldr	r3, [r6, #0]
 80008d2:	b30b      	cbz	r3, 8000918 <__sfp+0x68>
 80008d4:	6836      	ldr	r6, [r6, #0]
 80008d6:	e7f7      	b.n	80008c8 <__sfp+0x18>
 80008d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008dc:	b9d5      	cbnz	r5, 8000914 <__sfp+0x64>
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <__sfp+0x88>)
 80008e0:	60e3      	str	r3, [r4, #12]
 80008e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008e6:	6665      	str	r5, [r4, #100]	; 0x64
 80008e8:	f000 f847 	bl	800097a <__retarget_lock_init_recursive>
 80008ec:	f7ff ff96 	bl	800081c <__sfp_lock_release>
 80008f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008f8:	6025      	str	r5, [r4, #0]
 80008fa:	61a5      	str	r5, [r4, #24]
 80008fc:	2208      	movs	r2, #8
 80008fe:	4629      	mov	r1, r5
 8000900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000904:	f7ff ff24 	bl	8000750 <memset>
 8000908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800090c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000910:	4620      	mov	r0, r4
 8000912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000914:	3468      	adds	r4, #104	; 0x68
 8000916:	e7d9      	b.n	80008cc <__sfp+0x1c>
 8000918:	2104      	movs	r1, #4
 800091a:	4638      	mov	r0, r7
 800091c:	f7ff ff62 	bl	80007e4 <__sfmoreglue>
 8000920:	4604      	mov	r4, r0
 8000922:	6030      	str	r0, [r6, #0]
 8000924:	2800      	cmp	r0, #0
 8000926:	d1d5      	bne.n	80008d4 <__sfp+0x24>
 8000928:	f7ff ff78 	bl	800081c <__sfp_lock_release>
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	e7ee      	b.n	8000910 <__sfp+0x60>
 8000932:	bf00      	nop
 8000934:	080016ac 	.word	0x080016ac
 8000938:	ffff0001 	.word	0xffff0001

0800093c <_fwalk_reent>:
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	4606      	mov	r6, r0
 8000942:	4688      	mov	r8, r1
 8000944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000948:	2700      	movs	r7, #0
 800094a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800094e:	f1b9 0901 	subs.w	r9, r9, #1
 8000952:	d505      	bpl.n	8000960 <_fwalk_reent+0x24>
 8000954:	6824      	ldr	r4, [r4, #0]
 8000956:	2c00      	cmp	r4, #0
 8000958:	d1f7      	bne.n	800094a <_fwalk_reent+0xe>
 800095a:	4638      	mov	r0, r7
 800095c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000960:	89ab      	ldrh	r3, [r5, #12]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d907      	bls.n	8000976 <_fwalk_reent+0x3a>
 8000966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800096a:	3301      	adds	r3, #1
 800096c:	d003      	beq.n	8000976 <_fwalk_reent+0x3a>
 800096e:	4629      	mov	r1, r5
 8000970:	4630      	mov	r0, r6
 8000972:	47c0      	blx	r8
 8000974:	4307      	orrs	r7, r0
 8000976:	3568      	adds	r5, #104	; 0x68
 8000978:	e7e9      	b.n	800094e <_fwalk_reent+0x12>

0800097a <__retarget_lock_init_recursive>:
 800097a:	4770      	bx	lr

0800097c <__retarget_lock_acquire_recursive>:
 800097c:	4770      	bx	lr

0800097e <__retarget_lock_release_recursive>:
 800097e:	4770      	bx	lr

08000980 <sbrk_aligned>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	4e0e      	ldr	r6, [pc, #56]	; (80009bc <sbrk_aligned+0x3c>)
 8000984:	460c      	mov	r4, r1
 8000986:	6831      	ldr	r1, [r6, #0]
 8000988:	4605      	mov	r5, r0
 800098a:	b911      	cbnz	r1, 8000992 <sbrk_aligned+0x12>
 800098c:	f000 fb7a 	bl	8001084 <_sbrk_r>
 8000990:	6030      	str	r0, [r6, #0]
 8000992:	4621      	mov	r1, r4
 8000994:	4628      	mov	r0, r5
 8000996:	f000 fb75 	bl	8001084 <_sbrk_r>
 800099a:	1c43      	adds	r3, r0, #1
 800099c:	d00a      	beq.n	80009b4 <sbrk_aligned+0x34>
 800099e:	1cc4      	adds	r4, r0, #3
 80009a0:	f024 0403 	bic.w	r4, r4, #3
 80009a4:	42a0      	cmp	r0, r4
 80009a6:	d007      	beq.n	80009b8 <sbrk_aligned+0x38>
 80009a8:	1a21      	subs	r1, r4, r0
 80009aa:	4628      	mov	r0, r5
 80009ac:	f000 fb6a 	bl	8001084 <_sbrk_r>
 80009b0:	3001      	adds	r0, #1
 80009b2:	d101      	bne.n	80009b8 <sbrk_aligned+0x38>
 80009b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80009b8:	4620      	mov	r0, r4
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	20000098 	.word	0x20000098

080009c0 <_malloc_r>:
 80009c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009c4:	1ccd      	adds	r5, r1, #3
 80009c6:	f025 0503 	bic.w	r5, r5, #3
 80009ca:	3508      	adds	r5, #8
 80009cc:	2d0c      	cmp	r5, #12
 80009ce:	bf38      	it	cc
 80009d0:	250c      	movcc	r5, #12
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	4607      	mov	r7, r0
 80009d6:	db01      	blt.n	80009dc <_malloc_r+0x1c>
 80009d8:	42a9      	cmp	r1, r5
 80009da:	d905      	bls.n	80009e8 <_malloc_r+0x28>
 80009dc:	230c      	movs	r3, #12
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	2600      	movs	r6, #0
 80009e2:	4630      	mov	r0, r6
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e8:	4e2e      	ldr	r6, [pc, #184]	; (8000aa4 <_malloc_r+0xe4>)
 80009ea:	f000 fdbb 	bl	8001564 <__malloc_lock>
 80009ee:	6833      	ldr	r3, [r6, #0]
 80009f0:	461c      	mov	r4, r3
 80009f2:	bb34      	cbnz	r4, 8000a42 <_malloc_r+0x82>
 80009f4:	4629      	mov	r1, r5
 80009f6:	4638      	mov	r0, r7
 80009f8:	f7ff ffc2 	bl	8000980 <sbrk_aligned>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	4604      	mov	r4, r0
 8000a00:	d14d      	bne.n	8000a9e <_malloc_r+0xde>
 8000a02:	6834      	ldr	r4, [r6, #0]
 8000a04:	4626      	mov	r6, r4
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d140      	bne.n	8000a8c <_malloc_r+0xcc>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	4638      	mov	r0, r7
 8000a10:	eb04 0803 	add.w	r8, r4, r3
 8000a14:	f000 fb36 	bl	8001084 <_sbrk_r>
 8000a18:	4580      	cmp	r8, r0
 8000a1a:	d13a      	bne.n	8000a92 <_malloc_r+0xd2>
 8000a1c:	6821      	ldr	r1, [r4, #0]
 8000a1e:	3503      	adds	r5, #3
 8000a20:	1a6d      	subs	r5, r5, r1
 8000a22:	f025 0503 	bic.w	r5, r5, #3
 8000a26:	3508      	adds	r5, #8
 8000a28:	2d0c      	cmp	r5, #12
 8000a2a:	bf38      	it	cc
 8000a2c:	250c      	movcc	r5, #12
 8000a2e:	4629      	mov	r1, r5
 8000a30:	4638      	mov	r0, r7
 8000a32:	f7ff ffa5 	bl	8000980 <sbrk_aligned>
 8000a36:	3001      	adds	r0, #1
 8000a38:	d02b      	beq.n	8000a92 <_malloc_r+0xd2>
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	442b      	add	r3, r5
 8000a3e:	6023      	str	r3, [r4, #0]
 8000a40:	e00e      	b.n	8000a60 <_malloc_r+0xa0>
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	1b52      	subs	r2, r2, r5
 8000a46:	d41e      	bmi.n	8000a86 <_malloc_r+0xc6>
 8000a48:	2a0b      	cmp	r2, #11
 8000a4a:	d916      	bls.n	8000a7a <_malloc_r+0xba>
 8000a4c:	1961      	adds	r1, r4, r5
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	6025      	str	r5, [r4, #0]
 8000a52:	bf18      	it	ne
 8000a54:	6059      	strne	r1, [r3, #4]
 8000a56:	6863      	ldr	r3, [r4, #4]
 8000a58:	bf08      	it	eq
 8000a5a:	6031      	streq	r1, [r6, #0]
 8000a5c:	5162      	str	r2, [r4, r5]
 8000a5e:	604b      	str	r3, [r1, #4]
 8000a60:	4638      	mov	r0, r7
 8000a62:	f104 060b 	add.w	r6, r4, #11
 8000a66:	f000 fd83 	bl	8001570 <__malloc_unlock>
 8000a6a:	f026 0607 	bic.w	r6, r6, #7
 8000a6e:	1d23      	adds	r3, r4, #4
 8000a70:	1af2      	subs	r2, r6, r3
 8000a72:	d0b6      	beq.n	80009e2 <_malloc_r+0x22>
 8000a74:	1b9b      	subs	r3, r3, r6
 8000a76:	50a3      	str	r3, [r4, r2]
 8000a78:	e7b3      	b.n	80009e2 <_malloc_r+0x22>
 8000a7a:	6862      	ldr	r2, [r4, #4]
 8000a7c:	42a3      	cmp	r3, r4
 8000a7e:	bf0c      	ite	eq
 8000a80:	6032      	streq	r2, [r6, #0]
 8000a82:	605a      	strne	r2, [r3, #4]
 8000a84:	e7ec      	b.n	8000a60 <_malloc_r+0xa0>
 8000a86:	4623      	mov	r3, r4
 8000a88:	6864      	ldr	r4, [r4, #4]
 8000a8a:	e7b2      	b.n	80009f2 <_malloc_r+0x32>
 8000a8c:	4634      	mov	r4, r6
 8000a8e:	6876      	ldr	r6, [r6, #4]
 8000a90:	e7b9      	b.n	8000a06 <_malloc_r+0x46>
 8000a92:	230c      	movs	r3, #12
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4638      	mov	r0, r7
 8000a98:	f000 fd6a 	bl	8001570 <__malloc_unlock>
 8000a9c:	e7a1      	b.n	80009e2 <_malloc_r+0x22>
 8000a9e:	6025      	str	r5, [r4, #0]
 8000aa0:	e7de      	b.n	8000a60 <_malloc_r+0xa0>
 8000aa2:	bf00      	nop
 8000aa4:	20000094 	.word	0x20000094

08000aa8 <__sfputc_r>:
 8000aa8:	6893      	ldr	r3, [r2, #8]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	b410      	push	{r4}
 8000ab0:	6093      	str	r3, [r2, #8]
 8000ab2:	da08      	bge.n	8000ac6 <__sfputc_r+0x1e>
 8000ab4:	6994      	ldr	r4, [r2, #24]
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	db01      	blt.n	8000abe <__sfputc_r+0x16>
 8000aba:	290a      	cmp	r1, #10
 8000abc:	d103      	bne.n	8000ac6 <__sfputc_r+0x1e>
 8000abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ac2:	f000 bb33 	b.w	800112c <__swbuf_r>
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	1c58      	adds	r0, r3, #1
 8000aca:	6010      	str	r0, [r2, #0]
 8000acc:	7019      	strb	r1, [r3, #0]
 8000ace:	4608      	mov	r0, r1
 8000ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <__sfputs_r>:
 8000ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad8:	4606      	mov	r6, r0
 8000ada:	460f      	mov	r7, r1
 8000adc:	4614      	mov	r4, r2
 8000ade:	18d5      	adds	r5, r2, r3
 8000ae0:	42ac      	cmp	r4, r5
 8000ae2:	d101      	bne.n	8000ae8 <__sfputs_r+0x12>
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e007      	b.n	8000af8 <__sfputs_r+0x22>
 8000ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aec:	463a      	mov	r2, r7
 8000aee:	4630      	mov	r0, r6
 8000af0:	f7ff ffda 	bl	8000aa8 <__sfputc_r>
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	d1f3      	bne.n	8000ae0 <__sfputs_r+0xa>
 8000af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000afc <_vfiprintf_r>:
 8000afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b00:	460d      	mov	r5, r1
 8000b02:	b09d      	sub	sp, #116	; 0x74
 8000b04:	4614      	mov	r4, r2
 8000b06:	4698      	mov	r8, r3
 8000b08:	4606      	mov	r6, r0
 8000b0a:	b118      	cbz	r0, 8000b14 <_vfiprintf_r+0x18>
 8000b0c:	6983      	ldr	r3, [r0, #24]
 8000b0e:	b90b      	cbnz	r3, 8000b14 <_vfiprintf_r+0x18>
 8000b10:	f7ff fe96 	bl	8000840 <__sinit>
 8000b14:	4b89      	ldr	r3, [pc, #548]	; (8000d3c <_vfiprintf_r+0x240>)
 8000b16:	429d      	cmp	r5, r3
 8000b18:	d11b      	bne.n	8000b52 <_vfiprintf_r+0x56>
 8000b1a:	6875      	ldr	r5, [r6, #4]
 8000b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b1e:	07d9      	lsls	r1, r3, #31
 8000b20:	d405      	bmi.n	8000b2e <_vfiprintf_r+0x32>
 8000b22:	89ab      	ldrh	r3, [r5, #12]
 8000b24:	059a      	lsls	r2, r3, #22
 8000b26:	d402      	bmi.n	8000b2e <_vfiprintf_r+0x32>
 8000b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b2a:	f7ff ff27 	bl	800097c <__retarget_lock_acquire_recursive>
 8000b2e:	89ab      	ldrh	r3, [r5, #12]
 8000b30:	071b      	lsls	r3, r3, #28
 8000b32:	d501      	bpl.n	8000b38 <_vfiprintf_r+0x3c>
 8000b34:	692b      	ldr	r3, [r5, #16]
 8000b36:	b9eb      	cbnz	r3, 8000b74 <_vfiprintf_r+0x78>
 8000b38:	4629      	mov	r1, r5
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f000 fb5a 	bl	80011f4 <__swsetup_r>
 8000b40:	b1c0      	cbz	r0, 8000b74 <_vfiprintf_r+0x78>
 8000b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b44:	07dc      	lsls	r4, r3, #31
 8000b46:	d50e      	bpl.n	8000b66 <_vfiprintf_r+0x6a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	b01d      	add	sp, #116	; 0x74
 8000b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b52:	4b7b      	ldr	r3, [pc, #492]	; (8000d40 <_vfiprintf_r+0x244>)
 8000b54:	429d      	cmp	r5, r3
 8000b56:	d101      	bne.n	8000b5c <_vfiprintf_r+0x60>
 8000b58:	68b5      	ldr	r5, [r6, #8]
 8000b5a:	e7df      	b.n	8000b1c <_vfiprintf_r+0x20>
 8000b5c:	4b79      	ldr	r3, [pc, #484]	; (8000d44 <_vfiprintf_r+0x248>)
 8000b5e:	429d      	cmp	r5, r3
 8000b60:	bf08      	it	eq
 8000b62:	68f5      	ldreq	r5, [r6, #12]
 8000b64:	e7da      	b.n	8000b1c <_vfiprintf_r+0x20>
 8000b66:	89ab      	ldrh	r3, [r5, #12]
 8000b68:	0598      	lsls	r0, r3, #22
 8000b6a:	d4ed      	bmi.n	8000b48 <_vfiprintf_r+0x4c>
 8000b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b6e:	f7ff ff06 	bl	800097e <__retarget_lock_release_recursive>
 8000b72:	e7e9      	b.n	8000b48 <_vfiprintf_r+0x4c>
 8000b74:	2300      	movs	r3, #0
 8000b76:	9309      	str	r3, [sp, #36]	; 0x24
 8000b78:	2320      	movs	r3, #32
 8000b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b82:	2330      	movs	r3, #48	; 0x30
 8000b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d48 <_vfiprintf_r+0x24c>
 8000b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b8c:	f04f 0901 	mov.w	r9, #1
 8000b90:	4623      	mov	r3, r4
 8000b92:	469a      	mov	sl, r3
 8000b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b98:	b10a      	cbz	r2, 8000b9e <_vfiprintf_r+0xa2>
 8000b9a:	2a25      	cmp	r2, #37	; 0x25
 8000b9c:	d1f9      	bne.n	8000b92 <_vfiprintf_r+0x96>
 8000b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8000ba2:	d00b      	beq.n	8000bbc <_vfiprintf_r+0xc0>
 8000ba4:	465b      	mov	r3, fp
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4630      	mov	r0, r6
 8000bac:	f7ff ff93 	bl	8000ad6 <__sfputs_r>
 8000bb0:	3001      	adds	r0, #1
 8000bb2:	f000 80aa 	beq.w	8000d0a <_vfiprintf_r+0x20e>
 8000bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bb8:	445a      	add	r2, fp
 8000bba:	9209      	str	r2, [sp, #36]	; 0x24
 8000bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 80a2 	beq.w	8000d0a <_vfiprintf_r+0x20e>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bd0:	f10a 0a01 	add.w	sl, sl, #1
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	9307      	str	r3, [sp, #28]
 8000bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8000bde:	4654      	mov	r4, sl
 8000be0:	2205      	movs	r2, #5
 8000be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be6:	4858      	ldr	r0, [pc, #352]	; (8000d48 <_vfiprintf_r+0x24c>)
 8000be8:	f7ff fb12 	bl	8000210 <memchr>
 8000bec:	9a04      	ldr	r2, [sp, #16]
 8000bee:	b9d8      	cbnz	r0, 8000c28 <_vfiprintf_r+0x12c>
 8000bf0:	06d1      	lsls	r1, r2, #27
 8000bf2:	bf44      	itt	mi
 8000bf4:	2320      	movmi	r3, #32
 8000bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bfa:	0713      	lsls	r3, r2, #28
 8000bfc:	bf44      	itt	mi
 8000bfe:	232b      	movmi	r3, #43	; 0x2b
 8000c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c04:	f89a 3000 	ldrb.w	r3, [sl]
 8000c08:	2b2a      	cmp	r3, #42	; 0x2a
 8000c0a:	d015      	beq.n	8000c38 <_vfiprintf_r+0x13c>
 8000c0c:	9a07      	ldr	r2, [sp, #28]
 8000c0e:	4654      	mov	r4, sl
 8000c10:	2000      	movs	r0, #0
 8000c12:	f04f 0c0a 	mov.w	ip, #10
 8000c16:	4621      	mov	r1, r4
 8000c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c1c:	3b30      	subs	r3, #48	; 0x30
 8000c1e:	2b09      	cmp	r3, #9
 8000c20:	d94e      	bls.n	8000cc0 <_vfiprintf_r+0x1c4>
 8000c22:	b1b0      	cbz	r0, 8000c52 <_vfiprintf_r+0x156>
 8000c24:	9207      	str	r2, [sp, #28]
 8000c26:	e014      	b.n	8000c52 <_vfiprintf_r+0x156>
 8000c28:	eba0 0308 	sub.w	r3, r0, r8
 8000c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	9304      	str	r3, [sp, #16]
 8000c34:	46a2      	mov	sl, r4
 8000c36:	e7d2      	b.n	8000bde <_vfiprintf_r+0xe2>
 8000c38:	9b03      	ldr	r3, [sp, #12]
 8000c3a:	1d19      	adds	r1, r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	9103      	str	r1, [sp, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bfbb      	ittet	lt
 8000c44:	425b      	neglt	r3, r3
 8000c46:	f042 0202 	orrlt.w	r2, r2, #2
 8000c4a:	9307      	strge	r3, [sp, #28]
 8000c4c:	9307      	strlt	r3, [sp, #28]
 8000c4e:	bfb8      	it	lt
 8000c50:	9204      	strlt	r2, [sp, #16]
 8000c52:	7823      	ldrb	r3, [r4, #0]
 8000c54:	2b2e      	cmp	r3, #46	; 0x2e
 8000c56:	d10c      	bne.n	8000c72 <_vfiprintf_r+0x176>
 8000c58:	7863      	ldrb	r3, [r4, #1]
 8000c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c5c:	d135      	bne.n	8000cca <_vfiprintf_r+0x1ce>
 8000c5e:	9b03      	ldr	r3, [sp, #12]
 8000c60:	1d1a      	adds	r2, r3, #4
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	9203      	str	r2, [sp, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bfb8      	it	lt
 8000c6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000c6e:	3402      	adds	r4, #2
 8000c70:	9305      	str	r3, [sp, #20]
 8000c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d58 <_vfiprintf_r+0x25c>
 8000c76:	7821      	ldrb	r1, [r4, #0]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4650      	mov	r0, sl
 8000c7c:	f7ff fac8 	bl	8000210 <memchr>
 8000c80:	b140      	cbz	r0, 8000c94 <_vfiprintf_r+0x198>
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	eba0 000a 	sub.w	r0, r0, sl
 8000c88:	fa03 f000 	lsl.w	r0, r3, r0
 8000c8c:	9b04      	ldr	r3, [sp, #16]
 8000c8e:	4303      	orrs	r3, r0
 8000c90:	3401      	adds	r4, #1
 8000c92:	9304      	str	r3, [sp, #16]
 8000c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c98:	482c      	ldr	r0, [pc, #176]	; (8000d4c <_vfiprintf_r+0x250>)
 8000c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	f7ff fab6 	bl	8000210 <memchr>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d03f      	beq.n	8000d28 <_vfiprintf_r+0x22c>
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <_vfiprintf_r+0x254>)
 8000caa:	bb1b      	cbnz	r3, 8000cf4 <_vfiprintf_r+0x1f8>
 8000cac:	9b03      	ldr	r3, [sp, #12]
 8000cae:	3307      	adds	r3, #7
 8000cb0:	f023 0307 	bic.w	r3, r3, #7
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	9303      	str	r3, [sp, #12]
 8000cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cba:	443b      	add	r3, r7
 8000cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8000cbe:	e767      	b.n	8000b90 <_vfiprintf_r+0x94>
 8000cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	e7a5      	b.n	8000c16 <_vfiprintf_r+0x11a>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	3401      	adds	r4, #1
 8000cce:	9305      	str	r3, [sp, #20]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 0c0a 	mov.w	ip, #10
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cdc:	3a30      	subs	r2, #48	; 0x30
 8000cde:	2a09      	cmp	r2, #9
 8000ce0:	d903      	bls.n	8000cea <_vfiprintf_r+0x1ee>
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0c5      	beq.n	8000c72 <_vfiprintf_r+0x176>
 8000ce6:	9105      	str	r1, [sp, #20]
 8000ce8:	e7c3      	b.n	8000c72 <_vfiprintf_r+0x176>
 8000cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cee:	4604      	mov	r4, r0
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e7f0      	b.n	8000cd6 <_vfiprintf_r+0x1da>
 8000cf4:	ab03      	add	r3, sp, #12
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <_vfiprintf_r+0x258>)
 8000cfc:	a904      	add	r1, sp, #16
 8000cfe:	4630      	mov	r0, r6
 8000d00:	f3af 8000 	nop.w
 8000d04:	4607      	mov	r7, r0
 8000d06:	1c78      	adds	r0, r7, #1
 8000d08:	d1d6      	bne.n	8000cb8 <_vfiprintf_r+0x1bc>
 8000d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d0c:	07d9      	lsls	r1, r3, #31
 8000d0e:	d405      	bmi.n	8000d1c <_vfiprintf_r+0x220>
 8000d10:	89ab      	ldrh	r3, [r5, #12]
 8000d12:	059a      	lsls	r2, r3, #22
 8000d14:	d402      	bmi.n	8000d1c <_vfiprintf_r+0x220>
 8000d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d18:	f7ff fe31 	bl	800097e <__retarget_lock_release_recursive>
 8000d1c:	89ab      	ldrh	r3, [r5, #12]
 8000d1e:	065b      	lsls	r3, r3, #25
 8000d20:	f53f af12 	bmi.w	8000b48 <_vfiprintf_r+0x4c>
 8000d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d26:	e711      	b.n	8000b4c <_vfiprintf_r+0x50>
 8000d28:	ab03      	add	r3, sp, #12
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	462a      	mov	r2, r5
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <_vfiprintf_r+0x258>)
 8000d30:	a904      	add	r1, sp, #16
 8000d32:	4630      	mov	r0, r6
 8000d34:	f000 f880 	bl	8000e38 <_printf_i>
 8000d38:	e7e4      	b.n	8000d04 <_vfiprintf_r+0x208>
 8000d3a:	bf00      	nop
 8000d3c:	080016d0 	.word	0x080016d0
 8000d40:	080016f0 	.word	0x080016f0
 8000d44:	080016b0 	.word	0x080016b0
 8000d48:	08001710 	.word	0x08001710
 8000d4c:	0800171a 	.word	0x0800171a
 8000d50:	00000000 	.word	0x00000000
 8000d54:	08000ad7 	.word	0x08000ad7
 8000d58:	08001716 	.word	0x08001716

08000d5c <_printf_common>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	4616      	mov	r6, r2
 8000d62:	4699      	mov	r9, r3
 8000d64:	688a      	ldr	r2, [r1, #8]
 8000d66:	690b      	ldr	r3, [r1, #16]
 8000d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	bfb8      	it	lt
 8000d70:	4613      	movlt	r3, r2
 8000d72:	6033      	str	r3, [r6, #0]
 8000d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d78:	4607      	mov	r7, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	b10a      	cbz	r2, 8000d82 <_printf_common+0x26>
 8000d7e:	3301      	adds	r3, #1
 8000d80:	6033      	str	r3, [r6, #0]
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	0699      	lsls	r1, r3, #26
 8000d86:	bf42      	ittt	mi
 8000d88:	6833      	ldrmi	r3, [r6, #0]
 8000d8a:	3302      	addmi	r3, #2
 8000d8c:	6033      	strmi	r3, [r6, #0]
 8000d8e:	6825      	ldr	r5, [r4, #0]
 8000d90:	f015 0506 	ands.w	r5, r5, #6
 8000d94:	d106      	bne.n	8000da4 <_printf_common+0x48>
 8000d96:	f104 0a19 	add.w	sl, r4, #25
 8000d9a:	68e3      	ldr	r3, [r4, #12]
 8000d9c:	6832      	ldr	r2, [r6, #0]
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	dc26      	bgt.n	8000df2 <_printf_common+0x96>
 8000da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000da8:	1e13      	subs	r3, r2, #0
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	bf18      	it	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	0692      	lsls	r2, r2, #26
 8000db2:	d42b      	bmi.n	8000e0c <_printf_common+0xb0>
 8000db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000db8:	4649      	mov	r1, r9
 8000dba:	4638      	mov	r0, r7
 8000dbc:	47c0      	blx	r8
 8000dbe:	3001      	adds	r0, #1
 8000dc0:	d01e      	beq.n	8000e00 <_printf_common+0xa4>
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	68e5      	ldr	r5, [r4, #12]
 8000dc6:	6832      	ldr	r2, [r6, #0]
 8000dc8:	f003 0306 	and.w	r3, r3, #6
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	bf08      	it	eq
 8000dd0:	1aad      	subeq	r5, r5, r2
 8000dd2:	68a3      	ldr	r3, [r4, #8]
 8000dd4:	6922      	ldr	r2, [r4, #16]
 8000dd6:	bf0c      	ite	eq
 8000dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ddc:	2500      	movne	r5, #0
 8000dde:	4293      	cmp	r3, r2
 8000de0:	bfc4      	itt	gt
 8000de2:	1a9b      	subgt	r3, r3, r2
 8000de4:	18ed      	addgt	r5, r5, r3
 8000de6:	2600      	movs	r6, #0
 8000de8:	341a      	adds	r4, #26
 8000dea:	42b5      	cmp	r5, r6
 8000dec:	d11a      	bne.n	8000e24 <_printf_common+0xc8>
 8000dee:	2000      	movs	r0, #0
 8000df0:	e008      	b.n	8000e04 <_printf_common+0xa8>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4652      	mov	r2, sl
 8000df6:	4649      	mov	r1, r9
 8000df8:	4638      	mov	r0, r7
 8000dfa:	47c0      	blx	r8
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	d103      	bne.n	8000e08 <_printf_common+0xac>
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	3501      	adds	r5, #1
 8000e0a:	e7c6      	b.n	8000d9a <_printf_common+0x3e>
 8000e0c:	18e1      	adds	r1, r4, r3
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	2030      	movs	r0, #48	; 0x30
 8000e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e16:	4422      	add	r2, r4
 8000e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e20:	3302      	adds	r3, #2
 8000e22:	e7c7      	b.n	8000db4 <_printf_common+0x58>
 8000e24:	2301      	movs	r3, #1
 8000e26:	4622      	mov	r2, r4
 8000e28:	4649      	mov	r1, r9
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	47c0      	blx	r8
 8000e2e:	3001      	adds	r0, #1
 8000e30:	d0e6      	beq.n	8000e00 <_printf_common+0xa4>
 8000e32:	3601      	adds	r6, #1
 8000e34:	e7d9      	b.n	8000dea <_printf_common+0x8e>
	...

08000e38 <_printf_i>:
 8000e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e3c:	7e0f      	ldrb	r7, [r1, #24]
 8000e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e40:	2f78      	cmp	r7, #120	; 0x78
 8000e42:	4691      	mov	r9, r2
 8000e44:	4680      	mov	r8, r0
 8000e46:	460c      	mov	r4, r1
 8000e48:	469a      	mov	sl, r3
 8000e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e4e:	d807      	bhi.n	8000e60 <_printf_i+0x28>
 8000e50:	2f62      	cmp	r7, #98	; 0x62
 8000e52:	d80a      	bhi.n	8000e6a <_printf_i+0x32>
 8000e54:	2f00      	cmp	r7, #0
 8000e56:	f000 80d8 	beq.w	800100a <_printf_i+0x1d2>
 8000e5a:	2f58      	cmp	r7, #88	; 0x58
 8000e5c:	f000 80a3 	beq.w	8000fa6 <_printf_i+0x16e>
 8000e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e68:	e03a      	b.n	8000ee0 <_printf_i+0xa8>
 8000e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e6e:	2b15      	cmp	r3, #21
 8000e70:	d8f6      	bhi.n	8000e60 <_printf_i+0x28>
 8000e72:	a101      	add	r1, pc, #4	; (adr r1, 8000e78 <_printf_i+0x40>)
 8000e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e78:	08000ed1 	.word	0x08000ed1
 8000e7c:	08000ee5 	.word	0x08000ee5
 8000e80:	08000e61 	.word	0x08000e61
 8000e84:	08000e61 	.word	0x08000e61
 8000e88:	08000e61 	.word	0x08000e61
 8000e8c:	08000e61 	.word	0x08000e61
 8000e90:	08000ee5 	.word	0x08000ee5
 8000e94:	08000e61 	.word	0x08000e61
 8000e98:	08000e61 	.word	0x08000e61
 8000e9c:	08000e61 	.word	0x08000e61
 8000ea0:	08000e61 	.word	0x08000e61
 8000ea4:	08000ff1 	.word	0x08000ff1
 8000ea8:	08000f15 	.word	0x08000f15
 8000eac:	08000fd3 	.word	0x08000fd3
 8000eb0:	08000e61 	.word	0x08000e61
 8000eb4:	08000e61 	.word	0x08000e61
 8000eb8:	08001013 	.word	0x08001013
 8000ebc:	08000e61 	.word	0x08000e61
 8000ec0:	08000f15 	.word	0x08000f15
 8000ec4:	08000e61 	.word	0x08000e61
 8000ec8:	08000e61 	.word	0x08000e61
 8000ecc:	08000fdb 	.word	0x08000fdb
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	602a      	str	r2, [r5, #0]
 8000ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e0a3      	b.n	800102c <_printf_i+0x1f4>
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	6829      	ldr	r1, [r5, #0]
 8000ee8:	0606      	lsls	r6, r0, #24
 8000eea:	f101 0304 	add.w	r3, r1, #4
 8000eee:	d50a      	bpl.n	8000f06 <_printf_i+0xce>
 8000ef0:	680e      	ldr	r6, [r1, #0]
 8000ef2:	602b      	str	r3, [r5, #0]
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	da03      	bge.n	8000f00 <_printf_i+0xc8>
 8000ef8:	232d      	movs	r3, #45	; 0x2d
 8000efa:	4276      	negs	r6, r6
 8000efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f00:	485e      	ldr	r0, [pc, #376]	; (800107c <_printf_i+0x244>)
 8000f02:	230a      	movs	r3, #10
 8000f04:	e019      	b.n	8000f3a <_printf_i+0x102>
 8000f06:	680e      	ldr	r6, [r1, #0]
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f0e:	bf18      	it	ne
 8000f10:	b236      	sxthne	r6, r6
 8000f12:	e7ef      	b.n	8000ef4 <_printf_i+0xbc>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	6820      	ldr	r0, [r4, #0]
 8000f18:	1d19      	adds	r1, r3, #4
 8000f1a:	6029      	str	r1, [r5, #0]
 8000f1c:	0601      	lsls	r1, r0, #24
 8000f1e:	d501      	bpl.n	8000f24 <_printf_i+0xec>
 8000f20:	681e      	ldr	r6, [r3, #0]
 8000f22:	e002      	b.n	8000f2a <_printf_i+0xf2>
 8000f24:	0646      	lsls	r6, r0, #25
 8000f26:	d5fb      	bpl.n	8000f20 <_printf_i+0xe8>
 8000f28:	881e      	ldrh	r6, [r3, #0]
 8000f2a:	4854      	ldr	r0, [pc, #336]	; (800107c <_printf_i+0x244>)
 8000f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8000f2e:	bf0c      	ite	eq
 8000f30:	2308      	moveq	r3, #8
 8000f32:	230a      	movne	r3, #10
 8000f34:	2100      	movs	r1, #0
 8000f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f3a:	6865      	ldr	r5, [r4, #4]
 8000f3c:	60a5      	str	r5, [r4, #8]
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	bfa2      	ittt	ge
 8000f42:	6821      	ldrge	r1, [r4, #0]
 8000f44:	f021 0104 	bicge.w	r1, r1, #4
 8000f48:	6021      	strge	r1, [r4, #0]
 8000f4a:	b90e      	cbnz	r6, 8000f50 <_printf_i+0x118>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d04d      	beq.n	8000fec <_printf_i+0x1b4>
 8000f50:	4615      	mov	r5, r2
 8000f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f56:	fb03 6711 	mls	r7, r3, r1, r6
 8000f5a:	5dc7      	ldrb	r7, [r0, r7]
 8000f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f60:	4637      	mov	r7, r6
 8000f62:	42bb      	cmp	r3, r7
 8000f64:	460e      	mov	r6, r1
 8000f66:	d9f4      	bls.n	8000f52 <_printf_i+0x11a>
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d10b      	bne.n	8000f84 <_printf_i+0x14c>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	07de      	lsls	r6, r3, #31
 8000f70:	d508      	bpl.n	8000f84 <_printf_i+0x14c>
 8000f72:	6923      	ldr	r3, [r4, #16]
 8000f74:	6861      	ldr	r1, [r4, #4]
 8000f76:	4299      	cmp	r1, r3
 8000f78:	bfde      	ittt	le
 8000f7a:	2330      	movle	r3, #48	; 0x30
 8000f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000f84:	1b52      	subs	r2, r2, r5
 8000f86:	6122      	str	r2, [r4, #16]
 8000f88:	f8cd a000 	str.w	sl, [sp]
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	aa03      	add	r2, sp, #12
 8000f90:	4621      	mov	r1, r4
 8000f92:	4640      	mov	r0, r8
 8000f94:	f7ff fee2 	bl	8000d5c <_printf_common>
 8000f98:	3001      	adds	r0, #1
 8000f9a:	d14c      	bne.n	8001036 <_printf_i+0x1fe>
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	b004      	add	sp, #16
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	4835      	ldr	r0, [pc, #212]	; (800107c <_printf_i+0x244>)
 8000fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000fac:	6829      	ldr	r1, [r5, #0]
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000fb4:	6029      	str	r1, [r5, #0]
 8000fb6:	061d      	lsls	r5, r3, #24
 8000fb8:	d514      	bpl.n	8000fe4 <_printf_i+0x1ac>
 8000fba:	07df      	lsls	r7, r3, #31
 8000fbc:	bf44      	itt	mi
 8000fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8000fc2:	6023      	strmi	r3, [r4, #0]
 8000fc4:	b91e      	cbnz	r6, 8000fce <_printf_i+0x196>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	f023 0320 	bic.w	r3, r3, #32
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	2310      	movs	r3, #16
 8000fd0:	e7b0      	b.n	8000f34 <_printf_i+0xfc>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	2378      	movs	r3, #120	; 0x78
 8000fdc:	4828      	ldr	r0, [pc, #160]	; (8001080 <_printf_i+0x248>)
 8000fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fe2:	e7e3      	b.n	8000fac <_printf_i+0x174>
 8000fe4:	0659      	lsls	r1, r3, #25
 8000fe6:	bf48      	it	mi
 8000fe8:	b2b6      	uxthmi	r6, r6
 8000fea:	e7e6      	b.n	8000fba <_printf_i+0x182>
 8000fec:	4615      	mov	r5, r2
 8000fee:	e7bb      	b.n	8000f68 <_printf_i+0x130>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	6826      	ldr	r6, [r4, #0]
 8000ff4:	6961      	ldr	r1, [r4, #20]
 8000ff6:	1d18      	adds	r0, r3, #4
 8000ff8:	6028      	str	r0, [r5, #0]
 8000ffa:	0635      	lsls	r5, r6, #24
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	d501      	bpl.n	8001004 <_printf_i+0x1cc>
 8001000:	6019      	str	r1, [r3, #0]
 8001002:	e002      	b.n	800100a <_printf_i+0x1d2>
 8001004:	0670      	lsls	r0, r6, #25
 8001006:	d5fb      	bpl.n	8001000 <_printf_i+0x1c8>
 8001008:	8019      	strh	r1, [r3, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	6123      	str	r3, [r4, #16]
 800100e:	4615      	mov	r5, r2
 8001010:	e7ba      	b.n	8000f88 <_printf_i+0x150>
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	1d1a      	adds	r2, r3, #4
 8001016:	602a      	str	r2, [r5, #0]
 8001018:	681d      	ldr	r5, [r3, #0]
 800101a:	6862      	ldr	r2, [r4, #4]
 800101c:	2100      	movs	r1, #0
 800101e:	4628      	mov	r0, r5
 8001020:	f7ff f8f6 	bl	8000210 <memchr>
 8001024:	b108      	cbz	r0, 800102a <_printf_i+0x1f2>
 8001026:	1b40      	subs	r0, r0, r5
 8001028:	6060      	str	r0, [r4, #4]
 800102a:	6863      	ldr	r3, [r4, #4]
 800102c:	6123      	str	r3, [r4, #16]
 800102e:	2300      	movs	r3, #0
 8001030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001034:	e7a8      	b.n	8000f88 <_printf_i+0x150>
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	462a      	mov	r2, r5
 800103a:	4649      	mov	r1, r9
 800103c:	4640      	mov	r0, r8
 800103e:	47d0      	blx	sl
 8001040:	3001      	adds	r0, #1
 8001042:	d0ab      	beq.n	8000f9c <_printf_i+0x164>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	079b      	lsls	r3, r3, #30
 8001048:	d413      	bmi.n	8001072 <_printf_i+0x23a>
 800104a:	68e0      	ldr	r0, [r4, #12]
 800104c:	9b03      	ldr	r3, [sp, #12]
 800104e:	4298      	cmp	r0, r3
 8001050:	bfb8      	it	lt
 8001052:	4618      	movlt	r0, r3
 8001054:	e7a4      	b.n	8000fa0 <_printf_i+0x168>
 8001056:	2301      	movs	r3, #1
 8001058:	4632      	mov	r2, r6
 800105a:	4649      	mov	r1, r9
 800105c:	4640      	mov	r0, r8
 800105e:	47d0      	blx	sl
 8001060:	3001      	adds	r0, #1
 8001062:	d09b      	beq.n	8000f9c <_printf_i+0x164>
 8001064:	3501      	adds	r5, #1
 8001066:	68e3      	ldr	r3, [r4, #12]
 8001068:	9903      	ldr	r1, [sp, #12]
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	42ab      	cmp	r3, r5
 800106e:	dcf2      	bgt.n	8001056 <_printf_i+0x21e>
 8001070:	e7eb      	b.n	800104a <_printf_i+0x212>
 8001072:	2500      	movs	r5, #0
 8001074:	f104 0619 	add.w	r6, r4, #25
 8001078:	e7f5      	b.n	8001066 <_printf_i+0x22e>
 800107a:	bf00      	nop
 800107c:	08001721 	.word	0x08001721
 8001080:	08001732 	.word	0x08001732

08001084 <_sbrk_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4d06      	ldr	r5, [pc, #24]	; (80010a0 <_sbrk_r+0x1c>)
 8001088:	2300      	movs	r3, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	602b      	str	r3, [r5, #0]
 8001090:	f7ff fa18 	bl	80004c4 <_sbrk>
 8001094:	1c43      	adds	r3, r0, #1
 8001096:	d102      	bne.n	800109e <_sbrk_r+0x1a>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	b103      	cbz	r3, 800109e <_sbrk_r+0x1a>
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	bd38      	pop	{r3, r4, r5, pc}
 80010a0:	2000009c 	.word	0x2000009c

080010a4 <__sread>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	460c      	mov	r4, r1
 80010a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ac:	f000 fab2 	bl	8001614 <_read_r>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	bfab      	itete	ge
 80010b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010b6:	89a3      	ldrhlt	r3, [r4, #12]
 80010b8:	181b      	addge	r3, r3, r0
 80010ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010be:	bfac      	ite	ge
 80010c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80010c2:	81a3      	strhlt	r3, [r4, #12]
 80010c4:	bd10      	pop	{r4, pc}

080010c6 <__swrite>:
 80010c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ca:	461f      	mov	r7, r3
 80010cc:	898b      	ldrh	r3, [r1, #12]
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	4605      	mov	r5, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4616      	mov	r6, r2
 80010d6:	d505      	bpl.n	80010e4 <__swrite+0x1e>
 80010d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010dc:	2302      	movs	r3, #2
 80010de:	2200      	movs	r2, #0
 80010e0:	f000 f9c8 	bl	8001474 <_lseek_r>
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ee:	81a3      	strh	r3, [r4, #12]
 80010f0:	4632      	mov	r2, r6
 80010f2:	463b      	mov	r3, r7
 80010f4:	4628      	mov	r0, r5
 80010f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010fa:	f000 b869 	b.w	80011d0 <_write_r>

080010fe <__sseek>:
 80010fe:	b510      	push	{r4, lr}
 8001100:	460c      	mov	r4, r1
 8001102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001106:	f000 f9b5 	bl	8001474 <_lseek_r>
 800110a:	1c43      	adds	r3, r0, #1
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	bf15      	itete	ne
 8001110:	6560      	strne	r0, [r4, #84]	; 0x54
 8001112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800111a:	81a3      	strheq	r3, [r4, #12]
 800111c:	bf18      	it	ne
 800111e:	81a3      	strhne	r3, [r4, #12]
 8001120:	bd10      	pop	{r4, pc}

08001122 <__sclose>:
 8001122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001126:	f000 b8d3 	b.w	80012d0 <_close_r>
	...

0800112c <__swbuf_r>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	460e      	mov	r6, r1
 8001130:	4614      	mov	r4, r2
 8001132:	4605      	mov	r5, r0
 8001134:	b118      	cbz	r0, 800113e <__swbuf_r+0x12>
 8001136:	6983      	ldr	r3, [r0, #24]
 8001138:	b90b      	cbnz	r3, 800113e <__swbuf_r+0x12>
 800113a:	f7ff fb81 	bl	8000840 <__sinit>
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <__swbuf_r+0x98>)
 8001140:	429c      	cmp	r4, r3
 8001142:	d12b      	bne.n	800119c <__swbuf_r+0x70>
 8001144:	686c      	ldr	r4, [r5, #4]
 8001146:	69a3      	ldr	r3, [r4, #24]
 8001148:	60a3      	str	r3, [r4, #8]
 800114a:	89a3      	ldrh	r3, [r4, #12]
 800114c:	071a      	lsls	r2, r3, #28
 800114e:	d52f      	bpl.n	80011b0 <__swbuf_r+0x84>
 8001150:	6923      	ldr	r3, [r4, #16]
 8001152:	b36b      	cbz	r3, 80011b0 <__swbuf_r+0x84>
 8001154:	6923      	ldr	r3, [r4, #16]
 8001156:	6820      	ldr	r0, [r4, #0]
 8001158:	1ac0      	subs	r0, r0, r3
 800115a:	6963      	ldr	r3, [r4, #20]
 800115c:	b2f6      	uxtb	r6, r6
 800115e:	4283      	cmp	r3, r0
 8001160:	4637      	mov	r7, r6
 8001162:	dc04      	bgt.n	800116e <__swbuf_r+0x42>
 8001164:	4621      	mov	r1, r4
 8001166:	4628      	mov	r0, r5
 8001168:	f000 f948 	bl	80013fc <_fflush_r>
 800116c:	bb30      	cbnz	r0, 80011bc <__swbuf_r+0x90>
 800116e:	68a3      	ldr	r3, [r4, #8]
 8001170:	3b01      	subs	r3, #1
 8001172:	60a3      	str	r3, [r4, #8]
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	6022      	str	r2, [r4, #0]
 800117a:	701e      	strb	r6, [r3, #0]
 800117c:	6963      	ldr	r3, [r4, #20]
 800117e:	3001      	adds	r0, #1
 8001180:	4283      	cmp	r3, r0
 8001182:	d004      	beq.n	800118e <__swbuf_r+0x62>
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	07db      	lsls	r3, r3, #31
 8001188:	d506      	bpl.n	8001198 <__swbuf_r+0x6c>
 800118a:	2e0a      	cmp	r6, #10
 800118c:	d104      	bne.n	8001198 <__swbuf_r+0x6c>
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	f000 f933 	bl	80013fc <_fflush_r>
 8001196:	b988      	cbnz	r0, 80011bc <__swbuf_r+0x90>
 8001198:	4638      	mov	r0, r7
 800119a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <__swbuf_r+0x9c>)
 800119e:	429c      	cmp	r4, r3
 80011a0:	d101      	bne.n	80011a6 <__swbuf_r+0x7a>
 80011a2:	68ac      	ldr	r4, [r5, #8]
 80011a4:	e7cf      	b.n	8001146 <__swbuf_r+0x1a>
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <__swbuf_r+0xa0>)
 80011a8:	429c      	cmp	r4, r3
 80011aa:	bf08      	it	eq
 80011ac:	68ec      	ldreq	r4, [r5, #12]
 80011ae:	e7ca      	b.n	8001146 <__swbuf_r+0x1a>
 80011b0:	4621      	mov	r1, r4
 80011b2:	4628      	mov	r0, r5
 80011b4:	f000 f81e 	bl	80011f4 <__swsetup_r>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d0cb      	beq.n	8001154 <__swbuf_r+0x28>
 80011bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80011c0:	e7ea      	b.n	8001198 <__swbuf_r+0x6c>
 80011c2:	bf00      	nop
 80011c4:	080016d0 	.word	0x080016d0
 80011c8:	080016f0 	.word	0x080016f0
 80011cc:	080016b0 	.word	0x080016b0

080011d0 <_write_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4d07      	ldr	r5, [pc, #28]	; (80011f0 <_write_r+0x20>)
 80011d4:	4604      	mov	r4, r0
 80011d6:	4608      	mov	r0, r1
 80011d8:	4611      	mov	r1, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	602a      	str	r2, [r5, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	f7ff f91f 	bl	8000422 <_write>
 80011e4:	1c43      	adds	r3, r0, #1
 80011e6:	d102      	bne.n	80011ee <_write_r+0x1e>
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	b103      	cbz	r3, 80011ee <_write_r+0x1e>
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	bd38      	pop	{r3, r4, r5, pc}
 80011f0:	2000009c 	.word	0x2000009c

080011f4 <__swsetup_r>:
 80011f4:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <__swsetup_r+0xcc>)
 80011f6:	b570      	push	{r4, r5, r6, lr}
 80011f8:	681d      	ldr	r5, [r3, #0]
 80011fa:	4606      	mov	r6, r0
 80011fc:	460c      	mov	r4, r1
 80011fe:	b125      	cbz	r5, 800120a <__swsetup_r+0x16>
 8001200:	69ab      	ldr	r3, [r5, #24]
 8001202:	b913      	cbnz	r3, 800120a <__swsetup_r+0x16>
 8001204:	4628      	mov	r0, r5
 8001206:	f7ff fb1b 	bl	8000840 <__sinit>
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <__swsetup_r+0xd0>)
 800120c:	429c      	cmp	r4, r3
 800120e:	d10f      	bne.n	8001230 <__swsetup_r+0x3c>
 8001210:	686c      	ldr	r4, [r5, #4]
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001218:	0719      	lsls	r1, r3, #28
 800121a:	d42c      	bmi.n	8001276 <__swsetup_r+0x82>
 800121c:	06dd      	lsls	r5, r3, #27
 800121e:	d411      	bmi.n	8001244 <__swsetup_r+0x50>
 8001220:	2309      	movs	r3, #9
 8001222:	6033      	str	r3, [r6, #0]
 8001224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001228:	81a3      	strh	r3, [r4, #12]
 800122a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800122e:	e03e      	b.n	80012ae <__swsetup_r+0xba>
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <__swsetup_r+0xd4>)
 8001232:	429c      	cmp	r4, r3
 8001234:	d101      	bne.n	800123a <__swsetup_r+0x46>
 8001236:	68ac      	ldr	r4, [r5, #8]
 8001238:	e7eb      	b.n	8001212 <__swsetup_r+0x1e>
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <__swsetup_r+0xd8>)
 800123c:	429c      	cmp	r4, r3
 800123e:	bf08      	it	eq
 8001240:	68ec      	ldreq	r4, [r5, #12]
 8001242:	e7e6      	b.n	8001212 <__swsetup_r+0x1e>
 8001244:	0758      	lsls	r0, r3, #29
 8001246:	d512      	bpl.n	800126e <__swsetup_r+0x7a>
 8001248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800124a:	b141      	cbz	r1, 800125e <__swsetup_r+0x6a>
 800124c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001250:	4299      	cmp	r1, r3
 8001252:	d002      	beq.n	800125a <__swsetup_r+0x66>
 8001254:	4630      	mov	r0, r6
 8001256:	f000 f991 	bl	800157c <_free_r>
 800125a:	2300      	movs	r3, #0
 800125c:	6363      	str	r3, [r4, #52]	; 0x34
 800125e:	89a3      	ldrh	r3, [r4, #12]
 8001260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001264:	81a3      	strh	r3, [r4, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	6063      	str	r3, [r4, #4]
 800126a:	6923      	ldr	r3, [r4, #16]
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	81a3      	strh	r3, [r4, #12]
 8001276:	6923      	ldr	r3, [r4, #16]
 8001278:	b94b      	cbnz	r3, 800128e <__swsetup_r+0x9a>
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001284:	d003      	beq.n	800128e <__swsetup_r+0x9a>
 8001286:	4621      	mov	r1, r4
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f92b 	bl	80014e4 <__smakebuf_r>
 800128e:	89a0      	ldrh	r0, [r4, #12]
 8001290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001294:	f010 0301 	ands.w	r3, r0, #1
 8001298:	d00a      	beq.n	80012b0 <__swsetup_r+0xbc>
 800129a:	2300      	movs	r3, #0
 800129c:	60a3      	str	r3, [r4, #8]
 800129e:	6963      	ldr	r3, [r4, #20]
 80012a0:	425b      	negs	r3, r3
 80012a2:	61a3      	str	r3, [r4, #24]
 80012a4:	6923      	ldr	r3, [r4, #16]
 80012a6:	b943      	cbnz	r3, 80012ba <__swsetup_r+0xc6>
 80012a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012ac:	d1ba      	bne.n	8001224 <__swsetup_r+0x30>
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	0781      	lsls	r1, r0, #30
 80012b2:	bf58      	it	pl
 80012b4:	6963      	ldrpl	r3, [r4, #20]
 80012b6:	60a3      	str	r3, [r4, #8]
 80012b8:	e7f4      	b.n	80012a4 <__swsetup_r+0xb0>
 80012ba:	2000      	movs	r0, #0
 80012bc:	e7f7      	b.n	80012ae <__swsetup_r+0xba>
 80012be:	bf00      	nop
 80012c0:	20000004 	.word	0x20000004
 80012c4:	080016d0 	.word	0x080016d0
 80012c8:	080016f0 	.word	0x080016f0
 80012cc:	080016b0 	.word	0x080016b0

080012d0 <_close_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d06      	ldr	r5, [pc, #24]	; (80012ec <_close_r+0x1c>)
 80012d4:	2300      	movs	r3, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	f7ff f8bd 	bl	800045a <_close>
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	d102      	bne.n	80012ea <_close_r+0x1a>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	b103      	cbz	r3, 80012ea <_close_r+0x1a>
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	2000009c 	.word	0x2000009c

080012f0 <__sflush_r>:
 80012f0:	898a      	ldrh	r2, [r1, #12]
 80012f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f6:	4605      	mov	r5, r0
 80012f8:	0710      	lsls	r0, r2, #28
 80012fa:	460c      	mov	r4, r1
 80012fc:	d458      	bmi.n	80013b0 <__sflush_r+0xc0>
 80012fe:	684b      	ldr	r3, [r1, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dc05      	bgt.n	8001310 <__sflush_r+0x20>
 8001304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	dc02      	bgt.n	8001310 <__sflush_r+0x20>
 800130a:	2000      	movs	r0, #0
 800130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0f9      	beq.n	800130a <__sflush_r+0x1a>
 8001316:	2300      	movs	r3, #0
 8001318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800131c:	682f      	ldr	r7, [r5, #0]
 800131e:	602b      	str	r3, [r5, #0]
 8001320:	d032      	beq.n	8001388 <__sflush_r+0x98>
 8001322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	075a      	lsls	r2, r3, #29
 8001328:	d505      	bpl.n	8001336 <__sflush_r+0x46>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	1ac0      	subs	r0, r0, r3
 800132e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001330:	b10b      	cbz	r3, 8001336 <__sflush_r+0x46>
 8001332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	2300      	movs	r3, #0
 8001338:	4602      	mov	r2, r0
 800133a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800133c:	6a21      	ldr	r1, [r4, #32]
 800133e:	4628      	mov	r0, r5
 8001340:	47b0      	blx	r6
 8001342:	1c43      	adds	r3, r0, #1
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	d106      	bne.n	8001356 <__sflush_r+0x66>
 8001348:	6829      	ldr	r1, [r5, #0]
 800134a:	291d      	cmp	r1, #29
 800134c:	d82c      	bhi.n	80013a8 <__sflush_r+0xb8>
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <__sflush_r+0x108>)
 8001350:	40ca      	lsrs	r2, r1
 8001352:	07d6      	lsls	r6, r2, #31
 8001354:	d528      	bpl.n	80013a8 <__sflush_r+0xb8>
 8001356:	2200      	movs	r2, #0
 8001358:	6062      	str	r2, [r4, #4]
 800135a:	04d9      	lsls	r1, r3, #19
 800135c:	6922      	ldr	r2, [r4, #16]
 800135e:	6022      	str	r2, [r4, #0]
 8001360:	d504      	bpl.n	800136c <__sflush_r+0x7c>
 8001362:	1c42      	adds	r2, r0, #1
 8001364:	d101      	bne.n	800136a <__sflush_r+0x7a>
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	b903      	cbnz	r3, 800136c <__sflush_r+0x7c>
 800136a:	6560      	str	r0, [r4, #84]	; 0x54
 800136c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136e:	602f      	str	r7, [r5, #0]
 8001370:	2900      	cmp	r1, #0
 8001372:	d0ca      	beq.n	800130a <__sflush_r+0x1a>
 8001374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001378:	4299      	cmp	r1, r3
 800137a:	d002      	beq.n	8001382 <__sflush_r+0x92>
 800137c:	4628      	mov	r0, r5
 800137e:	f000 f8fd 	bl	800157c <_free_r>
 8001382:	2000      	movs	r0, #0
 8001384:	6360      	str	r0, [r4, #52]	; 0x34
 8001386:	e7c1      	b.n	800130c <__sflush_r+0x1c>
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	2301      	movs	r3, #1
 800138c:	4628      	mov	r0, r5
 800138e:	47b0      	blx	r6
 8001390:	1c41      	adds	r1, r0, #1
 8001392:	d1c7      	bne.n	8001324 <__sflush_r+0x34>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0c4      	beq.n	8001324 <__sflush_r+0x34>
 800139a:	2b1d      	cmp	r3, #29
 800139c:	d001      	beq.n	80013a2 <__sflush_r+0xb2>
 800139e:	2b16      	cmp	r3, #22
 80013a0:	d101      	bne.n	80013a6 <__sflush_r+0xb6>
 80013a2:	602f      	str	r7, [r5, #0]
 80013a4:	e7b1      	b.n	800130a <__sflush_r+0x1a>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	e7ad      	b.n	800130c <__sflush_r+0x1c>
 80013b0:	690f      	ldr	r7, [r1, #16]
 80013b2:	2f00      	cmp	r7, #0
 80013b4:	d0a9      	beq.n	800130a <__sflush_r+0x1a>
 80013b6:	0793      	lsls	r3, r2, #30
 80013b8:	680e      	ldr	r6, [r1, #0]
 80013ba:	bf08      	it	eq
 80013bc:	694b      	ldreq	r3, [r1, #20]
 80013be:	600f      	str	r7, [r1, #0]
 80013c0:	bf18      	it	ne
 80013c2:	2300      	movne	r3, #0
 80013c4:	eba6 0807 	sub.w	r8, r6, r7
 80013c8:	608b      	str	r3, [r1, #8]
 80013ca:	f1b8 0f00 	cmp.w	r8, #0
 80013ce:	dd9c      	ble.n	800130a <__sflush_r+0x1a>
 80013d0:	6a21      	ldr	r1, [r4, #32]
 80013d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d4:	4643      	mov	r3, r8
 80013d6:	463a      	mov	r2, r7
 80013d8:	4628      	mov	r0, r5
 80013da:	47b0      	blx	r6
 80013dc:	2800      	cmp	r0, #0
 80013de:	dc06      	bgt.n	80013ee <__sflush_r+0xfe>
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	e78e      	b.n	800130c <__sflush_r+0x1c>
 80013ee:	4407      	add	r7, r0
 80013f0:	eba8 0800 	sub.w	r8, r8, r0
 80013f4:	e7e9      	b.n	80013ca <__sflush_r+0xda>
 80013f6:	bf00      	nop
 80013f8:	20400001 	.word	0x20400001

080013fc <_fflush_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	690b      	ldr	r3, [r1, #16]
 8001400:	4605      	mov	r5, r0
 8001402:	460c      	mov	r4, r1
 8001404:	b913      	cbnz	r3, 800140c <_fflush_r+0x10>
 8001406:	2500      	movs	r5, #0
 8001408:	4628      	mov	r0, r5
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	b118      	cbz	r0, 8001416 <_fflush_r+0x1a>
 800140e:	6983      	ldr	r3, [r0, #24]
 8001410:	b90b      	cbnz	r3, 8001416 <_fflush_r+0x1a>
 8001412:	f7ff fa15 	bl	8000840 <__sinit>
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <_fflush_r+0x6c>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d11b      	bne.n	8001454 <_fflush_r+0x58>
 800141c:	686c      	ldr	r4, [r5, #4]
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ef      	beq.n	8001406 <_fflush_r+0xa>
 8001426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001428:	07d0      	lsls	r0, r2, #31
 800142a:	d404      	bmi.n	8001436 <_fflush_r+0x3a>
 800142c:	0599      	lsls	r1, r3, #22
 800142e:	d402      	bmi.n	8001436 <_fflush_r+0x3a>
 8001430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001432:	f7ff faa3 	bl	800097c <__retarget_lock_acquire_recursive>
 8001436:	4628      	mov	r0, r5
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff ff59 	bl	80012f0 <__sflush_r>
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	07da      	lsls	r2, r3, #31
 8001442:	4605      	mov	r5, r0
 8001444:	d4e0      	bmi.n	8001408 <_fflush_r+0xc>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d4dd      	bmi.n	8001408 <_fflush_r+0xc>
 800144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144e:	f7ff fa96 	bl	800097e <__retarget_lock_release_recursive>
 8001452:	e7d9      	b.n	8001408 <_fflush_r+0xc>
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <_fflush_r+0x70>)
 8001456:	429c      	cmp	r4, r3
 8001458:	d101      	bne.n	800145e <_fflush_r+0x62>
 800145a:	68ac      	ldr	r4, [r5, #8]
 800145c:	e7df      	b.n	800141e <_fflush_r+0x22>
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <_fflush_r+0x74>)
 8001460:	429c      	cmp	r4, r3
 8001462:	bf08      	it	eq
 8001464:	68ec      	ldreq	r4, [r5, #12]
 8001466:	e7da      	b.n	800141e <_fflush_r+0x22>
 8001468:	080016d0 	.word	0x080016d0
 800146c:	080016f0 	.word	0x080016f0
 8001470:	080016b0 	.word	0x080016b0

08001474 <_lseek_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4d07      	ldr	r5, [pc, #28]	; (8001494 <_lseek_r+0x20>)
 8001478:	4604      	mov	r4, r0
 800147a:	4608      	mov	r0, r1
 800147c:	4611      	mov	r1, r2
 800147e:	2200      	movs	r2, #0
 8001480:	602a      	str	r2, [r5, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	f7ff f810 	bl	80004a8 <_lseek>
 8001488:	1c43      	adds	r3, r0, #1
 800148a:	d102      	bne.n	8001492 <_lseek_r+0x1e>
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	b103      	cbz	r3, 8001492 <_lseek_r+0x1e>
 8001490:	6023      	str	r3, [r4, #0]
 8001492:	bd38      	pop	{r3, r4, r5, pc}
 8001494:	2000009c 	.word	0x2000009c

08001498 <__swhatbuf_r>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	460e      	mov	r6, r1
 800149c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014a0:	2900      	cmp	r1, #0
 80014a2:	b096      	sub	sp, #88	; 0x58
 80014a4:	4614      	mov	r4, r2
 80014a6:	461d      	mov	r5, r3
 80014a8:	da08      	bge.n	80014bc <__swhatbuf_r+0x24>
 80014aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	602a      	str	r2, [r5, #0]
 80014b2:	061a      	lsls	r2, r3, #24
 80014b4:	d410      	bmi.n	80014d8 <__swhatbuf_r+0x40>
 80014b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ba:	e00e      	b.n	80014da <__swhatbuf_r+0x42>
 80014bc:	466a      	mov	r2, sp
 80014be:	f000 f8bb 	bl	8001638 <_fstat_r>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	dbf1      	blt.n	80014aa <__swhatbuf_r+0x12>
 80014c6:	9a01      	ldr	r2, [sp, #4]
 80014c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80014cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80014d0:	425a      	negs	r2, r3
 80014d2:	415a      	adcs	r2, r3
 80014d4:	602a      	str	r2, [r5, #0]
 80014d6:	e7ee      	b.n	80014b6 <__swhatbuf_r+0x1e>
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	2000      	movs	r0, #0
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	b016      	add	sp, #88	; 0x58
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080014e4 <__smakebuf_r>:
 80014e4:	898b      	ldrh	r3, [r1, #12]
 80014e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014e8:	079d      	lsls	r5, r3, #30
 80014ea:	4606      	mov	r6, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	d507      	bpl.n	8001500 <__smakebuf_r+0x1c>
 80014f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	6123      	str	r3, [r4, #16]
 80014f8:	2301      	movs	r3, #1
 80014fa:	6163      	str	r3, [r4, #20]
 80014fc:	b002      	add	sp, #8
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	ab01      	add	r3, sp, #4
 8001502:	466a      	mov	r2, sp
 8001504:	f7ff ffc8 	bl	8001498 <__swhatbuf_r>
 8001508:	9900      	ldr	r1, [sp, #0]
 800150a:	4605      	mov	r5, r0
 800150c:	4630      	mov	r0, r6
 800150e:	f7ff fa57 	bl	80009c0 <_malloc_r>
 8001512:	b948      	cbnz	r0, 8001528 <__smakebuf_r+0x44>
 8001514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001518:	059a      	lsls	r2, r3, #22
 800151a:	d4ef      	bmi.n	80014fc <__smakebuf_r+0x18>
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	81a3      	strh	r3, [r4, #12]
 8001526:	e7e3      	b.n	80014f0 <__smakebuf_r+0xc>
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <__smakebuf_r+0x7c>)
 800152a:	62b3      	str	r3, [r6, #40]	; 0x28
 800152c:	89a3      	ldrh	r3, [r4, #12]
 800152e:	6020      	str	r0, [r4, #0]
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	81a3      	strh	r3, [r4, #12]
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	6163      	str	r3, [r4, #20]
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	6120      	str	r0, [r4, #16]
 800153e:	b15b      	cbz	r3, 8001558 <__smakebuf_r+0x74>
 8001540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f889 	bl	800165c <_isatty_r>
 800154a:	b128      	cbz	r0, 8001558 <__smakebuf_r+0x74>
 800154c:	89a3      	ldrh	r3, [r4, #12]
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	81a3      	strh	r3, [r4, #12]
 8001558:	89a0      	ldrh	r0, [r4, #12]
 800155a:	4305      	orrs	r5, r0
 800155c:	81a5      	strh	r5, [r4, #12]
 800155e:	e7cd      	b.n	80014fc <__smakebuf_r+0x18>
 8001560:	080007d9 	.word	0x080007d9

08001564 <__malloc_lock>:
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <__malloc_lock+0x8>)
 8001566:	f7ff ba09 	b.w	800097c <__retarget_lock_acquire_recursive>
 800156a:	bf00      	nop
 800156c:	20000090 	.word	0x20000090

08001570 <__malloc_unlock>:
 8001570:	4801      	ldr	r0, [pc, #4]	; (8001578 <__malloc_unlock+0x8>)
 8001572:	f7ff ba04 	b.w	800097e <__retarget_lock_release_recursive>
 8001576:	bf00      	nop
 8001578:	20000090 	.word	0x20000090

0800157c <_free_r>:
 800157c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800157e:	2900      	cmp	r1, #0
 8001580:	d044      	beq.n	800160c <_free_r+0x90>
 8001582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001586:	9001      	str	r0, [sp, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f1a1 0404 	sub.w	r4, r1, #4
 800158e:	bfb8      	it	lt
 8001590:	18e4      	addlt	r4, r4, r3
 8001592:	f7ff ffe7 	bl	8001564 <__malloc_lock>
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <_free_r+0x94>)
 8001598:	9801      	ldr	r0, [sp, #4]
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	b933      	cbnz	r3, 80015ac <_free_r+0x30>
 800159e:	6063      	str	r3, [r4, #4]
 80015a0:	6014      	str	r4, [r2, #0]
 80015a2:	b003      	add	sp, #12
 80015a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015a8:	f7ff bfe2 	b.w	8001570 <__malloc_unlock>
 80015ac:	42a3      	cmp	r3, r4
 80015ae:	d908      	bls.n	80015c2 <_free_r+0x46>
 80015b0:	6825      	ldr	r5, [r4, #0]
 80015b2:	1961      	adds	r1, r4, r5
 80015b4:	428b      	cmp	r3, r1
 80015b6:	bf01      	itttt	eq
 80015b8:	6819      	ldreq	r1, [r3, #0]
 80015ba:	685b      	ldreq	r3, [r3, #4]
 80015bc:	1949      	addeq	r1, r1, r5
 80015be:	6021      	streq	r1, [r4, #0]
 80015c0:	e7ed      	b.n	800159e <_free_r+0x22>
 80015c2:	461a      	mov	r2, r3
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b10b      	cbz	r3, 80015cc <_free_r+0x50>
 80015c8:	42a3      	cmp	r3, r4
 80015ca:	d9fa      	bls.n	80015c2 <_free_r+0x46>
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	1855      	adds	r5, r2, r1
 80015d0:	42a5      	cmp	r5, r4
 80015d2:	d10b      	bne.n	80015ec <_free_r+0x70>
 80015d4:	6824      	ldr	r4, [r4, #0]
 80015d6:	4421      	add	r1, r4
 80015d8:	1854      	adds	r4, r2, r1
 80015da:	42a3      	cmp	r3, r4
 80015dc:	6011      	str	r1, [r2, #0]
 80015de:	d1e0      	bne.n	80015a2 <_free_r+0x26>
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	6053      	str	r3, [r2, #4]
 80015e6:	4421      	add	r1, r4
 80015e8:	6011      	str	r1, [r2, #0]
 80015ea:	e7da      	b.n	80015a2 <_free_r+0x26>
 80015ec:	d902      	bls.n	80015f4 <_free_r+0x78>
 80015ee:	230c      	movs	r3, #12
 80015f0:	6003      	str	r3, [r0, #0]
 80015f2:	e7d6      	b.n	80015a2 <_free_r+0x26>
 80015f4:	6825      	ldr	r5, [r4, #0]
 80015f6:	1961      	adds	r1, r4, r5
 80015f8:	428b      	cmp	r3, r1
 80015fa:	bf04      	itt	eq
 80015fc:	6819      	ldreq	r1, [r3, #0]
 80015fe:	685b      	ldreq	r3, [r3, #4]
 8001600:	6063      	str	r3, [r4, #4]
 8001602:	bf04      	itt	eq
 8001604:	1949      	addeq	r1, r1, r5
 8001606:	6021      	streq	r1, [r4, #0]
 8001608:	6054      	str	r4, [r2, #4]
 800160a:	e7ca      	b.n	80015a2 <_free_r+0x26>
 800160c:	b003      	add	sp, #12
 800160e:	bd30      	pop	{r4, r5, pc}
 8001610:	20000094 	.word	0x20000094

08001614 <_read_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4d07      	ldr	r5, [pc, #28]	; (8001634 <_read_r+0x20>)
 8001618:	4604      	mov	r4, r0
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	2200      	movs	r2, #0
 8001620:	602a      	str	r2, [r5, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	f7fe fee0 	bl	80003e8 <_read>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	d102      	bne.n	8001632 <_read_r+0x1e>
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	b103      	cbz	r3, 8001632 <_read_r+0x1e>
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	2000009c 	.word	0x2000009c

08001638 <_fstat_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d07      	ldr	r5, [pc, #28]	; (8001658 <_fstat_r+0x20>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	f7fe ff14 	bl	8000472 <_fstat>
 800164a:	1c43      	adds	r3, r0, #1
 800164c:	d102      	bne.n	8001654 <_fstat_r+0x1c>
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	b103      	cbz	r3, 8001654 <_fstat_r+0x1c>
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	bd38      	pop	{r3, r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	2000009c 	.word	0x2000009c

0800165c <_isatty_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d06      	ldr	r5, [pc, #24]	; (8001678 <_isatty_r+0x1c>)
 8001660:	2300      	movs	r3, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	f7fe ff13 	bl	8000492 <_isatty>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_isatty_r+0x1a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_isatty_r+0x1a>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	2000009c 	.word	0x2000009c

0800167c <_init>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr

08001688 <_fini>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr
