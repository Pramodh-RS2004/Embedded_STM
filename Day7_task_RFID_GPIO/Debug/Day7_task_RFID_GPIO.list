
Day7_task_RFID_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004244  08004244  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800424c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200000d4  08004320  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004320  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a59d  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3f  00000000  00000000  0002a6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002298b  00000000  00000000  0002d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cab1  00000000  00000000  0004ff73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca5cc  00000000  00000000  0005ca24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  00127040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040a4 	.word	0x080040a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	080040a4 	.word	0x080040a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <lcd_write_i2c>:
extern void delay(uint32_t ms);
#define SLAVE_ADDRESS_LCD (0x27) // change this according to ur setup


void lcd_write_i2c(char saddr,uint8_t *buffer, uint8_t length)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
while (I2C1->SR2 & I2C_SR2_BUSY);           //wait until bus not busy
 80005c4:	bf00      	nop
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <lcd_write_i2c+0x9c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f9      	bne.n	80005c6 <lcd_write_i2c+0x12>
I2C1->CR1 |= I2C_CR1_START;                   //generate start
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <lcd_write_i2c+0x9c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <lcd_write_i2c+0x9c>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6013      	str	r3, [r2, #0]
while (!(I2C1->SR1 & I2C_SR1_SB)){;}					//wait until start is generated
 80005de:	bf00      	nop
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <lcd_write_i2c+0x9c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f9      	beq.n	80005e0 <lcd_write_i2c+0x2c>
volatile int Temp;
I2C1->DR = saddr<< 1;                 	 			// Send slave address
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	005a      	lsls	r2, r3, #1
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <lcd_write_i2c+0x9c>)
 80005f2:	611a      	str	r2, [r3, #16]
while (!(I2C1->SR1 & I2C_SR1_ADDR)){;}        //wait until address flag is set
 80005f4:	bf00      	nop
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <lcd_write_i2c+0x9c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <lcd_write_i2c+0x42>
Temp = I2C1->SR2; 														//Clear SR2
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <lcd_write_i2c+0x9c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	60bb      	str	r3, [r7, #8]
//sending the data
for (uint8_t i=0;i<length;i++)
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e00f      	b.n	800062e <lcd_write_i2c+0x7a>
 {
 I2C1->DR=buffer[i]; 													//filling buffer with command or data
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <lcd_write_i2c+0x9c>)
 8000618:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 800061a:	bf00      	nop
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <lcd_write_i2c+0x9c>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <lcd_write_i2c+0x68>
for (uint8_t i=0;i<length;i++)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	7bfa      	ldrb	r2, [r7, #15]
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	429a      	cmp	r2, r3
 8000634:	d3eb      	bcc.n	800060e <lcd_write_i2c+0x5a>
 }

I2C1->CR1 |= I2C_CR1_STOP;										//wait until transfer finished
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <lcd_write_i2c+0x9c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <lcd_write_i2c+0x9c>)
 800063c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000640:	6013      	str	r3, [r2, #0]

}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40005400 	.word	0x40005400

08000654 <lcd_send_cmd>:


void lcd_send_cmd (char cmd)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f043 030c 	orr.w	r3, r3, #12
 8000672:	b2db      	uxtb	r3, r3
 8000674:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	b2db      	uxtb	r3, r3
 800067e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	f043 030c 	orr.w	r3, r3, #12
 8000686:	b2db      	uxtb	r3, r3
 8000688:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	b2db      	uxtb	r3, r3
 8000692:	72fb      	strb	r3, [r7, #11]
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2204      	movs	r2, #4
 800069a:	4619      	mov	r1, r3
 800069c:	2027      	movs	r0, #39	; 0x27
 800069e:	f7ff ff89 	bl	80005b4 <lcd_write_i2c>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_send_data>:

void lcd_send_data (char data)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f023 030f 	bic.w	r3, r3, #15
 80006ba:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	f043 030d 	orr.w	r3, r3, #13
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f043 0309 	orr.w	r3, r3, #9
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	f043 030d 	orr.w	r3, r3, #13
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	f043 0309 	orr.w	r3, r3, #9
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72fb      	strb	r3, [r7, #11]
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2204      	movs	r2, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	2027      	movs	r0, #39	; 0x27
 80006f4:	f7ff ff5e 	bl	80005b4 <lcd_write_i2c>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <setCursor>:

void setCursor(int a, int b)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	int i=0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
	switch(b){
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d81b      	bhi.n	800074c <setCursor+0x4c>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <setCursor+0x1c>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000735 	.word	0x08000735
 8000724:	0800073d 	.word	0x0800073d
 8000728:	08000745 	.word	0x08000745
	case 0:lcd_send_cmd(0x80);break;
 800072c:	2080      	movs	r0, #128	; 0x80
 800072e:	f7ff ff91 	bl	8000654 <lcd_send_cmd>
 8000732:	e00b      	b.n	800074c <setCursor+0x4c>
	case 1:lcd_send_cmd(0xC0);break;
 8000734:	20c0      	movs	r0, #192	; 0xc0
 8000736:	f7ff ff8d 	bl	8000654 <lcd_send_cmd>
 800073a:	e007      	b.n	800074c <setCursor+0x4c>
	case 2:lcd_send_cmd(0x94);break;
 800073c:	2094      	movs	r0, #148	; 0x94
 800073e:	f7ff ff89 	bl	8000654 <lcd_send_cmd>
 8000742:	e003      	b.n	800074c <setCursor+0x4c>
	case 3:lcd_send_cmd(0xd4);break;}
 8000744:	20d4      	movs	r0, #212	; 0xd4
 8000746:	f7ff ff85 	bl	8000654 <lcd_send_cmd>
 800074a:	bf00      	nop
	for(i=0;i<a;i++)
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e005      	b.n	800075e <setCursor+0x5e>
	lcd_send_cmd(0x14);
 8000752:	2014      	movs	r0, #20
 8000754:	f7ff ff7e 	bl	8000654 <lcd_send_cmd>
	for(i=0;i<a;i++)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	dbf5      	blt.n	8000752 <setCursor+0x52>
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <lcd_send_string>:


void lcd_send_string (char *str)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000778:	e006      	b.n	8000788 <lcd_send_string+0x18>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff91 	bl	80006aa <lcd_send_data>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f4      	bne.n	800077a <lcd_send_string+0xa>
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <lcd_init>:
void lcd_init (void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
	i2c_init();
 800079e:	f000 fb93 	bl	8000ec8 <i2c_init>
	// 4 bit initialisation
	delay(50);  // wait for >40ms
 80007a2:	2032      	movs	r0, #50	; 0x32
 80007a4:	f000 fb7c 	bl	8000ea0 <delay>
	lcd_send_cmd (0x3);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f7ff ff53 	bl	8000654 <lcd_send_cmd>
	delay(5);  // wait for >4.1ms
 80007ae:	2005      	movs	r0, #5
 80007b0:	f000 fb76 	bl	8000ea0 <delay>
	lcd_send_cmd (0x3);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f7ff ff4d 	bl	8000654 <lcd_send_cmd>
	delay(1);  // wait for >100us
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fb70 	bl	8000ea0 <delay>
	lcd_send_cmd (0x3);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f7ff ff47 	bl	8000654 <lcd_send_cmd>
	delay(10);
 80007c6:	200a      	movs	r0, #10
 80007c8:	f000 fb6a 	bl	8000ea0 <delay>
	lcd_send_cmd (0x2);  // 4bit mode
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff ff41 	bl	8000654 <lcd_send_cmd>
	delay(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f000 fb64 	bl	8000ea0 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007d8:	2028      	movs	r0, #40	; 0x28
 80007da:	f7ff ff3b 	bl	8000654 <lcd_send_cmd>
	delay(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fb5e 	bl	8000ea0 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80007e4:	2008      	movs	r0, #8
 80007e6:	f7ff ff35 	bl	8000654 <lcd_send_cmd>
	delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fb58 	bl	8000ea0 <delay>
	lcd_send_cmd (0x01);  // clear display
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff2f 	bl	8000654 <lcd_send_cmd>
	delay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 fb52 	bl	8000ea0 <delay>
	delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fb4f 	bl	8000ea0 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff ff26 	bl	8000654 <lcd_send_cmd>
	delay(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fb49 	bl	8000ea0 <delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800080e:	200c      	movs	r0, #12
 8000810:	f7ff ff20 	bl	8000654 <lcd_send_cmd>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <lcd_clear>:

void lcd_clear (void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	#define LCD_CLEARDISPLAY 0x01
	lcd_send_cmd(LCD_CLEARDISPLAY);
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff19 	bl	8000654 <lcd_send_cmd>
	delay(100);
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f000 fb3c 	bl	8000ea0 <delay>
	
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d006      	beq.n	800084a <spi_cs_rfid_write+0x1e>
	  {
	    GPIOB->ODR |= (1UL << 0);
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <spi_cs_rfid_write+0x38>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <spi_cs_rfid_write+0x38>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6153      	str	r3, [r2, #20]
	  }
	  else
	  {
	    GPIOB->ODR &= ~(1UL << 0);
	  }
}
 8000848:	e005      	b.n	8000856 <spi_cs_rfid_write+0x2a>
	    GPIOB->ODR &= ~(1UL << 0);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <spi_cs_rfid_write+0x38>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <spi_cs_rfid_write+0x38>)
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	6153      	str	r3, [r2, #20]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40020400 	.word	0x40020400

08000868 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ffda 	bl	800082c <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	b25b      	sxtb	r3, r3
 800087e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000882:	b25b      	sxtb	r3, r3
 8000884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000888:	b25b      	sxtb	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit(&reg, 1);
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fde2 	bl	800145c <SPI_Transmit>
  uint8_t dataRd=0;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  SPI_Receive(&dataRd, 1);
 800089c:	f107 030f 	add.w	r3, r7, #15
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fe62 	bl	800156c <SPI_Receive>
  spi_cs_rfid_write(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff ffbf 	bl	800082c <spi_cs_rfid_write>
  return dataRd;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ffaf 	bl	800082c <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	733b      	strb	r3, [r7, #12]
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	737b      	strb	r3, [r7, #13]
  SPI_Transmit(txData, 2);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fdb8 	bl	800145c <SPI_Transmit>
  spi_cs_rfid_write(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff9d 	bl	800082c <spi_cs_rfid_write>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	460a      	mov	r2, r1
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	4613      	mov	r3, r2
 8000908:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffab 	bl	8000868 <rc522_regRead8>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	4313      	orrs	r3, r2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffc9 	bl	80008b8 <rc522_regWrite8>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	460a      	mov	r2, r1
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	4613      	mov	r3, r2
 800093c:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff91 	bl	8000868 <rc522_regRead8>
 8000946:	4603      	mov	r3, r0
 8000948:	b25a      	sxtb	r2, r3
 800094a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800094e:	43db      	mvns	r3, r3
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4013      	ands	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ffab 	bl	80008b8 <rc522_regWrite8>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 800096e:	210f      	movs	r1, #15
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ffa1 	bl	80008b8 <rc522_regWrite8>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}

0800097a <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8000980:	2014      	movs	r0, #20
 8000982:	f7ff ff71 	bl	8000868 <rc522_regRead8>
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8000994:	2103      	movs	r1, #3
 8000996:	2014      	movs	r0, #20
 8000998:	f7ff ffaf 	bl	80008fa <rc522_setBit>
  }
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  bool status=false;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	2026      	movs	r0, #38	; 0x26
 80009b4:	f000 f811 	bl	80009da <rc522_request>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f91e 	bl	8000c04 <rc522_antiColl>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 80009cc:	f000 f957 	bl	8000c7e <rc522_halt>

    return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af02      	add	r7, sp, #8
 80009e0:	4603      	mov	r3, r0
 80009e2:	6039      	str	r1, [r7, #0]
 80009e4:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 80009ea:	2107      	movs	r1, #7
 80009ec:	200d      	movs	r0, #13
 80009ee:	f7ff ff63 	bl	80008b8 <rc522_regWrite8>
  tagType[0] = reqMode;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	6839      	ldr	r1, [r7, #0]
 8000a04:	200c      	movs	r0, #12
 8000a06:	f000 f813 	bl	8000a30 <rc522_toCard>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <rc522_request+0x46>
 8000a1a:	89bb      	ldrh	r3, [r7, #12]
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	d001      	beq.n	8000a24 <rc522_request+0x4a>
    status = false;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8000a42:	2300      	movs	r3, #0
 8000a44:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b0c      	cmp	r3, #12
 8000a52:	d006      	beq.n	8000a62 <rc522_toCard+0x32>
 8000a54:	2b0e      	cmp	r3, #14
 8000a56:	d109      	bne.n	8000a6c <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	777b      	strb	r3, [r7, #29]
      break;
 8000a60:	e005      	b.n	8000a6e <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 8000a62:	2377      	movs	r3, #119	; 0x77
 8000a64:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 8000a66:	2330      	movs	r3, #48	; 0x30
 8000a68:	777b      	strb	r3, [r7, #29]
      break;
 8000a6a:	e000      	b.n	8000a6e <rc522_toCard+0x3e>
    }
    default:
      break;
 8000a6c:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000a6e:	7fbb      	ldrb	r3, [r7, #30]
 8000a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff ff1d 	bl	80008b8 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	2004      	movs	r0, #4
 8000a82:	f7ff ff54 	bl	800092e <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	200a      	movs	r0, #10
 8000a8a:	f7ff ff36 	bl	80008fa <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ff11 	bl	80008b8 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	837b      	strh	r3, [r7, #26]
 8000a9a:	e00a      	b.n	8000ab2 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000a9c:	8b7b      	ldrh	r3, [r7, #26]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	f7ff ff06 	bl	80008b8 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8000aac:	8b7b      	ldrh	r3, [r7, #26]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	837b      	strh	r3, [r7, #26]
 8000ab2:	7bbb      	ldrb	r3, [r7, #14]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	8b7a      	ldrh	r2, [r7, #26]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3ef      	bcc.n	8000a9c <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fef9 	bl	80008b8 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2b0c      	cmp	r3, #12
 8000aca:	d103      	bne.n	8000ad4 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	200d      	movs	r0, #13
 8000ad0:	f7ff ff13 	bl	80008fa <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f7ff fec5 	bl	8000868 <rc522_regRead8>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	773b      	strb	r3, [r7, #28]
    i--;
 8000ae2:	8b7b      	ldrh	r3, [r7, #26]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000ae8:	8b7b      	ldrh	r3, [r7, #26]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00a      	beq.n	8000b04 <rc522_toCard+0xd4>
 8000aee:	7f3b      	ldrb	r3, [r7, #28]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <rc522_toCard+0xd4>
 8000af8:	7f3a      	ldrb	r2, [r7, #28]
 8000afa:	7f7b      	ldrb	r3, [r7, #29]
 8000afc:	4013      	ands	r3, r2
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e9      	beq.n	8000ad8 <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	200d      	movs	r0, #13
 8000b08:	f7ff ff11 	bl	800092e <rc522_clearBit>

  if (i != 0)  {
 8000b0c:	8b7b      	ldrh	r3, [r7, #26]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d06d      	beq.n	8000bee <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8000b12:	2006      	movs	r0, #6
 8000b14:	f7ff fea8 	bl	8000868 <rc522_regRead8>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f003 031b 	and.w	r3, r3, #27
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d160      	bne.n	8000be4 <rc522_toCard+0x1b4>
      status = true;
 8000b22:	2301      	movs	r3, #1
 8000b24:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8000b26:	7f3a      	ldrb	r2, [r7, #28]
 8000b28:	7fbb      	ldrb	r3, [r7, #30]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <rc522_toCard+0x10a>
        status = false;
 8000b36:	2300      	movs	r3, #0
 8000b38:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b0c      	cmp	r3, #12
 8000b3e:	d156      	bne.n	8000bee <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f7ff fe91 	bl	8000868 <rc522_regRead8>
 8000b46:	4603      	mov	r3, r0
 8000b48:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8000b4e:	200c      	movs	r0, #12
 8000b50:	f7ff fe8a 	bl	8000868 <rc522_regRead8>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 8000b5c:	7e3b      	ldrb	r3, [r7, #24]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00b      	beq.n	8000b7a <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 8000b62:	7f3b      	ldrb	r3, [r7, #28]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	7e3b      	ldrb	r3, [r7, #24]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	e005      	b.n	8000b86 <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 8000b7a:	7f3b      	ldrb	r3, [r7, #28]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <rc522_toCard+0x160>
          n = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 8000b90:	7f3b      	ldrb	r3, [r7, #28]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d901      	bls.n	8000b9a <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 8000b96:	2310      	movs	r3, #16
 8000b98:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	837b      	strh	r3, [r7, #26]
 8000b9e:	e014      	b.n	8000bca <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8000ba0:	2009      	movs	r0, #9
 8000ba2:	f7ff fe61 	bl	8000868 <rc522_regRead8>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 8000baa:	7e7b      	ldrb	r3, [r7, #25]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d104      	bne.n	8000bba <rc522_toCard+0x18a>
            printf("%02x ", d);
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <rc522_toCard+0x1c8>)
 8000bb6:	f002 fa5d 	bl	8003074 <iprintf>
          backData[i] = d;
 8000bba:	8b7b      	ldrh	r3, [r7, #26]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	7dfa      	ldrb	r2, [r7, #23]
 8000bc2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8000bc4:	8b7b      	ldrh	r3, [r7, #26]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	837b      	strh	r3, [r7, #26]
 8000bca:	7f3b      	ldrb	r3, [r7, #28]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	8b7a      	ldrh	r2, [r7, #26]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3e5      	bcc.n	8000ba0 <rc522_toCard+0x170>
        }
        if (l==4)
 8000bd4:	7e7b      	ldrb	r3, [r7, #25]
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d102      	bne.n	8000be0 <rc522_toCard+0x1b0>
          printf("\r\n");
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <rc522_toCard+0x1cc>)
 8000bdc:	f002 fad0 	bl	8003180 <puts>
        return status;
 8000be0:	7ffb      	ldrb	r3, [r7, #31]
 8000be2:	e005      	b.n	8000bf0 <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <rc522_toCard+0x1d0>)
 8000be6:	f002 facb 	bl	8003180 <puts>
      status = false;
 8000bea:	2300      	movs	r3, #0
 8000bec:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8000bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	080040bc 	.word	0x080040bc
 8000bfc:	080040c4 	.word	0x080040c4
 8000c00:	080040c8 	.word	0x080040c8

08000c04 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8000c10:	2100      	movs	r1, #0
 8000c12:	200d      	movs	r0, #13
 8000c14:	f7ff fe50 	bl	80008b8 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2293      	movs	r2, #147	; 0x93
 8000c1c:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	2220      	movs	r2, #32
 8000c24:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000c26:	f107 030a 	add.w	r3, r7, #10
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff fefc 	bl	8000a30 <rc522_toCard>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d018      	beq.n	8000c74 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]
 8000c46:	e009      	b.n	8000c5c <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	7b7b      	ldrb	r3, [r7, #13]
 8000c52:	4053      	eors	r3, r2
 8000c54:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	73bb      	strb	r3, [r7, #14]
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d9f2      	bls.n	8000c48 <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	7b7a      	ldrb	r2, [r7, #13]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d001      	beq.n	8000c74 <rc522_antiColl+0x70>
      status = false;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <rc522_halt>:

void rc522_halt(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8000c84:	2350      	movs	r3, #80	; 0x50
 8000c86:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	1c9a      	adds	r2, r3, #2
 8000c90:	463b      	mov	r3, r7
 8000c92:	2102      	movs	r1, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f80d 	bl	8000cb4 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000c9a:	463a      	mov	r2, r7
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	1dbb      	adds	r3, r7, #6
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	200c      	movs	r0, #12
 8000ca8:	f7ff fec2 	bl	8000a30 <rc522_toCard>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	2005      	movs	r0, #5
 8000cc6:	f7ff fe32 	bl	800092e <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f7ff fe14 	bl	80008fa <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	75fb      	strb	r3, [r7, #23]
 8000cd6:	e00a      	b.n	8000cee <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2009      	movs	r0, #9
 8000ce4:	f7ff fde8 	bl	80008b8 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	3301      	adds	r3, #1
 8000cec:	75fb      	strb	r3, [r7, #23]
 8000cee:	7dfa      	ldrb	r2, [r7, #23]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3f0      	bcc.n	8000cd8 <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff fddd 	bl	80008b8 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8000cfe:	23ff      	movs	r3, #255	; 0xff
 8000d00:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8000d02:	2005      	movs	r0, #5
 8000d04:	f7ff fdb0 	bl	8000868 <rc522_regRead8>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75bb      	strb	r3, [r7, #22]
    i--;
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <rc522_calculateCRC+0x6e>
 8000d18:	7dbb      	ldrb	r3, [r7, #22]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0ef      	beq.n	8000d02 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000d22:	2022      	movs	r0, #34	; 0x22
 8000d24:	f7ff fda0 	bl	8000868 <rc522_regRead8>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	2021      	movs	r0, #33	; 0x21
 8000d36:	f7ff fd97 	bl	8000868 <rc522_regRead8>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	 * STM32 ->RFID
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
  SPI_Init();
 8000d4e:	f000 fb4b 	bl	80013e8 <SPI_Init>
  GPIOA->MODER|=GPIO_MODER_MODE8_0;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <rc522_init+0xc0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2c      	ldr	r2, [pc, #176]	; (8000e08 <rc522_init+0xc0>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
  GPIOA->MODER&=~GPIO_MODER_MODE8_1;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <rc522_init+0xc0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <rc522_init+0xc0>)
 8000d64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d68:	6013      	str	r3, [r2, #0]

  RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <rc522_init+0xc4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <rc522_init+0xc4>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOB->MODER|=GPIO_MODER_MODE0_0;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <rc522_init+0xc8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <rc522_init+0xc8>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]
  GPIOB->MODER&=~GPIO_MODER_MODE0_1;
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <rc522_init+0xc8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <rc522_init+0xc8>)
 8000d88:	f023 0302 	bic.w	r3, r3, #2
 8000d8c:	6013      	str	r3, [r2, #0]
  GPIOA->BSRR=GPIO_BSRR_BR8;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <rc522_init+0xc0>)
 8000d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d94:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e002      	b.n	8000da2 <rc522_init+0x5a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <rc522_init+0xcc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	ddf8      	ble.n	8000d9c <rc522_init+0x54>
  GPIOA->BSRR=GPIO_BSRR_BS8;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <rc522_init+0xc0>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	e002      	b.n	8000dbe <rc522_init+0x76>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <rc522_init+0xcc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	ddf8      	ble.n	8000db8 <rc522_init+0x70>
  rc522_reset();
 8000dc6:	f7ff fdd0 	bl	800096a <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	202a      	movs	r0, #42	; 0x2a
 8000dce:	f7ff fd73 	bl	80008b8 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000dd2:	21a9      	movs	r1, #169	; 0xa9
 8000dd4:	202b      	movs	r0, #43	; 0x2b
 8000dd6:	f7ff fd6f 	bl	80008b8 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000dda:	21e8      	movs	r1, #232	; 0xe8
 8000ddc:	202d      	movs	r0, #45	; 0x2d
 8000dde:	f7ff fd6b 	bl	80008b8 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000de2:	2103      	movs	r1, #3
 8000de4:	202c      	movs	r0, #44	; 0x2c
 8000de6:	f7ff fd67 	bl	80008b8 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	2015      	movs	r0, #21
 8000dee:	f7ff fd63 	bl	80008b8 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000df2:	213d      	movs	r1, #61	; 0x3d
 8000df4:	2011      	movs	r0, #17
 8000df6:	f7ff fd5f 	bl	80008b8 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8000dfa:	f7ff fdbe 	bl	800097a <rc522_antennaON>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400
 8000e14:	0001869f 	.word	0x0001869f

08000e18 <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header


volatile uint32_t ms,rms;
void systick_init_ms(uint32_t freq)
	{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <systick_init_ms+0x38>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	099b      	lsrs	r3, r3, #6
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <systick_init_ms+0x3c>)
 8000e30:	3b01      	subs	r3, #1
 8000e32:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <systick_init_ms+0x3c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <systick_init_ms+0x3c>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e40:	b662      	cpsie	i
}
 8000e42:	bf00      	nop
	__enable_irq();	
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	10624dd3 	.word	0x10624dd3
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <millis>:

uint32_t millis(void)
	{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <millis+0x24>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <millis+0x28>)
 8000e66:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e68:	b662      	cpsie	i
}
 8000e6a:	bf00      	nop
	__enable_irq();
	return rms;
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <millis+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
	}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000f0 	.word	0x200000f0
 8000e80:	200000f4 	.word	0x200000f4

08000e84 <SysTick_Handler>:

void SysTick_Handler(void){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
//GPIOA->ODR^=GPIO_ODR_OD5;
ms++;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Handler+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <SysTick_Handler+0x18>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200000f0 	.word	0x200000f0

08000ea0 <delay>:

void delay(uint32_t ms)
	{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	uint32_t start=millis();
 8000ea8:	f7ff ffd6 	bl	8000e58 <millis>
 8000eac:	60f8      	str	r0, [r7, #12]

	do{;}while(millis()-start<ms);
 8000eae:	f7ff ffd3 	bl	8000e58 <millis>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8f7      	bhi.n	8000eae <delay+0xe>


	}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <i2c_init>:

#include "i2c.h"
#include "stm32f4xx.h"                  // Device header
#include "stdio.h"

void i2c_init(void){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN; //enable gpiob clock
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <i2c_init+0x84>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <i2c_init+0x84>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
RCC->APB1ENR|=RCC_APB1ENR_I2C1EN; //enable i2c1 clock
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <i2c_init+0x84>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <i2c_init+0x84>)
 8000ede:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
GPIOB->MODER|=0xA0000; //set pb8and9 to alternative function
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <i2c_init+0x88>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <i2c_init+0x88>)
 8000eea:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000eee:	6013      	str	r3, [r2, #0]
GPIOB->AFR[1]|=0x44;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <i2c_init+0x88>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <i2c_init+0x88>)
 8000ef6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000efa:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->OTYPER|=GPIO_OTYPER_OT8|GPIO_OTYPER_OT9; //set pb8 and pb9 as open drain
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <i2c_init+0x88>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <i2c_init+0x88>)
 8000f02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f06:	6053      	str	r3, [r2, #4]

I2C1->CR1=0x8000;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <i2c_init+0x8c>)
 8000f0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f0e:	601a      	str	r2, [r3, #0]
I2C1->CR1&=~0x8000;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <i2c_init+0x8c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <i2c_init+0x8c>)
 8000f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f1a:	6013      	str	r3, [r2, #0]
I2C1->CR2|=0x10;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <i2c_init+0x8c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <i2c_init+0x8c>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6053      	str	r3, [r2, #4]
I2C1->CCR=80; //standard 100KHz
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <i2c_init+0x8c>)
 8000f2a:	2250      	movs	r2, #80	; 0x50
 8000f2c:	61da      	str	r2, [r3, #28]
I2C1->TRISE=17;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <i2c_init+0x8c>)
 8000f30:	2211      	movs	r2, #17
 8000f32:	621a      	str	r2, [r3, #32]
I2C1->CR1|=0x1;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <i2c_init+0x8c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <i2c_init+0x8c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
	
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40005400 	.word	0x40005400

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fcab 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f921 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9b7 	bl	80012d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6a:	f000 f98b 	bl	8001284 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  system_init();
 8000f6e:	f000 f90b 	bl	8001188 <system_init>

     // Display Initial Message
     setCursor(0, 0);
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fbc3 	bl	8000700 <setCursor>
     lcd_send_string("SCAN TO ACCESS!");
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <main+0x68>)
 8000f7c:	f7ff fbf8 	bl	8000770 <lcd_send_string>
     setCursor(0, 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fbbc 	bl	8000700 <setCursor>
     lcd_send_string("TAP THE CARD");
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x6c>)
 8000f8a:	f7ff fbf1 	bl	8000770 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (rc522_checkCard(rfid_id)) {
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fd07 	bl	80009a4 <rc522_checkCard>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00d      	beq.n	8000fb8 <main+0x60>
	             clear_leds();  // Clear all LEDs before turning on the new one
 8000f9c:	f000 f894 	bl	80010c8 <clear_leds>
	             turn_on_led(rfid_id);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f842 	bl	800102c <turn_on_led>
	             display_name_for_rfid(rfid_id);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f898 	bl	80010e0 <display_name_for_rfid>
	             delay(1000);  // Delay to avoid continuous updates
 8000fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb4:	f7ff ff74 	bl	8000ea0 <delay>
	         }
	         delay(100);
 8000fb8:	2064      	movs	r0, #100	; 0x64
 8000fba:	f7ff ff71 	bl	8000ea0 <delay>
	  if (rc522_checkCard(rfid_id)) {
 8000fbe:	e7e6      	b.n	8000f8e <main+0x36>
 8000fc0:	080040d0 	.word	0x080040d0
 8000fc4:	080040e0 	.word	0x080040e0

08000fc8 <init_leds>:
  }
  /* USER CODE END 3 */
}

// Function to initialize the LEDs
void init_leds(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

    // Enable the GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <init_leds+0x5c>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <init_leds+0x5c>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <init_leds+0x5c>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

    // Configure PC0, PC1, and PC3 as output
    GPIO_InitStruct.Pin = LED1_PIN | LED2_PIN | LED3_PIN;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <init_leds+0x60>)
 800100e:	f000 fd97 	bl	8001b40 <HAL_GPIO_Init>

    // Initially turn off all LEDs
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN | LED2_PIN | LED3_PIN, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2107      	movs	r1, #7
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <init_leds+0x60>)
 8001018:	f000 ff26 	bl	8001e68 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020800 	.word	0x40020800

0800102c <turn_on_led>:

// Function to turn on the LED based on RFID ID
void turn_on_led(uint8_t *rfid_id) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    if (memcmp(rfid_id, rfid_lookup[0].id, 4) == 0) {
 8001034:	2204      	movs	r2, #4
 8001036:	491c      	ldr	r1, [pc, #112]	; (80010a8 <turn_on_led+0x7c>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f002 f803 	bl	8003044 <memcmp>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d108      	bne.n	8001056 <turn_on_led+0x2a>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_SET);  // Turn on LED1 (PC0)
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4818      	ldr	r0, [pc, #96]	; (80010ac <turn_on_led+0x80>)
 800104a:	f000 ff0d 	bl	8001e68 <HAL_GPIO_WritePin>
        printf("LED1 turned on\n");
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <turn_on_led+0x84>)
 8001050:	f002 f896 	bl	8003180 <puts>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);  // Turn on LED3 (PC3)
        printf("LED3 turned on\n");
    } else {
        printf("Unknown RFID\n");
    }
}
 8001054:	e024      	b.n	80010a0 <turn_on_led+0x74>
    } else if (memcmp(rfid_id, rfid_lookup[1].id, 4) == 0) {
 8001056:	2204      	movs	r2, #4
 8001058:	4916      	ldr	r1, [pc, #88]	; (80010b4 <turn_on_led+0x88>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 fff2 	bl	8003044 <memcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <turn_on_led+0x4c>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_SET);  // Turn on LED2 (PC1)
 8001066:	2201      	movs	r2, #1
 8001068:	2102      	movs	r1, #2
 800106a:	4810      	ldr	r0, [pc, #64]	; (80010ac <turn_on_led+0x80>)
 800106c:	f000 fefc 	bl	8001e68 <HAL_GPIO_WritePin>
        printf("LED2 turned on\n");
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <turn_on_led+0x8c>)
 8001072:	f002 f885 	bl	8003180 <puts>
}
 8001076:	e013      	b.n	80010a0 <turn_on_led+0x74>
    } else if (memcmp(rfid_id, rfid_lookup[2].id, 4) == 0) {
 8001078:	2204      	movs	r2, #4
 800107a:	4910      	ldr	r1, [pc, #64]	; (80010bc <turn_on_led+0x90>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f001 ffe1 	bl	8003044 <memcmp>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d108      	bne.n	800109a <turn_on_led+0x6e>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);  // Turn on LED3 (PC3)
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <turn_on_led+0x80>)
 800108e:	f000 feeb 	bl	8001e68 <HAL_GPIO_WritePin>
        printf("LED3 turned on\n");
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <turn_on_led+0x94>)
 8001094:	f002 f874 	bl	8003180 <puts>
}
 8001098:	e002      	b.n	80010a0 <turn_on_led+0x74>
        printf("Unknown RFID\n");
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <turn_on_led+0x98>)
 800109c:	f002 f870 	bl	8003180 <puts>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	40020800 	.word	0x40020800
 80010b0:	080040f0 	.word	0x080040f0
 80010b4:	20000014 	.word	0x20000014
 80010b8:	08004100 	.word	0x08004100
 80010bc:	20000028 	.word	0x20000028
 80010c0:	08004110 	.word	0x08004110
 80010c4:	08004120 	.word	0x08004120

080010c8 <clear_leds>:

// Function to clear all LEDs
void clear_leds(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN | LED2_PIN | LED3_PIN, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2107      	movs	r1, #7
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <clear_leds+0x14>)
 80010d2:	f000 fec9 	bl	8001e68 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020800 	.word	0x40020800

080010e0 <display_name_for_rfid>:

// Function to display RFID information on the LCD
void display_name_for_rfid(uint8_t *rfid_id) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    char name[16] = "Unknown";
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <display_name_for_rfid+0x9c>)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < NUM_RFID_IDS; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	e020      	b.n	8001148 <display_name_for_rfid+0x68>
        if (memcmp(rfid_id, rfid_lookup[i].id, 4) == 0) {
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <display_name_for_rfid+0xa0>)
 8001112:	4413      	add	r3, r2
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 ff93 	bl	8003044 <memcmp>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10e      	bne.n	8001142 <display_name_for_rfid+0x62>
            strncpy(name, rfid_lookup[i].name, sizeof(name) - 1);
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <display_name_for_rfid+0xa0>)
 8001130:	4413      	add	r3, r2
 8001132:	1d19      	adds	r1, r3, #4
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	220f      	movs	r2, #15
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f828 	bl	8003190 <strncpy>
            break;
 8001140:	e005      	b.n	800114e <display_name_for_rfid+0x6e>
    for (int i = 0; i < NUM_RFID_IDS; i++) {
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b04      	cmp	r3, #4
 800114c:	dddb      	ble.n	8001106 <display_name_for_rfid+0x26>
        }
    }

    lcd_clear();
 800114e:	f7ff fb63 	bl	8000818 <lcd_clear>
    setCursor(0, 0);
 8001152:	2100      	movs	r1, #0
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fad3 	bl	8000700 <setCursor>
    lcd_send_string("WELCOME :");
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <display_name_for_rfid+0xa4>)
 800115c:	f7ff fb08 	bl	8000770 <lcd_send_string>
    setCursor(0, 1);
 8001160:	2101      	movs	r1, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff facc 	bl	8000700 <setCursor>
    lcd_send_string(name);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff faff 	bl	8000770 <lcd_send_string>
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	0800413c 	.word	0x0800413c
 8001180:	20000000 	.word	0x20000000
 8001184:	08004130 	.word	0x08004130

08001188 <system_init>:

// Function to initialize the system
void system_init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    systick_init_ms(16000000);
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <system_init+0x1c>)
 800118e:	f7ff fe43 	bl	8000e18 <systick_init_ms>
    rc522_init();
 8001192:	f7ff fdd9 	bl	8000d48 <rc522_init>
    lcd_init();
 8001196:	f7ff fb00 	bl	800079a <lcd_init>
    init_leds();
 800119a:	f7ff ff15 	bl	8000fc8 <init_leds>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	00f42400 	.word	0x00f42400

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2234      	movs	r2, #52	; 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 ff54 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <SystemClock_Config+0xd4>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <SystemClock_Config+0xd4>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <SystemClock_Config+0xd4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemClock_Config+0xd8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f4:	4a22      	ldr	r2, [pc, #136]	; (8001280 <SystemClock_Config+0xd8>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <SystemClock_Config+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800121c:	2310      	movs	r3, #16
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001220:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001226:	2304      	movs	r3, #4
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f97a 	bl	8002530 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001242:	f000 f8cb 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2302      	movs	r3, #2
 800124c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe1a 	bl	8001e9c <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800126e:	f000 f8b5 	bl	80013dc <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART2_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012bc:	f001 fbd6 	bl	8002a6c <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f889 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000f8 	.word	0x200000f8
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2107      	movs	r1, #7
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xfc>)
 8001364:	f000 fd80 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <MX_GPIO_Init+0x100>)
 800136e:	f000 fd7b 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <MX_GPIO_Init+0xfc>)
 800138a:	f000 fbd9 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800138e:	2307      	movs	r3, #7
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xfc>)
 80013a6:	f000 fbcb 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013aa:	2320      	movs	r3, #32
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_GPIO_Init+0x100>)
 80013c2:	f000 fbbd 	bl	8001b40 <HAL_GPIO_Init>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020000 	.word	0x40020000

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <SPI_Init>:
#include "stdint.h"
#include "delay.h"
#include "stdio.h"

void SPI_Init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	#define AF5 0x05
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock forn gpio a
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <SPI_Init+0x68>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <SPI_Init+0x68>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN; //enable clock for spi1
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <SPI_Init+0x68>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <SPI_Init+0x68>)
 80013fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001402:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <SPI_Init+0x6c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <SPI_Init+0x6c>)
 800140a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800140e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE6_0|GPIO_MODER_MODE7_0);
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <SPI_Init+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <SPI_Init+0x6c>)
 8001416:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 800141a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR5|GPIO_OSPEEDER_OSPEEDR6|GPIO_OSPEEDER_OSPEEDR7;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <SPI_Init+0x6c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <SPI_Init+0x6c>)
 8001422:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 8001426:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0]|=(AF5<<20)|(AF5<<24)|(AF5<<28);
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <SPI_Init+0x6c>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <SPI_Init+0x6c>)
 800142e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001432:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001436:	6213      	str	r3, [r2, #32]
	SPI1->CR2=0;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <SPI_Init+0x70>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
	SPI1->CR1=SPI_CR1_SSM|SPI_CR1_MSTR|SPI_CR1_BR_2|SPI_CR1_SSI|SPI_CR1_SPE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SPI_Init+0x70>)
 8001440:	f44f 7259 	mov.w	r2, #868	; 0x364
 8001444:	601a      	str	r2, [r3, #0]



}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40013000 	.word	0x40013000

0800145c <SPI_Transmit>:


int8_t SPI_Transmit(uint8_t *data, uint32_t size)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]


	uint32_t i		=0;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
	uint8_t  temp	=0;
 800146a:	2300      	movs	r3, #0
 800146c:	74fb      	strb	r3, [r7, #19]
	uint32_t start=millis();
 800146e:	f7ff fcf3 	bl	8000e58 <millis>
 8001472:	60f8      	str	r0, [r7, #12]
	temp =SPI1->DR;
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <SPI_Transmit+0xfc>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	74fb      	strb	r3, [r7, #19]
	temp=SPI1->SR;
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <SPI_Transmit+0xfc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	74fb      	strb	r3, [r7, #19]
	while(i<size)
 8001480:	e031      	b.n	80014e6 <SPI_Transmit+0x8a>
		{
		while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){
 8001482:	f7ff fce9 	bl	8000e58 <millis>
 8001486:	4602      	mov	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001490:	d905      	bls.n	800149e <SPI_Transmit+0x42>
			printf("TXE timed out\r\n");
 8001492:	4832      	ldr	r0, [pc, #200]	; (800155c <SPI_Transmit+0x100>)
 8001494:	f001 fe74 	bl	8003180 <puts>
			return -1;}} // wait to transmision buffer to be emplty
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	e058      	b.n	8001550 <SPI_Transmit+0xf4>
		while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <SPI_Transmit+0xfc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0eb      	beq.n	8001482 <SPI_Transmit+0x26>
		SPI1->DR= data[i];
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <SPI_Transmit+0xfc>)
 80014b4:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_BSY)){if(millis()-start>1000){printf("BSY timed out\r\n");return -1;}}
 80014b6:	e00d      	b.n	80014d4 <SPI_Transmit+0x78>
 80014b8:	f7ff fcce 	bl	8000e58 <millis>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c6:	d905      	bls.n	80014d4 <SPI_Transmit+0x78>
 80014c8:	4825      	ldr	r0, [pc, #148]	; (8001560 <SPI_Transmit+0x104>)
 80014ca:	f001 fe59 	bl	8003180 <puts>
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d2:	e03d      	b.n	8001550 <SPI_Transmit+0xf4>
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <SPI_Transmit+0xfc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0eb      	beq.n	80014b8 <SPI_Transmit+0x5c>
		i++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
	while(i<size)
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3d7      	bcc.n	800149e <SPI_Transmit+0x42>
		}
while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){printf("TXE2 time dout\r\n");return -1;}}
 80014ee:	e00d      	b.n	800150c <SPI_Transmit+0xb0>
 80014f0:	f7ff fcb2 	bl	8000e58 <millis>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d905      	bls.n	800150c <SPI_Transmit+0xb0>
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <SPI_Transmit+0x108>)
 8001502:	f001 fe3d 	bl	8003180 <puts>
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e021      	b.n	8001550 <SPI_Transmit+0xf4>
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <SPI_Transmit+0xfc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0eb      	beq.n	80014f0 <SPI_Transmit+0x94>
while((SPI1->SR)&SPI_SR_BSY){if(millis()-start>1000){printf("BSY2 timed out\r\n"); return -1;}}
 8001518:	e00d      	b.n	8001536 <SPI_Transmit+0xda>
 800151a:	f7ff fc9d 	bl	8000e58 <millis>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001528:	d905      	bls.n	8001536 <SPI_Transmit+0xda>
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <SPI_Transmit+0x10c>)
 800152c:	f001 fe28 	bl	8003180 <puts>
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001534:	e00c      	b.n	8001550 <SPI_Transmit+0xf4>
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <SPI_Transmit+0xfc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1eb      	bne.n	800151a <SPI_Transmit+0xbe>
temp =SPI1->DR;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SPI_Transmit+0xfc>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	74fb      	strb	r3, [r7, #19]
temp=SPI1->SR;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <SPI_Transmit+0xfc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	74fb      	strb	r3, [r7, #19]
return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013000 	.word	0x40013000
 800155c:	0800414c 	.word	0x0800414c
 8001560:	0800415c 	.word	0x0800415c
 8001564:	0800416c 	.word	0x0800416c
 8001568:	0800417c 	.word	0x0800417c

0800156c <SPI_Receive>:


int8_t SPI_Receive(uint8_t *data, uint32_t size)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
while(size)
 8001576:	e020      	b.n	80015ba <SPI_Receive+0x4e>
		{
	uint32_t start=millis();
 8001578:	f7ff fc6e 	bl	8000e58 <millis>
 800157c:	60f8      	str	r0, [r7, #12]
		SPI1->DR=0;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <SPI_Receive+0x60>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_RXNE)){if(millis()-start>200){return -1;}}
 8001584:	e009      	b.n	800159a <SPI_Receive+0x2e>
 8001586:	f7ff fc67 	bl	8000e58 <millis>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2bc8      	cmp	r3, #200	; 0xc8
 8001592:	d902      	bls.n	800159a <SPI_Receive+0x2e>
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	e013      	b.n	80015c2 <SPI_Receive+0x56>
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <SPI_Receive+0x60>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ef      	beq.n	8001586 <SPI_Receive+0x1a>
		*data++=(SPI1->DR);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <SPI_Receive+0x60>)
 80015a8:	68d9      	ldr	r1, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	b2ca      	uxtb	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
			size--;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
while(size)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1db      	bne.n	8001578 <SPI_Receive+0xc>
		}
return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40013000 	.word	0x40013000

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_MspInit+0x4c>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_MspInit+0x4c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800160e:	2007      	movs	r0, #7
 8001610:	f000 fa62 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_UART_MspInit+0x84>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_UART_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0x88>)
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_UART_MspInit+0x88>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_UART_MspInit+0x88>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167a:	230c      	movs	r3, #12
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0x8c>)
 8001696:	f000 fa53 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40004400 	.word	0x40004400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e00a      	b.n	8001720 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170a:	f3af 8000 	nop.w
 800170e:	4601      	mov	r1, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf0      	blt.n	800170a <_read+0x12>
  }

  return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e009      	b.n	8001758 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf1      	blt.n	8001744 <_write+0x12>
  }
  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_close>:

int _close(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	605a      	str	r2, [r3, #4]
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_isatty>:

int _isatty(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f001 fbf4 	bl	8002ff0 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20020000 	.word	0x20020000
 8001834:	00000400 	.word	0x00000400
 8001838:	2000013c 	.word	0x2000013c
 800183c:	20000158 	.word	0x20000158

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800186a:	490e      	ldr	r1, [pc, #56]	; (80018a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001880:	4c0b      	ldr	r4, [pc, #44]	; (80018b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188e:	f7ff ffd7 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f001 fbb3 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff fb5f 	bl	8000f58 <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80018a8:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 80018ac:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80018b0:	20000154 	.word	0x20000154

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f8f9 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fe70 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f903 	bl	8001b26 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001938:	f000 f8d9 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000064 	.word	0x20000064
 8001954:	2000006c 	.word	0x2000006c
 8001958:	20000068 	.word	0x20000068

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000140 	.word	0x20000140

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff47 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff5c 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb0 	bl	8001a94 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e165      	b.n	8001e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8154 	bne.w	8001e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ae 	beq.w	8001e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_GPIO_Init+0x310>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x314>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x318>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x20a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x206>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x320>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae96 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cc      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e067      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4934      	ldr	r1, [pc, #208]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fce6 	bl	800195c <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fce2 	bl	800195c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d20c      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f855 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc5a 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00
 8002058:	40023800 	.word	0x40023800
 800205c:	0800418c 	.word	0x0800418c
 8002060:	20000064 	.word	0x20000064
 8002064:	20000068 	.word	0x20000068

08002068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000064 	.word	0x20000064

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	0800419c 	.word	0x0800419c

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020ac:	f7ff ffdc 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0b5b      	lsrs	r3, r3, #13
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	0800419c 	.word	0x0800419c

080020d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d4:	b0ae      	sub	sp, #184	; 0xb8
 80020d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4bcb      	ldr	r3, [pc, #812]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	f200 8206 	bhi.w	8002510 <HAL_RCC_GetSysClockFreq+0x440>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002141 	.word	0x08002141
 8002110:	08002511 	.word	0x08002511
 8002114:	08002511 	.word	0x08002511
 8002118:	08002511 	.word	0x08002511
 800211c:	08002149 	.word	0x08002149
 8002120:	08002511 	.word	0x08002511
 8002124:	08002511 	.word	0x08002511
 8002128:	08002511 	.word	0x08002511
 800212c:	08002151 	.word	0x08002151
 8002130:	08002511 	.word	0x08002511
 8002134:	08002511 	.word	0x08002511
 8002138:	08002511 	.word	0x08002511
 800213c:	08002341 	.word	0x08002341
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4bb9      	ldr	r3, [pc, #740]	; (8002428 <HAL_RCC_GetSysClockFreq+0x358>)
 8002142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002146:	e1e7      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4bb8      	ldr	r3, [pc, #736]	; (800242c <HAL_RCC_GetSysClockFreq+0x35c>)
 800214a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800214e:	e1e3      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002150:	4bb4      	ldr	r3, [pc, #720]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215c:	4bb1      	ldr	r3, [pc, #708]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d071      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4bae      	ldr	r3, [pc, #696]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002174:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800218a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a0:	0150      	lsls	r0, r2, #5
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4621      	mov	r1, r4
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	6439      	str	r1, [r7, #64]	; 0x40
 80021ac:	4629      	mov	r1, r5
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021c0:	4649      	mov	r1, r9
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ca:	4641      	mov	r1, r8
 80021cc:	018a      	lsls	r2, r1, #6
 80021ce:	4641      	mov	r1, r8
 80021d0:	1a51      	subs	r1, r2, r1
 80021d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80021d4:	4649      	mov	r1, r9
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021e8:	4649      	mov	r1, r9
 80021ea:	00cb      	lsls	r3, r1, #3
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f2:	4641      	mov	r1, r8
 80021f4:	00ca      	lsls	r2, r1, #3
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	4622      	mov	r2, r4
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
 8002202:	462b      	mov	r3, r5
 8002204:	460a      	mov	r2, r1
 8002206:	eb42 0303 	adc.w	r3, r2, r3
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002218:	4629      	mov	r1, r5
 800221a:	024b      	lsls	r3, r1, #9
 800221c:	4621      	mov	r1, r4
 800221e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002222:	4621      	mov	r1, r4
 8002224:	024a      	lsls	r2, r1, #9
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002238:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800223c:	f7fe f838 	bl	80002b0 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800224a:	e067      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224c:	4b75      	ldr	r3, [pc, #468]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002258:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800225c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
 8002266:	2300      	movs	r3, #0
 8002268:	67fb      	str	r3, [r7, #124]	; 0x7c
 800226a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800226e:	4622      	mov	r2, r4
 8002270:	462b      	mov	r3, r5
 8002272:	f04f 0000 	mov.w	r0, #0
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	0159      	lsls	r1, r3, #5
 800227c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002280:	0150      	lsls	r0, r2, #5
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4621      	mov	r1, r4
 8002288:	1a51      	subs	r1, r2, r1
 800228a:	62b9      	str	r1, [r7, #40]	; 0x28
 800228c:	4629      	mov	r1, r5
 800228e:	eb63 0301 	sbc.w	r3, r3, r1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022a0:	4649      	mov	r1, r9
 80022a2:	018b      	lsls	r3, r1, #6
 80022a4:	4641      	mov	r1, r8
 80022a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022aa:	4641      	mov	r1, r8
 80022ac:	018a      	lsls	r2, r1, #6
 80022ae:	4641      	mov	r1, r8
 80022b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022b4:	4649      	mov	r1, r9
 80022b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ce:	4692      	mov	sl, r2
 80022d0:	469b      	mov	fp, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	eb1a 0303 	adds.w	r3, sl, r3
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	462b      	mov	r3, r5
 80022dc:	eb4b 0303 	adc.w	r3, fp, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022ee:	4629      	mov	r1, r5
 80022f0:	028b      	lsls	r3, r1, #10
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f8:	4621      	mov	r1, r4
 80022fa:	028a      	lsls	r2, r1, #10
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002304:	2200      	movs	r2, #0
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
 8002308:	677a      	str	r2, [r7, #116]	; 0x74
 800230a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800230e:	f7fd ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4613      	mov	r3, r2
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800232e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800233e:	e0eb      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234c:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d06b      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	2200      	movs	r2, #0
 8002360:	66bb      	str	r3, [r7, #104]	; 0x68
 8002362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	663b      	str	r3, [r7, #96]	; 0x60
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
 8002370:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002386:	0150      	lsls	r0, r2, #5
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4621      	mov	r1, r4
 800238e:	1a51      	subs	r1, r2, r1
 8002390:	61b9      	str	r1, [r7, #24]
 8002392:	4629      	mov	r1, r5
 8002394:	eb63 0301 	sbc.w	r3, r3, r1
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023a6:	4659      	mov	r1, fp
 80023a8:	018b      	lsls	r3, r1, #6
 80023aa:	4651      	mov	r1, sl
 80023ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b0:	4651      	mov	r1, sl
 80023b2:	018a      	lsls	r2, r1, #6
 80023b4:	4651      	mov	r1, sl
 80023b6:	ebb2 0801 	subs.w	r8, r2, r1
 80023ba:	4659      	mov	r1, fp
 80023bc:	eb63 0901 	sbc.w	r9, r3, r1
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d4:	4690      	mov	r8, r2
 80023d6:	4699      	mov	r9, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	eb18 0303 	adds.w	r3, r8, r3
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	462b      	mov	r3, r5
 80023e2:	eb49 0303 	adc.w	r3, r9, r3
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023f4:	4629      	mov	r1, r5
 80023f6:	024b      	lsls	r3, r1, #9
 80023f8:	4621      	mov	r1, r4
 80023fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fe:	4621      	mov	r1, r4
 8002400:	024a      	lsls	r2, r1, #9
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800240a:	2200      	movs	r2, #0
 800240c:	65bb      	str	r3, [r7, #88]	; 0x58
 800240e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002410:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002414:	f7fd ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002422:	e065      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_GetSysClockFreq+0x458>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	2200      	movs	r2, #0
 8002438:	4618      	mov	r0, r3
 800243a:	4611      	mov	r1, r2
 800243c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002440:	653b      	str	r3, [r7, #80]	; 0x50
 8002442:	2300      	movs	r3, #0
 8002444:	657b      	str	r3, [r7, #84]	; 0x54
 8002446:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800244a:	4642      	mov	r2, r8
 800244c:	464b      	mov	r3, r9
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	0159      	lsls	r1, r3, #5
 8002458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245c:	0150      	lsls	r0, r2, #5
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4641      	mov	r1, r8
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	4649      	mov	r1, r9
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800247c:	4659      	mov	r1, fp
 800247e:	018b      	lsls	r3, r1, #6
 8002480:	4651      	mov	r1, sl
 8002482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002486:	4651      	mov	r1, sl
 8002488:	018a      	lsls	r2, r1, #6
 800248a:	4651      	mov	r1, sl
 800248c:	1a54      	subs	r4, r2, r1
 800248e:	4659      	mov	r1, fp
 8002490:	eb63 0501 	sbc.w	r5, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb45 0303 	adc.w	r3, r5, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024cc:	4621      	mov	r1, r4
 80024ce:	028a      	lsls	r2, r1, #10
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024d8:	2200      	movs	r2, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024e2:	f7fd fee5 	bl	80002b0 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4613      	mov	r3, r2
 80024ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_GetSysClockFreq+0x458>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0f1b      	lsrs	r3, r3, #28
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800250e:	e003      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002516:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800251c:	4618      	mov	r0, r3
 800251e:	37b8      	adds	r7, #184	; 0xb8
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400

08002530 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e28d      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8083 	beq.w	8002656 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b04      	cmp	r3, #4
 800255a:	d019      	beq.n	8002590 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002564:	2b08      	cmp	r3, #8
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002568:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x124>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e25a      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x90>
 80025b2:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7b      	ldr	r2, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xcc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0xb4>
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a72      	ldr	r2, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xcc>
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6e      	ldr	r2, [pc, #440]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff f9aa 	bl	800195c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f9a6 	bl	800195c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e21f      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xdc>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff f996 	bl	800195c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f992 	bl	800195c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e20b      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x104>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d06f      	beq.n	8002742 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002662:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d017      	beq.n	800269e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800266e:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002676:	2b08      	cmp	r3, #8
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x186>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1d3      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4937      	ldr	r1, [pc, #220]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7ff f93f 	bl	800195c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7ff f93b 	bl	800195c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1b4      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff f91e 	bl	800195c <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7ff f91a 	bl	800195c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e193      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d036      	beq.n	80027bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x27c>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff f8fe 	bl	800195c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff f8fa 	bl	800195c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e173      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x234>
 8002782:	e01b      	b.n	80027bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x27c>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff f8e7 	bl	800195c <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e00e      	b.n	80027b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7ff f8e3 	bl	800195c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d907      	bls.n	80027b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e15c      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	42470000 	.word	0x42470000
 80027ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ea      	bne.n	8002792 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8097 	beq.w	80028f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b83      	ldr	r3, [pc, #524]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a7e      	ldr	r2, [pc, #504]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b7c      	ldr	r3, [pc, #496]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7ff f8a3 	bl	800195c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7ff f89f 	bl	800195c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e118      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x31e>
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x358>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x340>
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x358>
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a59      	ldr	r2, [pc, #356]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7ff f864 	bl	800195c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7ff f860 	bl	800195c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0d7      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCC_OscConfig+0x368>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff f84e 	bl	800195c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff f84a 	bl	800195c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0c1      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a3a      	ldr	r2, [pc, #232]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80ad 	beq.w	8002a5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d060      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d145      	bne.n	80029a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff f81e 	bl	800195c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f81a 	bl	800195c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e093      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	491b      	ldr	r1, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe ffef 	bl	800195c <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe ffeb 	bl	800195c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e064      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x452>
 80029a0:	e05c      	b.n	8002a5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe ffd8 	bl	800195c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe ffd4 	bl	800195c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04d      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
 80029ce:	e045      	b.n	8002a5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e040      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40007000 	.word	0x40007000
 80029e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_RCC_OscConfig+0x538>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d030      	beq.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d129      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d122      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d119      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d10f      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e03f      	b.n	8002afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fdc4 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f829 	bl	8002b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0c0      	sub	sp, #256	; 0x100
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	68d9      	ldr	r1, [r3, #12]
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	ea40 0301 	orr.w	r3, r0, r1
 8002b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b60:	f021 010c 	bic.w	r1, r1, #12
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	ea40 0301 	orr.w	r3, r0, r1
 8002b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d005      	beq.n	8002ba8 <UART_SetConfig+0xa0>
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <UART_SetConfig+0x2d0>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d104      	bne.n	8002bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff fa7e 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8002bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb0:	e003      	b.n	8002bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bb2:	f7ff fa65 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	f040 810c 	bne.w	8002de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002be2:	415b      	adcs	r3, r3
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bea:	4621      	mov	r1, r4
 8002bec:	eb12 0801 	adds.w	r8, r2, r1
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb43 0901 	adc.w	r9, r3, r1
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0a:	4690      	mov	r8, r2
 8002c0c:	4699      	mov	r9, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	eb18 0303 	adds.w	r3, r8, r3
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c18:	462b      	mov	r3, r5
 8002c1a:	eb49 0303 	adc.w	r3, r9, r3
 8002c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c36:	460b      	mov	r3, r1
 8002c38:	18db      	adds	r3, r3, r3
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c4c:	f7fd fb30 	bl	80002b0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011c      	lsls	r4, r3, #4
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c80:	4641      	mov	r1, r8
 8002c82:	eb12 0a01 	adds.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb43 0b01 	adc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca0:	4692      	mov	sl, r2
 8002ca2:	469b      	mov	fp, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8002caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	18db      	adds	r3, r3, r3
 8002cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ce2:	f7fd fae5 	bl	80002b0 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002cee:	fba3 2301 	umull	r2, r3, r3, r1
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2264      	movs	r2, #100	; 0x64
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	1acb      	subs	r3, r1, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002d04:	fba3 2302 	umull	r2, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d10:	441c      	add	r4, r3
 8002d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d34:	4641      	mov	r1, r8
 8002d36:	1851      	adds	r1, r2, r1
 8002d38:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	414b      	adcs	r3, r1
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4651      	mov	r1, sl
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4642      	mov	r2, r8
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d68:	464b      	mov	r3, r9
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	eb42 0303 	adc.w	r3, r2, r3
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d9e:	f7fd fa87 	bl	80002b0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002da8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3332      	adds	r3, #50	; 0x32
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	f003 0207 	and.w	r2, r3, #7
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4422      	add	r2, r4
 8002dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd0:	e105      	b.n	8002fde <UART_SetConfig+0x4d6>
 8002dd2:	bf00      	nop
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002df2:	4642      	mov	r2, r8
 8002df4:	464b      	mov	r3, r9
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	6239      	str	r1, [r7, #32]
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e02:	4641      	mov	r1, r8
 8002e04:	1854      	adds	r4, r2, r1
 8002e06:	4649      	mov	r1, r9
 8002e08:	eb43 0501 	adc.w	r5, r3, r1
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e28:	464b      	mov	r3, r9
 8002e2a:	eb45 0303 	adc.w	r3, r5, r3
 8002e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e4e:	4629      	mov	r1, r5
 8002e50:	008b      	lsls	r3, r1, #2
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e58:	4621      	mov	r1, r4
 8002e5a:	008a      	lsls	r2, r1, #2
 8002e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e60:	f7fd fa26 	bl	80002b0 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <UART_SetConfig+0x4e4>)
 8002e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	011c      	lsls	r4, r3, #4
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	61b9      	str	r1, [r7, #24]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6139      	str	r1, [r7, #16]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec8:	464b      	mov	r3, r9
 8002eca:	460a      	mov	r2, r1
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eec:	4649      	mov	r1, r9
 8002eee:	008b      	lsls	r3, r1, #2
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	008a      	lsls	r2, r1, #2
 8002efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002efe:	f7fd f9d7 	bl	80002b0 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f08:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2164      	movs	r1, #100	; 0x64
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a34      	ldr	r2, [pc, #208]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f26:	441c      	add	r4, r3
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f30:	677a      	str	r2, [r7, #116]	; 0x74
 8002f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1851      	adds	r1, r2, r1
 8002f4a:	6039      	str	r1, [r7, #0]
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	414b      	adcs	r3, r1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f5e:	4659      	mov	r1, fp
 8002f60:	00cb      	lsls	r3, r1, #3
 8002f62:	4651      	mov	r1, sl
 8002f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f68:	4651      	mov	r1, sl
 8002f6a:	00ca      	lsls	r2, r1, #3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4603      	mov	r3, r0
 8002f72:	4642      	mov	r2, r8
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f78:	464b      	mov	r3, r9
 8002f7a:	460a      	mov	r2, r1
 8002f7c:	eb42 0303 	adc.w	r3, r2, r3
 8002f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	008b      	lsls	r3, r1, #2
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	008a      	lsls	r2, r1, #2
 8002fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fac:	f7fd f980 	bl	80002b0 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2164      	movs	r1, #100	; 0x64
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	3332      	adds	r3, #50	; 0x32
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4422      	add	r2, r4
 8002fdc:	609a      	str	r2, [r3, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fea:	bf00      	nop
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <__errno>:
 8002ff0:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <__errno+0x8>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000070 	.word	0x20000070

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4d0d      	ldr	r5, [pc, #52]	; (8003034 <__libc_init_array+0x38>)
 8003000:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003002:	1b64      	subs	r4, r4, r5
 8003004:	10a4      	asrs	r4, r4, #2
 8003006:	2600      	movs	r6, #0
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	4d0b      	ldr	r5, [pc, #44]	; (800303c <__libc_init_array+0x40>)
 800300e:	4c0c      	ldr	r4, [pc, #48]	; (8003040 <__libc_init_array+0x44>)
 8003010:	f001 f848 	bl	80040a4 <_init>
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	2600      	movs	r6, #0
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08004244 	.word	0x08004244
 8003038:	08004244 	.word	0x08004244
 800303c:	08004244 	.word	0x08004244
 8003040:	08004248 	.word	0x08004248

08003044 <memcmp>:
 8003044:	b510      	push	{r4, lr}
 8003046:	3901      	subs	r1, #1
 8003048:	4402      	add	r2, r0
 800304a:	4290      	cmp	r0, r2
 800304c:	d101      	bne.n	8003052 <memcmp+0xe>
 800304e:	2000      	movs	r0, #0
 8003050:	e005      	b.n	800305e <memcmp+0x1a>
 8003052:	7803      	ldrb	r3, [r0, #0]
 8003054:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003058:	42a3      	cmp	r3, r4
 800305a:	d001      	beq.n	8003060 <memcmp+0x1c>
 800305c:	1b18      	subs	r0, r3, r4
 800305e:	bd10      	pop	{r4, pc}
 8003060:	3001      	adds	r0, #1
 8003062:	e7f2      	b.n	800304a <memcmp+0x6>

08003064 <memset>:
 8003064:	4402      	add	r2, r0
 8003066:	4603      	mov	r3, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	f803 1b01 	strb.w	r1, [r3], #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <iprintf>:
 8003074:	b40f      	push	{r0, r1, r2, r3}
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <iprintf+0x2c>)
 8003078:	b513      	push	{r0, r1, r4, lr}
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	b124      	cbz	r4, 8003088 <iprintf+0x14>
 800307e:	69a3      	ldr	r3, [r4, #24]
 8003080:	b913      	cbnz	r3, 8003088 <iprintf+0x14>
 8003082:	4620      	mov	r0, r4
 8003084:	f000 fa72 	bl	800356c <__sinit>
 8003088:	ab05      	add	r3, sp, #20
 800308a:	9a04      	ldr	r2, [sp, #16]
 800308c:	68a1      	ldr	r1, [r4, #8]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	4620      	mov	r0, r4
 8003092:	f000 fc7b 	bl	800398c <_vfiprintf_r>
 8003096:	b002      	add	sp, #8
 8003098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309c:	b004      	add	sp, #16
 800309e:	4770      	bx	lr
 80030a0:	20000070 	.word	0x20000070

080030a4 <_puts_r>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	460e      	mov	r6, r1
 80030a8:	4605      	mov	r5, r0
 80030aa:	b118      	cbz	r0, 80030b4 <_puts_r+0x10>
 80030ac:	6983      	ldr	r3, [r0, #24]
 80030ae:	b90b      	cbnz	r3, 80030b4 <_puts_r+0x10>
 80030b0:	f000 fa5c 	bl	800356c <__sinit>
 80030b4:	69ab      	ldr	r3, [r5, #24]
 80030b6:	68ac      	ldr	r4, [r5, #8]
 80030b8:	b913      	cbnz	r3, 80030c0 <_puts_r+0x1c>
 80030ba:	4628      	mov	r0, r5
 80030bc:	f000 fa56 	bl	800356c <__sinit>
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <_puts_r+0xd0>)
 80030c2:	429c      	cmp	r4, r3
 80030c4:	d120      	bne.n	8003108 <_puts_r+0x64>
 80030c6:	686c      	ldr	r4, [r5, #4]
 80030c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ca:	07db      	lsls	r3, r3, #31
 80030cc:	d405      	bmi.n	80030da <_puts_r+0x36>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	0598      	lsls	r0, r3, #22
 80030d2:	d402      	bmi.n	80030da <_puts_r+0x36>
 80030d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030d6:	f000 fae7 	bl	80036a8 <__retarget_lock_acquire_recursive>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	0719      	lsls	r1, r3, #28
 80030de:	d51d      	bpl.n	800311c <_puts_r+0x78>
 80030e0:	6923      	ldr	r3, [r4, #16]
 80030e2:	b1db      	cbz	r3, 800311c <_puts_r+0x78>
 80030e4:	3e01      	subs	r6, #1
 80030e6:	68a3      	ldr	r3, [r4, #8]
 80030e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60a3      	str	r3, [r4, #8]
 80030f0:	bb39      	cbnz	r1, 8003142 <_puts_r+0x9e>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da38      	bge.n	8003168 <_puts_r+0xc4>
 80030f6:	4622      	mov	r2, r4
 80030f8:	210a      	movs	r1, #10
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f85c 	bl	80031b8 <__swbuf_r>
 8003100:	3001      	adds	r0, #1
 8003102:	d011      	beq.n	8003128 <_puts_r+0x84>
 8003104:	250a      	movs	r5, #10
 8003106:	e011      	b.n	800312c <_puts_r+0x88>
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <_puts_r+0xd4>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d101      	bne.n	8003112 <_puts_r+0x6e>
 800310e:	68ac      	ldr	r4, [r5, #8]
 8003110:	e7da      	b.n	80030c8 <_puts_r+0x24>
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <_puts_r+0xd8>)
 8003114:	429c      	cmp	r4, r3
 8003116:	bf08      	it	eq
 8003118:	68ec      	ldreq	r4, [r5, #12]
 800311a:	e7d5      	b.n	80030c8 <_puts_r+0x24>
 800311c:	4621      	mov	r1, r4
 800311e:	4628      	mov	r0, r5
 8003120:	f000 f89c 	bl	800325c <__swsetup_r>
 8003124:	2800      	cmp	r0, #0
 8003126:	d0dd      	beq.n	80030e4 <_puts_r+0x40>
 8003128:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800312c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800312e:	07da      	lsls	r2, r3, #31
 8003130:	d405      	bmi.n	800313e <_puts_r+0x9a>
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	059b      	lsls	r3, r3, #22
 8003136:	d402      	bmi.n	800313e <_puts_r+0x9a>
 8003138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800313a:	f000 fab6 	bl	80036aa <__retarget_lock_release_recursive>
 800313e:	4628      	mov	r0, r5
 8003140:	bd70      	pop	{r4, r5, r6, pc}
 8003142:	2b00      	cmp	r3, #0
 8003144:	da04      	bge.n	8003150 <_puts_r+0xac>
 8003146:	69a2      	ldr	r2, [r4, #24]
 8003148:	429a      	cmp	r2, r3
 800314a:	dc06      	bgt.n	800315a <_puts_r+0xb6>
 800314c:	290a      	cmp	r1, #10
 800314e:	d004      	beq.n	800315a <_puts_r+0xb6>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	6022      	str	r2, [r4, #0]
 8003156:	7019      	strb	r1, [r3, #0]
 8003158:	e7c5      	b.n	80030e6 <_puts_r+0x42>
 800315a:	4622      	mov	r2, r4
 800315c:	4628      	mov	r0, r5
 800315e:	f000 f82b 	bl	80031b8 <__swbuf_r>
 8003162:	3001      	adds	r0, #1
 8003164:	d1bf      	bne.n	80030e6 <_puts_r+0x42>
 8003166:	e7df      	b.n	8003128 <_puts_r+0x84>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	250a      	movs	r5, #10
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	6022      	str	r2, [r4, #0]
 8003170:	701d      	strb	r5, [r3, #0]
 8003172:	e7db      	b.n	800312c <_puts_r+0x88>
 8003174:	080041c8 	.word	0x080041c8
 8003178:	080041e8 	.word	0x080041e8
 800317c:	080041a8 	.word	0x080041a8

08003180 <puts>:
 8003180:	4b02      	ldr	r3, [pc, #8]	; (800318c <puts+0xc>)
 8003182:	4601      	mov	r1, r0
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f7ff bf8d 	b.w	80030a4 <_puts_r>
 800318a:	bf00      	nop
 800318c:	20000070 	.word	0x20000070

08003190 <strncpy>:
 8003190:	b510      	push	{r4, lr}
 8003192:	3901      	subs	r1, #1
 8003194:	4603      	mov	r3, r0
 8003196:	b132      	cbz	r2, 80031a6 <strncpy+0x16>
 8003198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800319c:	f803 4b01 	strb.w	r4, [r3], #1
 80031a0:	3a01      	subs	r2, #1
 80031a2:	2c00      	cmp	r4, #0
 80031a4:	d1f7      	bne.n	8003196 <strncpy+0x6>
 80031a6:	441a      	add	r2, r3
 80031a8:	2100      	movs	r1, #0
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d100      	bne.n	80031b0 <strncpy+0x20>
 80031ae:	bd10      	pop	{r4, pc}
 80031b0:	f803 1b01 	strb.w	r1, [r3], #1
 80031b4:	e7f9      	b.n	80031aa <strncpy+0x1a>
	...

080031b8 <__swbuf_r>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	460e      	mov	r6, r1
 80031bc:	4614      	mov	r4, r2
 80031be:	4605      	mov	r5, r0
 80031c0:	b118      	cbz	r0, 80031ca <__swbuf_r+0x12>
 80031c2:	6983      	ldr	r3, [r0, #24]
 80031c4:	b90b      	cbnz	r3, 80031ca <__swbuf_r+0x12>
 80031c6:	f000 f9d1 	bl	800356c <__sinit>
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <__swbuf_r+0x98>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d12b      	bne.n	8003228 <__swbuf_r+0x70>
 80031d0:	686c      	ldr	r4, [r5, #4]
 80031d2:	69a3      	ldr	r3, [r4, #24]
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	071a      	lsls	r2, r3, #28
 80031da:	d52f      	bpl.n	800323c <__swbuf_r+0x84>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	b36b      	cbz	r3, 800323c <__swbuf_r+0x84>
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	1ac0      	subs	r0, r0, r3
 80031e6:	6963      	ldr	r3, [r4, #20]
 80031e8:	b2f6      	uxtb	r6, r6
 80031ea:	4283      	cmp	r3, r0
 80031ec:	4637      	mov	r7, r6
 80031ee:	dc04      	bgt.n	80031fa <__swbuf_r+0x42>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 f926 	bl	8003444 <_fflush_r>
 80031f8:	bb30      	cbnz	r0, 8003248 <__swbuf_r+0x90>
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	60a3      	str	r3, [r4, #8]
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	6022      	str	r2, [r4, #0]
 8003206:	701e      	strb	r6, [r3, #0]
 8003208:	6963      	ldr	r3, [r4, #20]
 800320a:	3001      	adds	r0, #1
 800320c:	4283      	cmp	r3, r0
 800320e:	d004      	beq.n	800321a <__swbuf_r+0x62>
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	07db      	lsls	r3, r3, #31
 8003214:	d506      	bpl.n	8003224 <__swbuf_r+0x6c>
 8003216:	2e0a      	cmp	r6, #10
 8003218:	d104      	bne.n	8003224 <__swbuf_r+0x6c>
 800321a:	4621      	mov	r1, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f911 	bl	8003444 <_fflush_r>
 8003222:	b988      	cbnz	r0, 8003248 <__swbuf_r+0x90>
 8003224:	4638      	mov	r0, r7
 8003226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <__swbuf_r+0x9c>)
 800322a:	429c      	cmp	r4, r3
 800322c:	d101      	bne.n	8003232 <__swbuf_r+0x7a>
 800322e:	68ac      	ldr	r4, [r5, #8]
 8003230:	e7cf      	b.n	80031d2 <__swbuf_r+0x1a>
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <__swbuf_r+0xa0>)
 8003234:	429c      	cmp	r4, r3
 8003236:	bf08      	it	eq
 8003238:	68ec      	ldreq	r4, [r5, #12]
 800323a:	e7ca      	b.n	80031d2 <__swbuf_r+0x1a>
 800323c:	4621      	mov	r1, r4
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f80c 	bl	800325c <__swsetup_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0cb      	beq.n	80031e0 <__swbuf_r+0x28>
 8003248:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800324c:	e7ea      	b.n	8003224 <__swbuf_r+0x6c>
 800324e:	bf00      	nop
 8003250:	080041c8 	.word	0x080041c8
 8003254:	080041e8 	.word	0x080041e8
 8003258:	080041a8 	.word	0x080041a8

0800325c <__swsetup_r>:
 800325c:	4b32      	ldr	r3, [pc, #200]	; (8003328 <__swsetup_r+0xcc>)
 800325e:	b570      	push	{r4, r5, r6, lr}
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	4606      	mov	r6, r0
 8003264:	460c      	mov	r4, r1
 8003266:	b125      	cbz	r5, 8003272 <__swsetup_r+0x16>
 8003268:	69ab      	ldr	r3, [r5, #24]
 800326a:	b913      	cbnz	r3, 8003272 <__swsetup_r+0x16>
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f97d 	bl	800356c <__sinit>
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <__swsetup_r+0xd0>)
 8003274:	429c      	cmp	r4, r3
 8003276:	d10f      	bne.n	8003298 <__swsetup_r+0x3c>
 8003278:	686c      	ldr	r4, [r5, #4]
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003280:	0719      	lsls	r1, r3, #28
 8003282:	d42c      	bmi.n	80032de <__swsetup_r+0x82>
 8003284:	06dd      	lsls	r5, r3, #27
 8003286:	d411      	bmi.n	80032ac <__swsetup_r+0x50>
 8003288:	2309      	movs	r3, #9
 800328a:	6033      	str	r3, [r6, #0]
 800328c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003296:	e03e      	b.n	8003316 <__swsetup_r+0xba>
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <__swsetup_r+0xd4>)
 800329a:	429c      	cmp	r4, r3
 800329c:	d101      	bne.n	80032a2 <__swsetup_r+0x46>
 800329e:	68ac      	ldr	r4, [r5, #8]
 80032a0:	e7eb      	b.n	800327a <__swsetup_r+0x1e>
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <__swsetup_r+0xd8>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	bf08      	it	eq
 80032a8:	68ec      	ldreq	r4, [r5, #12]
 80032aa:	e7e6      	b.n	800327a <__swsetup_r+0x1e>
 80032ac:	0758      	lsls	r0, r3, #29
 80032ae:	d512      	bpl.n	80032d6 <__swsetup_r+0x7a>
 80032b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b2:	b141      	cbz	r1, 80032c6 <__swsetup_r+0x6a>
 80032b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b8:	4299      	cmp	r1, r3
 80032ba:	d002      	beq.n	80032c2 <__swsetup_r+0x66>
 80032bc:	4630      	mov	r0, r6
 80032be:	f000 fa5b 	bl	8003778 <_free_r>
 80032c2:	2300      	movs	r3, #0
 80032c4:	6363      	str	r3, [r4, #52]	; 0x34
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	2300      	movs	r3, #0
 80032d0:	6063      	str	r3, [r4, #4]
 80032d2:	6923      	ldr	r3, [r4, #16]
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	b94b      	cbnz	r3, 80032f6 <__swsetup_r+0x9a>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d003      	beq.n	80032f6 <__swsetup_r+0x9a>
 80032ee:	4621      	mov	r1, r4
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 fa01 	bl	80036f8 <__smakebuf_r>
 80032f6:	89a0      	ldrh	r0, [r4, #12]
 80032f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032fc:	f010 0301 	ands.w	r3, r0, #1
 8003300:	d00a      	beq.n	8003318 <__swsetup_r+0xbc>
 8003302:	2300      	movs	r3, #0
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	6963      	ldr	r3, [r4, #20]
 8003308:	425b      	negs	r3, r3
 800330a:	61a3      	str	r3, [r4, #24]
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b943      	cbnz	r3, 8003322 <__swsetup_r+0xc6>
 8003310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003314:	d1ba      	bne.n	800328c <__swsetup_r+0x30>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	0781      	lsls	r1, r0, #30
 800331a:	bf58      	it	pl
 800331c:	6963      	ldrpl	r3, [r4, #20]
 800331e:	60a3      	str	r3, [r4, #8]
 8003320:	e7f4      	b.n	800330c <__swsetup_r+0xb0>
 8003322:	2000      	movs	r0, #0
 8003324:	e7f7      	b.n	8003316 <__swsetup_r+0xba>
 8003326:	bf00      	nop
 8003328:	20000070 	.word	0x20000070
 800332c:	080041c8 	.word	0x080041c8
 8003330:	080041e8 	.word	0x080041e8
 8003334:	080041a8 	.word	0x080041a8

08003338 <__sflush_r>:
 8003338:	898a      	ldrh	r2, [r1, #12]
 800333a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333e:	4605      	mov	r5, r0
 8003340:	0710      	lsls	r0, r2, #28
 8003342:	460c      	mov	r4, r1
 8003344:	d458      	bmi.n	80033f8 <__sflush_r+0xc0>
 8003346:	684b      	ldr	r3, [r1, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	dc05      	bgt.n	8003358 <__sflush_r+0x20>
 800334c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	dc02      	bgt.n	8003358 <__sflush_r+0x20>
 8003352:	2000      	movs	r0, #0
 8003354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800335a:	2e00      	cmp	r6, #0
 800335c:	d0f9      	beq.n	8003352 <__sflush_r+0x1a>
 800335e:	2300      	movs	r3, #0
 8003360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003364:	682f      	ldr	r7, [r5, #0]
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	d032      	beq.n	80033d0 <__sflush_r+0x98>
 800336a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	075a      	lsls	r2, r3, #29
 8003370:	d505      	bpl.n	800337e <__sflush_r+0x46>
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	1ac0      	subs	r0, r0, r3
 8003376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003378:	b10b      	cbz	r3, 800337e <__sflush_r+0x46>
 800337a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800337c:	1ac0      	subs	r0, r0, r3
 800337e:	2300      	movs	r3, #0
 8003380:	4602      	mov	r2, r0
 8003382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003384:	6a21      	ldr	r1, [r4, #32]
 8003386:	4628      	mov	r0, r5
 8003388:	47b0      	blx	r6
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	d106      	bne.n	800339e <__sflush_r+0x66>
 8003390:	6829      	ldr	r1, [r5, #0]
 8003392:	291d      	cmp	r1, #29
 8003394:	d82c      	bhi.n	80033f0 <__sflush_r+0xb8>
 8003396:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <__sflush_r+0x108>)
 8003398:	40ca      	lsrs	r2, r1
 800339a:	07d6      	lsls	r6, r2, #31
 800339c:	d528      	bpl.n	80033f0 <__sflush_r+0xb8>
 800339e:	2200      	movs	r2, #0
 80033a0:	6062      	str	r2, [r4, #4]
 80033a2:	04d9      	lsls	r1, r3, #19
 80033a4:	6922      	ldr	r2, [r4, #16]
 80033a6:	6022      	str	r2, [r4, #0]
 80033a8:	d504      	bpl.n	80033b4 <__sflush_r+0x7c>
 80033aa:	1c42      	adds	r2, r0, #1
 80033ac:	d101      	bne.n	80033b2 <__sflush_r+0x7a>
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	b903      	cbnz	r3, 80033b4 <__sflush_r+0x7c>
 80033b2:	6560      	str	r0, [r4, #84]	; 0x54
 80033b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033b6:	602f      	str	r7, [r5, #0]
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d0ca      	beq.n	8003352 <__sflush_r+0x1a>
 80033bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033c0:	4299      	cmp	r1, r3
 80033c2:	d002      	beq.n	80033ca <__sflush_r+0x92>
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 f9d7 	bl	8003778 <_free_r>
 80033ca:	2000      	movs	r0, #0
 80033cc:	6360      	str	r0, [r4, #52]	; 0x34
 80033ce:	e7c1      	b.n	8003354 <__sflush_r+0x1c>
 80033d0:	6a21      	ldr	r1, [r4, #32]
 80033d2:	2301      	movs	r3, #1
 80033d4:	4628      	mov	r0, r5
 80033d6:	47b0      	blx	r6
 80033d8:	1c41      	adds	r1, r0, #1
 80033da:	d1c7      	bne.n	800336c <__sflush_r+0x34>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c4      	beq.n	800336c <__sflush_r+0x34>
 80033e2:	2b1d      	cmp	r3, #29
 80033e4:	d001      	beq.n	80033ea <__sflush_r+0xb2>
 80033e6:	2b16      	cmp	r3, #22
 80033e8:	d101      	bne.n	80033ee <__sflush_r+0xb6>
 80033ea:	602f      	str	r7, [r5, #0]
 80033ec:	e7b1      	b.n	8003352 <__sflush_r+0x1a>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	e7ad      	b.n	8003354 <__sflush_r+0x1c>
 80033f8:	690f      	ldr	r7, [r1, #16]
 80033fa:	2f00      	cmp	r7, #0
 80033fc:	d0a9      	beq.n	8003352 <__sflush_r+0x1a>
 80033fe:	0793      	lsls	r3, r2, #30
 8003400:	680e      	ldr	r6, [r1, #0]
 8003402:	bf08      	it	eq
 8003404:	694b      	ldreq	r3, [r1, #20]
 8003406:	600f      	str	r7, [r1, #0]
 8003408:	bf18      	it	ne
 800340a:	2300      	movne	r3, #0
 800340c:	eba6 0807 	sub.w	r8, r6, r7
 8003410:	608b      	str	r3, [r1, #8]
 8003412:	f1b8 0f00 	cmp.w	r8, #0
 8003416:	dd9c      	ble.n	8003352 <__sflush_r+0x1a>
 8003418:	6a21      	ldr	r1, [r4, #32]
 800341a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800341c:	4643      	mov	r3, r8
 800341e:	463a      	mov	r2, r7
 8003420:	4628      	mov	r0, r5
 8003422:	47b0      	blx	r6
 8003424:	2800      	cmp	r0, #0
 8003426:	dc06      	bgt.n	8003436 <__sflush_r+0xfe>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003434:	e78e      	b.n	8003354 <__sflush_r+0x1c>
 8003436:	4407      	add	r7, r0
 8003438:	eba8 0800 	sub.w	r8, r8, r0
 800343c:	e7e9      	b.n	8003412 <__sflush_r+0xda>
 800343e:	bf00      	nop
 8003440:	20400001 	.word	0x20400001

08003444 <_fflush_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	690b      	ldr	r3, [r1, #16]
 8003448:	4605      	mov	r5, r0
 800344a:	460c      	mov	r4, r1
 800344c:	b913      	cbnz	r3, 8003454 <_fflush_r+0x10>
 800344e:	2500      	movs	r5, #0
 8003450:	4628      	mov	r0, r5
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	b118      	cbz	r0, 800345e <_fflush_r+0x1a>
 8003456:	6983      	ldr	r3, [r0, #24]
 8003458:	b90b      	cbnz	r3, 800345e <_fflush_r+0x1a>
 800345a:	f000 f887 	bl	800356c <__sinit>
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <_fflush_r+0x6c>)
 8003460:	429c      	cmp	r4, r3
 8003462:	d11b      	bne.n	800349c <_fflush_r+0x58>
 8003464:	686c      	ldr	r4, [r5, #4]
 8003466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ef      	beq.n	800344e <_fflush_r+0xa>
 800346e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003470:	07d0      	lsls	r0, r2, #31
 8003472:	d404      	bmi.n	800347e <_fflush_r+0x3a>
 8003474:	0599      	lsls	r1, r3, #22
 8003476:	d402      	bmi.n	800347e <_fflush_r+0x3a>
 8003478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800347a:	f000 f915 	bl	80036a8 <__retarget_lock_acquire_recursive>
 800347e:	4628      	mov	r0, r5
 8003480:	4621      	mov	r1, r4
 8003482:	f7ff ff59 	bl	8003338 <__sflush_r>
 8003486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003488:	07da      	lsls	r2, r3, #31
 800348a:	4605      	mov	r5, r0
 800348c:	d4e0      	bmi.n	8003450 <_fflush_r+0xc>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	059b      	lsls	r3, r3, #22
 8003492:	d4dd      	bmi.n	8003450 <_fflush_r+0xc>
 8003494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003496:	f000 f908 	bl	80036aa <__retarget_lock_release_recursive>
 800349a:	e7d9      	b.n	8003450 <_fflush_r+0xc>
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <_fflush_r+0x70>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d101      	bne.n	80034a6 <_fflush_r+0x62>
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	e7df      	b.n	8003466 <_fflush_r+0x22>
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <_fflush_r+0x74>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	bf08      	it	eq
 80034ac:	68ec      	ldreq	r4, [r5, #12]
 80034ae:	e7da      	b.n	8003466 <_fflush_r+0x22>
 80034b0:	080041c8 	.word	0x080041c8
 80034b4:	080041e8 	.word	0x080041e8
 80034b8:	080041a8 	.word	0x080041a8

080034bc <std>:
 80034bc:	2300      	movs	r3, #0
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	e9c0 3300 	strd	r3, r3, [r0]
 80034c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ca:	6083      	str	r3, [r0, #8]
 80034cc:	8181      	strh	r1, [r0, #12]
 80034ce:	6643      	str	r3, [r0, #100]	; 0x64
 80034d0:	81c2      	strh	r2, [r0, #14]
 80034d2:	6183      	str	r3, [r0, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2208      	movs	r2, #8
 80034d8:	305c      	adds	r0, #92	; 0x5c
 80034da:	f7ff fdc3 	bl	8003064 <memset>
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <std+0x38>)
 80034e0:	6263      	str	r3, [r4, #36]	; 0x24
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <std+0x3c>)
 80034e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <std+0x40>)
 80034e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <std+0x44>)
 80034ec:	6224      	str	r4, [r4, #32]
 80034ee:	6323      	str	r3, [r4, #48]	; 0x30
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	bf00      	nop
 80034f4:	08003f35 	.word	0x08003f35
 80034f8:	08003f57 	.word	0x08003f57
 80034fc:	08003f8f 	.word	0x08003f8f
 8003500:	08003fb3 	.word	0x08003fb3

08003504 <_cleanup_r>:
 8003504:	4901      	ldr	r1, [pc, #4]	; (800350c <_cleanup_r+0x8>)
 8003506:	f000 b8af 	b.w	8003668 <_fwalk_reent>
 800350a:	bf00      	nop
 800350c:	08003445 	.word	0x08003445

08003510 <__sfmoreglue>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2268      	movs	r2, #104	; 0x68
 8003514:	1e4d      	subs	r5, r1, #1
 8003516:	4355      	muls	r5, r2
 8003518:	460e      	mov	r6, r1
 800351a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800351e:	f000 f997 	bl	8003850 <_malloc_r>
 8003522:	4604      	mov	r4, r0
 8003524:	b140      	cbz	r0, 8003538 <__sfmoreglue+0x28>
 8003526:	2100      	movs	r1, #0
 8003528:	e9c0 1600 	strd	r1, r6, [r0]
 800352c:	300c      	adds	r0, #12
 800352e:	60a0      	str	r0, [r4, #8]
 8003530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003534:	f7ff fd96 	bl	8003064 <memset>
 8003538:	4620      	mov	r0, r4
 800353a:	bd70      	pop	{r4, r5, r6, pc}

0800353c <__sfp_lock_acquire>:
 800353c:	4801      	ldr	r0, [pc, #4]	; (8003544 <__sfp_lock_acquire+0x8>)
 800353e:	f000 b8b3 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 8003542:	bf00      	nop
 8003544:	20000145 	.word	0x20000145

08003548 <__sfp_lock_release>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__sfp_lock_release+0x8>)
 800354a:	f000 b8ae 	b.w	80036aa <__retarget_lock_release_recursive>
 800354e:	bf00      	nop
 8003550:	20000145 	.word	0x20000145

08003554 <__sinit_lock_acquire>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__sinit_lock_acquire+0x8>)
 8003556:	f000 b8a7 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 800355a:	bf00      	nop
 800355c:	20000146 	.word	0x20000146

08003560 <__sinit_lock_release>:
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <__sinit_lock_release+0x8>)
 8003562:	f000 b8a2 	b.w	80036aa <__retarget_lock_release_recursive>
 8003566:	bf00      	nop
 8003568:	20000146 	.word	0x20000146

0800356c <__sinit>:
 800356c:	b510      	push	{r4, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	f7ff fff0 	bl	8003554 <__sinit_lock_acquire>
 8003574:	69a3      	ldr	r3, [r4, #24]
 8003576:	b11b      	cbz	r3, 8003580 <__sinit+0x14>
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800357c:	f7ff bff0 	b.w	8003560 <__sinit_lock_release>
 8003580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003584:	6523      	str	r3, [r4, #80]	; 0x50
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <__sinit+0x68>)
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <__sinit+0x6c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62a2      	str	r2, [r4, #40]	; 0x28
 800358e:	42a3      	cmp	r3, r4
 8003590:	bf04      	itt	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	61a3      	streq	r3, [r4, #24]
 8003596:	4620      	mov	r0, r4
 8003598:	f000 f820 	bl	80035dc <__sfp>
 800359c:	6060      	str	r0, [r4, #4]
 800359e:	4620      	mov	r0, r4
 80035a0:	f000 f81c 	bl	80035dc <__sfp>
 80035a4:	60a0      	str	r0, [r4, #8]
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 f818 	bl	80035dc <__sfp>
 80035ac:	2200      	movs	r2, #0
 80035ae:	60e0      	str	r0, [r4, #12]
 80035b0:	2104      	movs	r1, #4
 80035b2:	6860      	ldr	r0, [r4, #4]
 80035b4:	f7ff ff82 	bl	80034bc <std>
 80035b8:	68a0      	ldr	r0, [r4, #8]
 80035ba:	2201      	movs	r2, #1
 80035bc:	2109      	movs	r1, #9
 80035be:	f7ff ff7d 	bl	80034bc <std>
 80035c2:	68e0      	ldr	r0, [r4, #12]
 80035c4:	2202      	movs	r2, #2
 80035c6:	2112      	movs	r1, #18
 80035c8:	f7ff ff78 	bl	80034bc <std>
 80035cc:	2301      	movs	r3, #1
 80035ce:	61a3      	str	r3, [r4, #24]
 80035d0:	e7d2      	b.n	8003578 <__sinit+0xc>
 80035d2:	bf00      	nop
 80035d4:	080041a4 	.word	0x080041a4
 80035d8:	08003505 	.word	0x08003505

080035dc <__sfp>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	4607      	mov	r7, r0
 80035e0:	f7ff ffac 	bl	800353c <__sfp_lock_acquire>
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <__sfp+0x84>)
 80035e6:	681e      	ldr	r6, [r3, #0]
 80035e8:	69b3      	ldr	r3, [r6, #24]
 80035ea:	b913      	cbnz	r3, 80035f2 <__sfp+0x16>
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff ffbd 	bl	800356c <__sinit>
 80035f2:	3648      	adds	r6, #72	; 0x48
 80035f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	d503      	bpl.n	8003604 <__sfp+0x28>
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	b30b      	cbz	r3, 8003644 <__sfp+0x68>
 8003600:	6836      	ldr	r6, [r6, #0]
 8003602:	e7f7      	b.n	80035f4 <__sfp+0x18>
 8003604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003608:	b9d5      	cbnz	r5, 8003640 <__sfp+0x64>
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <__sfp+0x88>)
 800360c:	60e3      	str	r3, [r4, #12]
 800360e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003612:	6665      	str	r5, [r4, #100]	; 0x64
 8003614:	f000 f847 	bl	80036a6 <__retarget_lock_init_recursive>
 8003618:	f7ff ff96 	bl	8003548 <__sfp_lock_release>
 800361c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003624:	6025      	str	r5, [r4, #0]
 8003626:	61a5      	str	r5, [r4, #24]
 8003628:	2208      	movs	r2, #8
 800362a:	4629      	mov	r1, r5
 800362c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003630:	f7ff fd18 	bl	8003064 <memset>
 8003634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800363c:	4620      	mov	r0, r4
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003640:	3468      	adds	r4, #104	; 0x68
 8003642:	e7d9      	b.n	80035f8 <__sfp+0x1c>
 8003644:	2104      	movs	r1, #4
 8003646:	4638      	mov	r0, r7
 8003648:	f7ff ff62 	bl	8003510 <__sfmoreglue>
 800364c:	4604      	mov	r4, r0
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	2800      	cmp	r0, #0
 8003652:	d1d5      	bne.n	8003600 <__sfp+0x24>
 8003654:	f7ff ff78 	bl	8003548 <__sfp_lock_release>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	e7ee      	b.n	800363c <__sfp+0x60>
 800365e:	bf00      	nop
 8003660:	080041a4 	.word	0x080041a4
 8003664:	ffff0001 	.word	0xffff0001

08003668 <_fwalk_reent>:
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	4606      	mov	r6, r0
 800366e:	4688      	mov	r8, r1
 8003670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003674:	2700      	movs	r7, #0
 8003676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800367a:	f1b9 0901 	subs.w	r9, r9, #1
 800367e:	d505      	bpl.n	800368c <_fwalk_reent+0x24>
 8003680:	6824      	ldr	r4, [r4, #0]
 8003682:	2c00      	cmp	r4, #0
 8003684:	d1f7      	bne.n	8003676 <_fwalk_reent+0xe>
 8003686:	4638      	mov	r0, r7
 8003688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368c:	89ab      	ldrh	r3, [r5, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d907      	bls.n	80036a2 <_fwalk_reent+0x3a>
 8003692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003696:	3301      	adds	r3, #1
 8003698:	d003      	beq.n	80036a2 <_fwalk_reent+0x3a>
 800369a:	4629      	mov	r1, r5
 800369c:	4630      	mov	r0, r6
 800369e:	47c0      	blx	r8
 80036a0:	4307      	orrs	r7, r0
 80036a2:	3568      	adds	r5, #104	; 0x68
 80036a4:	e7e9      	b.n	800367a <_fwalk_reent+0x12>

080036a6 <__retarget_lock_init_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <__retarget_lock_acquire_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_release_recursive>:
 80036aa:	4770      	bx	lr

080036ac <__swhatbuf_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460e      	mov	r6, r1
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	2900      	cmp	r1, #0
 80036b6:	b096      	sub	sp, #88	; 0x58
 80036b8:	4614      	mov	r4, r2
 80036ba:	461d      	mov	r5, r3
 80036bc:	da08      	bge.n	80036d0 <__swhatbuf_r+0x24>
 80036be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	602a      	str	r2, [r5, #0]
 80036c6:	061a      	lsls	r2, r3, #24
 80036c8:	d410      	bmi.n	80036ec <__swhatbuf_r+0x40>
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	e00e      	b.n	80036ee <__swhatbuf_r+0x42>
 80036d0:	466a      	mov	r2, sp
 80036d2:	f000 fc95 	bl	8004000 <_fstat_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	dbf1      	blt.n	80036be <__swhatbuf_r+0x12>
 80036da:	9a01      	ldr	r2, [sp, #4]
 80036dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e4:	425a      	negs	r2, r3
 80036e6:	415a      	adcs	r2, r3
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	e7ee      	b.n	80036ca <__swhatbuf_r+0x1e>
 80036ec:	2340      	movs	r3, #64	; 0x40
 80036ee:	2000      	movs	r0, #0
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	b016      	add	sp, #88	; 0x58
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036f8 <__smakebuf_r>:
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	079d      	lsls	r5, r3, #30
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	d507      	bpl.n	8003714 <__smakebuf_r+0x1c>
 8003704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2301      	movs	r3, #1
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	ab01      	add	r3, sp, #4
 8003716:	466a      	mov	r2, sp
 8003718:	f7ff ffc8 	bl	80036ac <__swhatbuf_r>
 800371c:	9900      	ldr	r1, [sp, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f895 	bl	8003850 <_malloc_r>
 8003726:	b948      	cbnz	r0, 800373c <__smakebuf_r+0x44>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	059a      	lsls	r2, r3, #22
 800372e:	d4ef      	bmi.n	8003710 <__smakebuf_r+0x18>
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e7e3      	b.n	8003704 <__smakebuf_r+0xc>
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <__smakebuf_r+0x7c>)
 800373e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	6020      	str	r0, [r4, #0]
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	6163      	str	r3, [r4, #20]
 800374e:	9b01      	ldr	r3, [sp, #4]
 8003750:	6120      	str	r0, [r4, #16]
 8003752:	b15b      	cbz	r3, 800376c <__smakebuf_r+0x74>
 8003754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003758:	4630      	mov	r0, r6
 800375a:	f000 fc63 	bl	8004024 <_isatty_r>
 800375e:	b128      	cbz	r0, 800376c <__smakebuf_r+0x74>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	89a0      	ldrh	r0, [r4, #12]
 800376e:	4305      	orrs	r5, r0
 8003770:	81a5      	strh	r5, [r4, #12]
 8003772:	e7cd      	b.n	8003710 <__smakebuf_r+0x18>
 8003774:	08003505 	.word	0x08003505

08003778 <_free_r>:
 8003778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800377a:	2900      	cmp	r1, #0
 800377c:	d044      	beq.n	8003808 <_free_r+0x90>
 800377e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003782:	9001      	str	r0, [sp, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f1a1 0404 	sub.w	r4, r1, #4
 800378a:	bfb8      	it	lt
 800378c:	18e4      	addlt	r4, r4, r3
 800378e:	f000 fc6b 	bl	8004068 <__malloc_lock>
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <_free_r+0x94>)
 8003794:	9801      	ldr	r0, [sp, #4]
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	b933      	cbnz	r3, 80037a8 <_free_r+0x30>
 800379a:	6063      	str	r3, [r4, #4]
 800379c:	6014      	str	r4, [r2, #0]
 800379e:	b003      	add	sp, #12
 80037a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037a4:	f000 bc66 	b.w	8004074 <__malloc_unlock>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d908      	bls.n	80037be <_free_r+0x46>
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	1961      	adds	r1, r4, r5
 80037b0:	428b      	cmp	r3, r1
 80037b2:	bf01      	itttt	eq
 80037b4:	6819      	ldreq	r1, [r3, #0]
 80037b6:	685b      	ldreq	r3, [r3, #4]
 80037b8:	1949      	addeq	r1, r1, r5
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	e7ed      	b.n	800379a <_free_r+0x22>
 80037be:	461a      	mov	r2, r3
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b10b      	cbz	r3, 80037c8 <_free_r+0x50>
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d9fa      	bls.n	80037be <_free_r+0x46>
 80037c8:	6811      	ldr	r1, [r2, #0]
 80037ca:	1855      	adds	r5, r2, r1
 80037cc:	42a5      	cmp	r5, r4
 80037ce:	d10b      	bne.n	80037e8 <_free_r+0x70>
 80037d0:	6824      	ldr	r4, [r4, #0]
 80037d2:	4421      	add	r1, r4
 80037d4:	1854      	adds	r4, r2, r1
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	6011      	str	r1, [r2, #0]
 80037da:	d1e0      	bne.n	800379e <_free_r+0x26>
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	6053      	str	r3, [r2, #4]
 80037e2:	4421      	add	r1, r4
 80037e4:	6011      	str	r1, [r2, #0]
 80037e6:	e7da      	b.n	800379e <_free_r+0x26>
 80037e8:	d902      	bls.n	80037f0 <_free_r+0x78>
 80037ea:	230c      	movs	r3, #12
 80037ec:	6003      	str	r3, [r0, #0]
 80037ee:	e7d6      	b.n	800379e <_free_r+0x26>
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	1961      	adds	r1, r4, r5
 80037f4:	428b      	cmp	r3, r1
 80037f6:	bf04      	itt	eq
 80037f8:	6819      	ldreq	r1, [r3, #0]
 80037fa:	685b      	ldreq	r3, [r3, #4]
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	bf04      	itt	eq
 8003800:	1949      	addeq	r1, r1, r5
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	6054      	str	r4, [r2, #4]
 8003806:	e7ca      	b.n	800379e <_free_r+0x26>
 8003808:	b003      	add	sp, #12
 800380a:	bd30      	pop	{r4, r5, pc}
 800380c:	20000148 	.word	0x20000148

08003810 <sbrk_aligned>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0e      	ldr	r6, [pc, #56]	; (800384c <sbrk_aligned+0x3c>)
 8003814:	460c      	mov	r4, r1
 8003816:	6831      	ldr	r1, [r6, #0]
 8003818:	4605      	mov	r5, r0
 800381a:	b911      	cbnz	r1, 8003822 <sbrk_aligned+0x12>
 800381c:	f000 fb7a 	bl	8003f14 <_sbrk_r>
 8003820:	6030      	str	r0, [r6, #0]
 8003822:	4621      	mov	r1, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 fb75 	bl	8003f14 <_sbrk_r>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d00a      	beq.n	8003844 <sbrk_aligned+0x34>
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d007      	beq.n	8003848 <sbrk_aligned+0x38>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4628      	mov	r0, r5
 800383c:	f000 fb6a 	bl	8003f14 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d101      	bne.n	8003848 <sbrk_aligned+0x38>
 8003844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003848:	4620      	mov	r0, r4
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	2000014c 	.word	0x2000014c

08003850 <_malloc_r>:
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	1ccd      	adds	r5, r1, #3
 8003856:	f025 0503 	bic.w	r5, r5, #3
 800385a:	3508      	adds	r5, #8
 800385c:	2d0c      	cmp	r5, #12
 800385e:	bf38      	it	cc
 8003860:	250c      	movcc	r5, #12
 8003862:	2d00      	cmp	r5, #0
 8003864:	4607      	mov	r7, r0
 8003866:	db01      	blt.n	800386c <_malloc_r+0x1c>
 8003868:	42a9      	cmp	r1, r5
 800386a:	d905      	bls.n	8003878 <_malloc_r+0x28>
 800386c:	230c      	movs	r3, #12
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	2600      	movs	r6, #0
 8003872:	4630      	mov	r0, r6
 8003874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003878:	4e2e      	ldr	r6, [pc, #184]	; (8003934 <_malloc_r+0xe4>)
 800387a:	f000 fbf5 	bl	8004068 <__malloc_lock>
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	461c      	mov	r4, r3
 8003882:	bb34      	cbnz	r4, 80038d2 <_malloc_r+0x82>
 8003884:	4629      	mov	r1, r5
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff ffc2 	bl	8003810 <sbrk_aligned>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	4604      	mov	r4, r0
 8003890:	d14d      	bne.n	800392e <_malloc_r+0xde>
 8003892:	6834      	ldr	r4, [r6, #0]
 8003894:	4626      	mov	r6, r4
 8003896:	2e00      	cmp	r6, #0
 8003898:	d140      	bne.n	800391c <_malloc_r+0xcc>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	4631      	mov	r1, r6
 800389e:	4638      	mov	r0, r7
 80038a0:	eb04 0803 	add.w	r8, r4, r3
 80038a4:	f000 fb36 	bl	8003f14 <_sbrk_r>
 80038a8:	4580      	cmp	r8, r0
 80038aa:	d13a      	bne.n	8003922 <_malloc_r+0xd2>
 80038ac:	6821      	ldr	r1, [r4, #0]
 80038ae:	3503      	adds	r5, #3
 80038b0:	1a6d      	subs	r5, r5, r1
 80038b2:	f025 0503 	bic.w	r5, r5, #3
 80038b6:	3508      	adds	r5, #8
 80038b8:	2d0c      	cmp	r5, #12
 80038ba:	bf38      	it	cc
 80038bc:	250c      	movcc	r5, #12
 80038be:	4629      	mov	r1, r5
 80038c0:	4638      	mov	r0, r7
 80038c2:	f7ff ffa5 	bl	8003810 <sbrk_aligned>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d02b      	beq.n	8003922 <_malloc_r+0xd2>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	442b      	add	r3, r5
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e00e      	b.n	80038f0 <_malloc_r+0xa0>
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	1b52      	subs	r2, r2, r5
 80038d6:	d41e      	bmi.n	8003916 <_malloc_r+0xc6>
 80038d8:	2a0b      	cmp	r2, #11
 80038da:	d916      	bls.n	800390a <_malloc_r+0xba>
 80038dc:	1961      	adds	r1, r4, r5
 80038de:	42a3      	cmp	r3, r4
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	bf18      	it	ne
 80038e4:	6059      	strne	r1, [r3, #4]
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	bf08      	it	eq
 80038ea:	6031      	streq	r1, [r6, #0]
 80038ec:	5162      	str	r2, [r4, r5]
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	4638      	mov	r0, r7
 80038f2:	f104 060b 	add.w	r6, r4, #11
 80038f6:	f000 fbbd 	bl	8004074 <__malloc_unlock>
 80038fa:	f026 0607 	bic.w	r6, r6, #7
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	1af2      	subs	r2, r6, r3
 8003902:	d0b6      	beq.n	8003872 <_malloc_r+0x22>
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	50a3      	str	r3, [r4, r2]
 8003908:	e7b3      	b.n	8003872 <_malloc_r+0x22>
 800390a:	6862      	ldr	r2, [r4, #4]
 800390c:	42a3      	cmp	r3, r4
 800390e:	bf0c      	ite	eq
 8003910:	6032      	streq	r2, [r6, #0]
 8003912:	605a      	strne	r2, [r3, #4]
 8003914:	e7ec      	b.n	80038f0 <_malloc_r+0xa0>
 8003916:	4623      	mov	r3, r4
 8003918:	6864      	ldr	r4, [r4, #4]
 800391a:	e7b2      	b.n	8003882 <_malloc_r+0x32>
 800391c:	4634      	mov	r4, r6
 800391e:	6876      	ldr	r6, [r6, #4]
 8003920:	e7b9      	b.n	8003896 <_malloc_r+0x46>
 8003922:	230c      	movs	r3, #12
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4638      	mov	r0, r7
 8003928:	f000 fba4 	bl	8004074 <__malloc_unlock>
 800392c:	e7a1      	b.n	8003872 <_malloc_r+0x22>
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	e7de      	b.n	80038f0 <_malloc_r+0xa0>
 8003932:	bf00      	nop
 8003934:	20000148 	.word	0x20000148

08003938 <__sfputc_r>:
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	b410      	push	{r4}
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	da08      	bge.n	8003956 <__sfputc_r+0x1e>
 8003944:	6994      	ldr	r4, [r2, #24]
 8003946:	42a3      	cmp	r3, r4
 8003948:	db01      	blt.n	800394e <__sfputc_r+0x16>
 800394a:	290a      	cmp	r1, #10
 800394c:	d103      	bne.n	8003956 <__sfputc_r+0x1e>
 800394e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003952:	f7ff bc31 	b.w	80031b8 <__swbuf_r>
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	1c58      	adds	r0, r3, #1
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	7019      	strb	r1, [r3, #0]
 800395e:	4608      	mov	r0, r1
 8003960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003964:	4770      	bx	lr

08003966 <__sfputs_r>:
 8003966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003968:	4606      	mov	r6, r0
 800396a:	460f      	mov	r7, r1
 800396c:	4614      	mov	r4, r2
 800396e:	18d5      	adds	r5, r2, r3
 8003970:	42ac      	cmp	r4, r5
 8003972:	d101      	bne.n	8003978 <__sfputs_r+0x12>
 8003974:	2000      	movs	r0, #0
 8003976:	e007      	b.n	8003988 <__sfputs_r+0x22>
 8003978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397c:	463a      	mov	r2, r7
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffda 	bl	8003938 <__sfputc_r>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d1f3      	bne.n	8003970 <__sfputs_r+0xa>
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800398c <_vfiprintf_r>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	460d      	mov	r5, r1
 8003992:	b09d      	sub	sp, #116	; 0x74
 8003994:	4614      	mov	r4, r2
 8003996:	4698      	mov	r8, r3
 8003998:	4606      	mov	r6, r0
 800399a:	b118      	cbz	r0, 80039a4 <_vfiprintf_r+0x18>
 800399c:	6983      	ldr	r3, [r0, #24]
 800399e:	b90b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x18>
 80039a0:	f7ff fde4 	bl	800356c <__sinit>
 80039a4:	4b89      	ldr	r3, [pc, #548]	; (8003bcc <_vfiprintf_r+0x240>)
 80039a6:	429d      	cmp	r5, r3
 80039a8:	d11b      	bne.n	80039e2 <_vfiprintf_r+0x56>
 80039aa:	6875      	ldr	r5, [r6, #4]
 80039ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ae:	07d9      	lsls	r1, r3, #31
 80039b0:	d405      	bmi.n	80039be <_vfiprintf_r+0x32>
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	059a      	lsls	r2, r3, #22
 80039b6:	d402      	bmi.n	80039be <_vfiprintf_r+0x32>
 80039b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ba:	f7ff fe75 	bl	80036a8 <__retarget_lock_acquire_recursive>
 80039be:	89ab      	ldrh	r3, [r5, #12]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	d501      	bpl.n	80039c8 <_vfiprintf_r+0x3c>
 80039c4:	692b      	ldr	r3, [r5, #16]
 80039c6:	b9eb      	cbnz	r3, 8003a04 <_vfiprintf_r+0x78>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4630      	mov	r0, r6
 80039cc:	f7ff fc46 	bl	800325c <__swsetup_r>
 80039d0:	b1c0      	cbz	r0, 8003a04 <_vfiprintf_r+0x78>
 80039d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039d4:	07dc      	lsls	r4, r3, #31
 80039d6:	d50e      	bpl.n	80039f6 <_vfiprintf_r+0x6a>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039dc:	b01d      	add	sp, #116	; 0x74
 80039de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <_vfiprintf_r+0x244>)
 80039e4:	429d      	cmp	r5, r3
 80039e6:	d101      	bne.n	80039ec <_vfiprintf_r+0x60>
 80039e8:	68b5      	ldr	r5, [r6, #8]
 80039ea:	e7df      	b.n	80039ac <_vfiprintf_r+0x20>
 80039ec:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <_vfiprintf_r+0x248>)
 80039ee:	429d      	cmp	r5, r3
 80039f0:	bf08      	it	eq
 80039f2:	68f5      	ldreq	r5, [r6, #12]
 80039f4:	e7da      	b.n	80039ac <_vfiprintf_r+0x20>
 80039f6:	89ab      	ldrh	r3, [r5, #12]
 80039f8:	0598      	lsls	r0, r3, #22
 80039fa:	d4ed      	bmi.n	80039d8 <_vfiprintf_r+0x4c>
 80039fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fe:	f7ff fe54 	bl	80036aa <__retarget_lock_release_recursive>
 8003a02:	e7e9      	b.n	80039d8 <_vfiprintf_r+0x4c>
 8003a04:	2300      	movs	r3, #0
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
 8003a08:	2320      	movs	r3, #32
 8003a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a12:	2330      	movs	r3, #48	; 0x30
 8003a14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003bd8 <_vfiprintf_r+0x24c>
 8003a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a1c:	f04f 0901 	mov.w	r9, #1
 8003a20:	4623      	mov	r3, r4
 8003a22:	469a      	mov	sl, r3
 8003a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a28:	b10a      	cbz	r2, 8003a2e <_vfiprintf_r+0xa2>
 8003a2a:	2a25      	cmp	r2, #37	; 0x25
 8003a2c:	d1f9      	bne.n	8003a22 <_vfiprintf_r+0x96>
 8003a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a32:	d00b      	beq.n	8003a4c <_vfiprintf_r+0xc0>
 8003a34:	465b      	mov	r3, fp
 8003a36:	4622      	mov	r2, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7ff ff93 	bl	8003966 <__sfputs_r>
 8003a40:	3001      	adds	r0, #1
 8003a42:	f000 80aa 	beq.w	8003b9a <_vfiprintf_r+0x20e>
 8003a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a48:	445a      	add	r2, fp
 8003a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a2 	beq.w	8003b9a <_vfiprintf_r+0x20e>
 8003a56:	2300      	movs	r3, #0
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a60:	f10a 0a01 	add.w	sl, sl, #1
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	9307      	str	r3, [sp, #28]
 8003a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a6e:	4654      	mov	r4, sl
 8003a70:	2205      	movs	r2, #5
 8003a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a76:	4858      	ldr	r0, [pc, #352]	; (8003bd8 <_vfiprintf_r+0x24c>)
 8003a78:	f7fc fbca 	bl	8000210 <memchr>
 8003a7c:	9a04      	ldr	r2, [sp, #16]
 8003a7e:	b9d8      	cbnz	r0, 8003ab8 <_vfiprintf_r+0x12c>
 8003a80:	06d1      	lsls	r1, r2, #27
 8003a82:	bf44      	itt	mi
 8003a84:	2320      	movmi	r3, #32
 8003a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a8a:	0713      	lsls	r3, r2, #28
 8003a8c:	bf44      	itt	mi
 8003a8e:	232b      	movmi	r3, #43	; 0x2b
 8003a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a94:	f89a 3000 	ldrb.w	r3, [sl]
 8003a98:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9a:	d015      	beq.n	8003ac8 <_vfiprintf_r+0x13c>
 8003a9c:	9a07      	ldr	r2, [sp, #28]
 8003a9e:	4654      	mov	r4, sl
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f04f 0c0a 	mov.w	ip, #10
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aac:	3b30      	subs	r3, #48	; 0x30
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d94e      	bls.n	8003b50 <_vfiprintf_r+0x1c4>
 8003ab2:	b1b0      	cbz	r0, 8003ae2 <_vfiprintf_r+0x156>
 8003ab4:	9207      	str	r2, [sp, #28]
 8003ab6:	e014      	b.n	8003ae2 <_vfiprintf_r+0x156>
 8003ab8:	eba0 0308 	sub.w	r3, r0, r8
 8003abc:	fa09 f303 	lsl.w	r3, r9, r3
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	46a2      	mov	sl, r4
 8003ac6:	e7d2      	b.n	8003a6e <_vfiprintf_r+0xe2>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	1d19      	adds	r1, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9103      	str	r1, [sp, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bfbb      	ittet	lt
 8003ad4:	425b      	neglt	r3, r3
 8003ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8003ada:	9307      	strge	r3, [sp, #28]
 8003adc:	9307      	strlt	r3, [sp, #28]
 8003ade:	bfb8      	it	lt
 8003ae0:	9204      	strlt	r2, [sp, #16]
 8003ae2:	7823      	ldrb	r3, [r4, #0]
 8003ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae6:	d10c      	bne.n	8003b02 <_vfiprintf_r+0x176>
 8003ae8:	7863      	ldrb	r3, [r4, #1]
 8003aea:	2b2a      	cmp	r3, #42	; 0x2a
 8003aec:	d135      	bne.n	8003b5a <_vfiprintf_r+0x1ce>
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	9203      	str	r2, [sp, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfb8      	it	lt
 8003afa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003afe:	3402      	adds	r4, #2
 8003b00:	9305      	str	r3, [sp, #20]
 8003b02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003be8 <_vfiprintf_r+0x25c>
 8003b06:	7821      	ldrb	r1, [r4, #0]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4650      	mov	r0, sl
 8003b0c:	f7fc fb80 	bl	8000210 <memchr>
 8003b10:	b140      	cbz	r0, 8003b24 <_vfiprintf_r+0x198>
 8003b12:	2340      	movs	r3, #64	; 0x40
 8003b14:	eba0 000a 	sub.w	r0, r0, sl
 8003b18:	fa03 f000 	lsl.w	r0, r3, r0
 8003b1c:	9b04      	ldr	r3, [sp, #16]
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	3401      	adds	r4, #1
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b28:	482c      	ldr	r0, [pc, #176]	; (8003bdc <_vfiprintf_r+0x250>)
 8003b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b2e:	2206      	movs	r2, #6
 8003b30:	f7fc fb6e 	bl	8000210 <memchr>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d03f      	beq.n	8003bb8 <_vfiprintf_r+0x22c>
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <_vfiprintf_r+0x254>)
 8003b3a:	bb1b      	cbnz	r3, 8003b84 <_vfiprintf_r+0x1f8>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	3307      	adds	r3, #7
 8003b40:	f023 0307 	bic.w	r3, r3, #7
 8003b44:	3308      	adds	r3, #8
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4a:	443b      	add	r3, r7
 8003b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4e:	e767      	b.n	8003a20 <_vfiprintf_r+0x94>
 8003b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b54:	460c      	mov	r4, r1
 8003b56:	2001      	movs	r0, #1
 8003b58:	e7a5      	b.n	8003aa6 <_vfiprintf_r+0x11a>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	3401      	adds	r4, #1
 8003b5e:	9305      	str	r3, [sp, #20]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f04f 0c0a 	mov.w	ip, #10
 8003b66:	4620      	mov	r0, r4
 8003b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b6c:	3a30      	subs	r2, #48	; 0x30
 8003b6e:	2a09      	cmp	r2, #9
 8003b70:	d903      	bls.n	8003b7a <_vfiprintf_r+0x1ee>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0c5      	beq.n	8003b02 <_vfiprintf_r+0x176>
 8003b76:	9105      	str	r1, [sp, #20]
 8003b78:	e7c3      	b.n	8003b02 <_vfiprintf_r+0x176>
 8003b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7e:	4604      	mov	r4, r0
 8003b80:	2301      	movs	r3, #1
 8003b82:	e7f0      	b.n	8003b66 <_vfiprintf_r+0x1da>
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <_vfiprintf_r+0x258>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f3af 8000 	nop.w
 8003b94:	4607      	mov	r7, r0
 8003b96:	1c78      	adds	r0, r7, #1
 8003b98:	d1d6      	bne.n	8003b48 <_vfiprintf_r+0x1bc>
 8003b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b9c:	07d9      	lsls	r1, r3, #31
 8003b9e:	d405      	bmi.n	8003bac <_vfiprintf_r+0x220>
 8003ba0:	89ab      	ldrh	r3, [r5, #12]
 8003ba2:	059a      	lsls	r2, r3, #22
 8003ba4:	d402      	bmi.n	8003bac <_vfiprintf_r+0x220>
 8003ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ba8:	f7ff fd7f 	bl	80036aa <__retarget_lock_release_recursive>
 8003bac:	89ab      	ldrh	r3, [r5, #12]
 8003bae:	065b      	lsls	r3, r3, #25
 8003bb0:	f53f af12 	bmi.w	80039d8 <_vfiprintf_r+0x4c>
 8003bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb6:	e711      	b.n	80039dc <_vfiprintf_r+0x50>
 8003bb8:	ab03      	add	r3, sp, #12
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	462a      	mov	r2, r5
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <_vfiprintf_r+0x258>)
 8003bc0:	a904      	add	r1, sp, #16
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f880 	bl	8003cc8 <_printf_i>
 8003bc8:	e7e4      	b.n	8003b94 <_vfiprintf_r+0x208>
 8003bca:	bf00      	nop
 8003bcc:	080041c8 	.word	0x080041c8
 8003bd0:	080041e8 	.word	0x080041e8
 8003bd4:	080041a8 	.word	0x080041a8
 8003bd8:	08004208 	.word	0x08004208
 8003bdc:	08004212 	.word	0x08004212
 8003be0:	00000000 	.word	0x00000000
 8003be4:	08003967 	.word	0x08003967
 8003be8:	0800420e 	.word	0x0800420e

08003bec <_printf_common>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	4699      	mov	r9, r3
 8003bf4:	688a      	ldr	r2, [r1, #8]
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	bfb8      	it	lt
 8003c00:	4613      	movlt	r3, r2
 8003c02:	6033      	str	r3, [r6, #0]
 8003c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c08:	4607      	mov	r7, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	b10a      	cbz	r2, 8003c12 <_printf_common+0x26>
 8003c0e:	3301      	adds	r3, #1
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	0699      	lsls	r1, r3, #26
 8003c16:	bf42      	ittt	mi
 8003c18:	6833      	ldrmi	r3, [r6, #0]
 8003c1a:	3302      	addmi	r3, #2
 8003c1c:	6033      	strmi	r3, [r6, #0]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d106      	bne.n	8003c34 <_printf_common+0x48>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	6832      	ldr	r2, [r6, #0]
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	42ab      	cmp	r3, r5
 8003c32:	dc26      	bgt.n	8003c82 <_printf_common+0x96>
 8003c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c38:	1e13      	subs	r3, r2, #0
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	bf18      	it	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	0692      	lsls	r2, r2, #26
 8003c42:	d42b      	bmi.n	8003c9c <_printf_common+0xb0>
 8003c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c48:	4649      	mov	r1, r9
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	47c0      	blx	r8
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d01e      	beq.n	8003c90 <_printf_common+0xa4>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	68e5      	ldr	r5, [r4, #12]
 8003c56:	6832      	ldr	r2, [r6, #0]
 8003c58:	f003 0306 	and.w	r3, r3, #6
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	bf08      	it	eq
 8003c60:	1aad      	subeq	r5, r5, r2
 8003c62:	68a3      	ldr	r3, [r4, #8]
 8003c64:	6922      	ldr	r2, [r4, #16]
 8003c66:	bf0c      	ite	eq
 8003c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c6c:	2500      	movne	r5, #0
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bfc4      	itt	gt
 8003c72:	1a9b      	subgt	r3, r3, r2
 8003c74:	18ed      	addgt	r5, r5, r3
 8003c76:	2600      	movs	r6, #0
 8003c78:	341a      	adds	r4, #26
 8003c7a:	42b5      	cmp	r5, r6
 8003c7c:	d11a      	bne.n	8003cb4 <_printf_common+0xc8>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e008      	b.n	8003c94 <_printf_common+0xa8>
 8003c82:	2301      	movs	r3, #1
 8003c84:	4652      	mov	r2, sl
 8003c86:	4649      	mov	r1, r9
 8003c88:	4638      	mov	r0, r7
 8003c8a:	47c0      	blx	r8
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d103      	bne.n	8003c98 <_printf_common+0xac>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	3501      	adds	r5, #1
 8003c9a:	e7c6      	b.n	8003c2a <_printf_common+0x3e>
 8003c9c:	18e1      	adds	r1, r4, r3
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	2030      	movs	r0, #48	; 0x30
 8003ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ca6:	4422      	add	r2, r4
 8003ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	e7c7      	b.n	8003c44 <_printf_common+0x58>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4649      	mov	r1, r9
 8003cba:	4638      	mov	r0, r7
 8003cbc:	47c0      	blx	r8
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d0e6      	beq.n	8003c90 <_printf_common+0xa4>
 8003cc2:	3601      	adds	r6, #1
 8003cc4:	e7d9      	b.n	8003c7a <_printf_common+0x8e>
	...

08003cc8 <_printf_i>:
 8003cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	7e0f      	ldrb	r7, [r1, #24]
 8003cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cd0:	2f78      	cmp	r7, #120	; 0x78
 8003cd2:	4691      	mov	r9, r2
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	469a      	mov	sl, r3
 8003cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cde:	d807      	bhi.n	8003cf0 <_printf_i+0x28>
 8003ce0:	2f62      	cmp	r7, #98	; 0x62
 8003ce2:	d80a      	bhi.n	8003cfa <_printf_i+0x32>
 8003ce4:	2f00      	cmp	r7, #0
 8003ce6:	f000 80d8 	beq.w	8003e9a <_printf_i+0x1d2>
 8003cea:	2f58      	cmp	r7, #88	; 0x58
 8003cec:	f000 80a3 	beq.w	8003e36 <_printf_i+0x16e>
 8003cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cf8:	e03a      	b.n	8003d70 <_printf_i+0xa8>
 8003cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cfe:	2b15      	cmp	r3, #21
 8003d00:	d8f6      	bhi.n	8003cf0 <_printf_i+0x28>
 8003d02:	a101      	add	r1, pc, #4	; (adr r1, 8003d08 <_printf_i+0x40>)
 8003d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d08:	08003d61 	.word	0x08003d61
 8003d0c:	08003d75 	.word	0x08003d75
 8003d10:	08003cf1 	.word	0x08003cf1
 8003d14:	08003cf1 	.word	0x08003cf1
 8003d18:	08003cf1 	.word	0x08003cf1
 8003d1c:	08003cf1 	.word	0x08003cf1
 8003d20:	08003d75 	.word	0x08003d75
 8003d24:	08003cf1 	.word	0x08003cf1
 8003d28:	08003cf1 	.word	0x08003cf1
 8003d2c:	08003cf1 	.word	0x08003cf1
 8003d30:	08003cf1 	.word	0x08003cf1
 8003d34:	08003e81 	.word	0x08003e81
 8003d38:	08003da5 	.word	0x08003da5
 8003d3c:	08003e63 	.word	0x08003e63
 8003d40:	08003cf1 	.word	0x08003cf1
 8003d44:	08003cf1 	.word	0x08003cf1
 8003d48:	08003ea3 	.word	0x08003ea3
 8003d4c:	08003cf1 	.word	0x08003cf1
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003cf1 	.word	0x08003cf1
 8003d58:	08003cf1 	.word	0x08003cf1
 8003d5c:	08003e6b 	.word	0x08003e6b
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	602a      	str	r2, [r5, #0]
 8003d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0a3      	b.n	8003ebc <_printf_i+0x1f4>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	6829      	ldr	r1, [r5, #0]
 8003d78:	0606      	lsls	r6, r0, #24
 8003d7a:	f101 0304 	add.w	r3, r1, #4
 8003d7e:	d50a      	bpl.n	8003d96 <_printf_i+0xce>
 8003d80:	680e      	ldr	r6, [r1, #0]
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	da03      	bge.n	8003d90 <_printf_i+0xc8>
 8003d88:	232d      	movs	r3, #45	; 0x2d
 8003d8a:	4276      	negs	r6, r6
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d90:	485e      	ldr	r0, [pc, #376]	; (8003f0c <_printf_i+0x244>)
 8003d92:	230a      	movs	r3, #10
 8003d94:	e019      	b.n	8003dca <_printf_i+0x102>
 8003d96:	680e      	ldr	r6, [r1, #0]
 8003d98:	602b      	str	r3, [r5, #0]
 8003d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d9e:	bf18      	it	ne
 8003da0:	b236      	sxthne	r6, r6
 8003da2:	e7ef      	b.n	8003d84 <_printf_i+0xbc>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	6029      	str	r1, [r5, #0]
 8003dac:	0601      	lsls	r1, r0, #24
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0xec>
 8003db0:	681e      	ldr	r6, [r3, #0]
 8003db2:	e002      	b.n	8003dba <_printf_i+0xf2>
 8003db4:	0646      	lsls	r6, r0, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0xe8>
 8003db8:	881e      	ldrh	r6, [r3, #0]
 8003dba:	4854      	ldr	r0, [pc, #336]	; (8003f0c <_printf_i+0x244>)
 8003dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2308      	moveq	r3, #8
 8003dc2:	230a      	movne	r3, #10
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dca:	6865      	ldr	r5, [r4, #4]
 8003dcc:	60a5      	str	r5, [r4, #8]
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	bfa2      	ittt	ge
 8003dd2:	6821      	ldrge	r1, [r4, #0]
 8003dd4:	f021 0104 	bicge.w	r1, r1, #4
 8003dd8:	6021      	strge	r1, [r4, #0]
 8003dda:	b90e      	cbnz	r6, 8003de0 <_printf_i+0x118>
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	d04d      	beq.n	8003e7c <_printf_i+0x1b4>
 8003de0:	4615      	mov	r5, r2
 8003de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003de6:	fb03 6711 	mls	r7, r3, r1, r6
 8003dea:	5dc7      	ldrb	r7, [r0, r7]
 8003dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003df0:	4637      	mov	r7, r6
 8003df2:	42bb      	cmp	r3, r7
 8003df4:	460e      	mov	r6, r1
 8003df6:	d9f4      	bls.n	8003de2 <_printf_i+0x11a>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d10b      	bne.n	8003e14 <_printf_i+0x14c>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	07de      	lsls	r6, r3, #31
 8003e00:	d508      	bpl.n	8003e14 <_printf_i+0x14c>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	6861      	ldr	r1, [r4, #4]
 8003e06:	4299      	cmp	r1, r3
 8003e08:	bfde      	ittt	le
 8003e0a:	2330      	movle	r3, #48	; 0x30
 8003e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e14:	1b52      	subs	r2, r2, r5
 8003e16:	6122      	str	r2, [r4, #16]
 8003e18:	f8cd a000 	str.w	sl, [sp]
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	aa03      	add	r2, sp, #12
 8003e20:	4621      	mov	r1, r4
 8003e22:	4640      	mov	r0, r8
 8003e24:	f7ff fee2 	bl	8003bec <_printf_common>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d14c      	bne.n	8003ec6 <_printf_i+0x1fe>
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e30:	b004      	add	sp, #16
 8003e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e36:	4835      	ldr	r0, [pc, #212]	; (8003f0c <_printf_i+0x244>)
 8003e38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e3c:	6829      	ldr	r1, [r5, #0]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e44:	6029      	str	r1, [r5, #0]
 8003e46:	061d      	lsls	r5, r3, #24
 8003e48:	d514      	bpl.n	8003e74 <_printf_i+0x1ac>
 8003e4a:	07df      	lsls	r7, r3, #31
 8003e4c:	bf44      	itt	mi
 8003e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e52:	6023      	strmi	r3, [r4, #0]
 8003e54:	b91e      	cbnz	r6, 8003e5e <_printf_i+0x196>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f023 0320 	bic.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	2310      	movs	r3, #16
 8003e60:	e7b0      	b.n	8003dc4 <_printf_i+0xfc>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	f043 0320 	orr.w	r3, r3, #32
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	2378      	movs	r3, #120	; 0x78
 8003e6c:	4828      	ldr	r0, [pc, #160]	; (8003f10 <_printf_i+0x248>)
 8003e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e72:	e7e3      	b.n	8003e3c <_printf_i+0x174>
 8003e74:	0659      	lsls	r1, r3, #25
 8003e76:	bf48      	it	mi
 8003e78:	b2b6      	uxthmi	r6, r6
 8003e7a:	e7e6      	b.n	8003e4a <_printf_i+0x182>
 8003e7c:	4615      	mov	r5, r2
 8003e7e:	e7bb      	b.n	8003df8 <_printf_i+0x130>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	6826      	ldr	r6, [r4, #0]
 8003e84:	6961      	ldr	r1, [r4, #20]
 8003e86:	1d18      	adds	r0, r3, #4
 8003e88:	6028      	str	r0, [r5, #0]
 8003e8a:	0635      	lsls	r5, r6, #24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	d501      	bpl.n	8003e94 <_printf_i+0x1cc>
 8003e90:	6019      	str	r1, [r3, #0]
 8003e92:	e002      	b.n	8003e9a <_printf_i+0x1d2>
 8003e94:	0670      	lsls	r0, r6, #25
 8003e96:	d5fb      	bpl.n	8003e90 <_printf_i+0x1c8>
 8003e98:	8019      	strh	r1, [r3, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	4615      	mov	r5, r2
 8003ea0:	e7ba      	b.n	8003e18 <_printf_i+0x150>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	681d      	ldr	r5, [r3, #0]
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	2100      	movs	r1, #0
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f7fc f9ae 	bl	8000210 <memchr>
 8003eb4:	b108      	cbz	r0, 8003eba <_printf_i+0x1f2>
 8003eb6:	1b40      	subs	r0, r0, r5
 8003eb8:	6060      	str	r0, [r4, #4]
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	6123      	str	r3, [r4, #16]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec4:	e7a8      	b.n	8003e18 <_printf_i+0x150>
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	47d0      	blx	sl
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d0ab      	beq.n	8003e2c <_printf_i+0x164>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	079b      	lsls	r3, r3, #30
 8003ed8:	d413      	bmi.n	8003f02 <_printf_i+0x23a>
 8003eda:	68e0      	ldr	r0, [r4, #12]
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	4298      	cmp	r0, r3
 8003ee0:	bfb8      	it	lt
 8003ee2:	4618      	movlt	r0, r3
 8003ee4:	e7a4      	b.n	8003e30 <_printf_i+0x168>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4632      	mov	r2, r6
 8003eea:	4649      	mov	r1, r9
 8003eec:	4640      	mov	r0, r8
 8003eee:	47d0      	blx	sl
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d09b      	beq.n	8003e2c <_printf_i+0x164>
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	68e3      	ldr	r3, [r4, #12]
 8003ef8:	9903      	ldr	r1, [sp, #12]
 8003efa:	1a5b      	subs	r3, r3, r1
 8003efc:	42ab      	cmp	r3, r5
 8003efe:	dcf2      	bgt.n	8003ee6 <_printf_i+0x21e>
 8003f00:	e7eb      	b.n	8003eda <_printf_i+0x212>
 8003f02:	2500      	movs	r5, #0
 8003f04:	f104 0619 	add.w	r6, r4, #25
 8003f08:	e7f5      	b.n	8003ef6 <_printf_i+0x22e>
 8003f0a:	bf00      	nop
 8003f0c:	08004219 	.word	0x08004219
 8003f10:	0800422a 	.word	0x0800422a

08003f14 <_sbrk_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	; (8003f30 <_sbrk_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fd fc58 	bl	80017d4 <_sbrk>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_sbrk_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_sbrk_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000150 	.word	0x20000150

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 f8a0 	bl	8004080 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	4605      	mov	r5, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f000 f868 	bl	8004044 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	4632      	mov	r2, r6
 8003f82:	463b      	mov	r3, r7
 8003f84:	4628      	mov	r0, r5
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b817 	b.w	8003fbc <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f855 	bl	8004044 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b813 	b.w	8003fe0 <_close_r>
	...

08003fbc <_write_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d07      	ldr	r5, [pc, #28]	; (8003fdc <_write_r+0x20>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7fd fbb1 	bl	8001732 <_write>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_write_r+0x1e>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_write_r+0x1e>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	20000150 	.word	0x20000150

08003fe0 <_close_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d06      	ldr	r5, [pc, #24]	; (8003ffc <_close_r+0x1c>)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	f7fd fbbd 	bl	800176a <_close>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_close_r+0x1a>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_close_r+0x1a>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20000150 	.word	0x20000150

08004000 <_fstat_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d07      	ldr	r5, [pc, #28]	; (8004020 <_fstat_r+0x20>)
 8004004:	2300      	movs	r3, #0
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	f7fd fbb8 	bl	8001782 <_fstat>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d102      	bne.n	800401c <_fstat_r+0x1c>
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	b103      	cbz	r3, 800401c <_fstat_r+0x1c>
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	bd38      	pop	{r3, r4, r5, pc}
 800401e:	bf00      	nop
 8004020:	20000150 	.word	0x20000150

08004024 <_isatty_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d06      	ldr	r5, [pc, #24]	; (8004040 <_isatty_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fd fbb7 	bl	80017a2 <_isatty>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_isatty_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_isatty_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000150 	.word	0x20000150

08004044 <_lseek_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d07      	ldr	r5, [pc, #28]	; (8004064 <_lseek_r+0x20>)
 8004048:	4604      	mov	r4, r0
 800404a:	4608      	mov	r0, r1
 800404c:	4611      	mov	r1, r2
 800404e:	2200      	movs	r2, #0
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7fd fbb0 	bl	80017b8 <_lseek>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_lseek_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_lseek_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	20000150 	.word	0x20000150

08004068 <__malloc_lock>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__malloc_lock+0x8>)
 800406a:	f7ff bb1d 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 800406e:	bf00      	nop
 8004070:	20000144 	.word	0x20000144

08004074 <__malloc_unlock>:
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <__malloc_unlock+0x8>)
 8004076:	f7ff bb18 	b.w	80036aa <__retarget_lock_release_recursive>
 800407a:	bf00      	nop
 800407c:	20000144 	.word	0x20000144

08004080 <_read_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d07      	ldr	r5, [pc, #28]	; (80040a0 <_read_r+0x20>)
 8004084:	4604      	mov	r4, r0
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	2200      	movs	r2, #0
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fd fb32 	bl	80016f8 <_read>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_read_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_read_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000150 	.word	0x20000150

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
